-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3307
-- Tempo de geração: 17/06/2025 às 21:40
-- Versão do servidor: 10.4.32-MariaDB
-- Versão do PHP: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Banco de dados: `quiz`
--

-- --------------------------------------------------------

--
-- Estrutura para tabela `emblemas`
--

CREATE TABLE `emblemas` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL,
  `imagem_url` varchar(255) NOT NULL,
  `descricao` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `emblemas`
--

INSERT INTO `emblemas` (`id`, `nome`, `imagem_url`, `descricao`) VALUES
(1, 'Ninja dos Algoritmos', 'frontend/fotos/niveis_algoritimos.png', 'Completou os dois níveis de algoritmos com sucesso'),
(4, 'Ninja Gamer dos Algoritmos', 'frontend/assets/emblemas/game_algoritimos.png', 'Ganhou o game do tópico Algoritmos');

-- --------------------------------------------------------

--
-- Estrutura para tabela `game_questions`
--

CREATE TABLE `game_questions` (
  `id` int(11) NOT NULL,
  `question` text NOT NULL,
  `answer1` varchar(255) NOT NULL,
  `answer2` varchar(255) NOT NULL,
  `answer3` varchar(255) NOT NULL,
  `answer4` varchar(255) NOT NULL,
  `correct_answer` int(11) NOT NULL,
  `topico` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `game_questions`
--

INSERT INTO `game_questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `topico`) VALUES
(1, 'O que é um algoritmo?', 'Um software pronto para uso', 'Uma sequência aleatória de códigos', 'Uma sequência de passos bem definidos para resolver um problema', 'Um hardware que executa programas', 3, ''),
(2, 'Qual das opções a seguir representa um exemplo de algoritmo no cotidiano?', 'Jogar futebol', 'Dormir à noite', 'Preparar um café seguindo uma receita', 'Assistir a um filme', 3, ''),
(3, 'Qual característica define que um algoritmo deve terminar em algum momento?', 'Eficiência', 'Clareza', 'Entrada e saída', 'Finitude', 4, ''),
(4, 'Qual das alternativas abaixo não é uma característica essencial de um algoritmo?', 'Clareza', 'Ter interface gráfica', 'Ser finito', 'Ter entradas e saídas', 2, ''),
(5, 'O que é pseudocódigo?', 'Um código-fonte pronto para execução', 'Um programa compilado', 'Uma forma simplificada de representar algoritmos', 'Um erro de sintaxe', 3, ''),
(6, 'O que acontece quando um algoritmo é seguido corretamente?', 'Gera sempre um resultado diferente', 'Pode travar o sistema', 'Produz um resultado esperado', 'Substitui o sistema operacional', 3, ''),
(7, 'Qual das opções representa um algoritmo simples?', 'Pintar um quadro aleatoriamente', 'Ler dois números e somá-los', 'Conversar com amigos', 'Assistir televisão', 2, ''),
(8, 'Por que a eficiência é importante em algoritmos?', 'Para deixá-los mais bonitos', 'Para economizar tempo e recursos computacionais', 'Para gerar gráficos visuais', 'Para criar vídeos', 2, ''),
(9, 'Qual elemento não é obrigatório em um algoritmo, mas é desejável?', 'Finitude', 'Clareza', 'Eficiência', 'Entrada de dados', 3, ''),
(10, 'O que um algoritmo precisa ter obrigatoriamente?', 'Interface gráfica', 'Efeitos sonoros', 'Instruções claras e bem definidas', 'Conexão com a internet', 3, ''),
(11, 'O que define um algoritmo como eficiente?', 'Ele usa muitas variáveis', 'Ele realiza tarefas com o menor uso possível de tempo e recursos', 'Ele tem várias instruções repetidas', 'Ele é grande e complexo', 2, ''),
(12, 'Qual é a principal aplicação dos algoritmos na computação?', 'Produzir imagens em 3D', 'Criar redes sociais', 'Resolver problemas e executar tarefas', 'Melhorar o sinal de internet', 3, ''),
(13, 'Qual das opções representa uma saída de um algoritmo?', 'Teclado', 'Mouse', 'Resultado de um cálculo', 'Código-fonte', 3, ''),
(14, 'O que significa “entrada” em um algoritmo?', 'A primeira linha do código', 'O nome do algoritmo', 'Os dados fornecidos para o algoritmo', 'O nome da linguagem usada', 3, ''),
(15, 'Qual das alternativas apresenta um algoritmo com passos claros e definidos?', 'Fazer o que quiser com ingredientes', 'Aquecer água, colocar pó de café, passar o café, servir', 'Esperar o tempo passar', 'Improvisar uma receita', 2, ''),
(16, 'Um algoritmo precisa obrigatoriamente de:', 'Conexão com a internet', 'Dados de entrada e resultados de saída', 'Interface com o usuário', 'Animações', 2, ''),
(17, 'Qual das opções melhor descreve o papel do pseudocódigo?', 'Criar gráficos', 'Mostrar o resultado final do algoritmo', 'Representar algoritmos de forma simplificada e compreensível', 'Gerar código binário', 3, ''),
(18, 'Qual é o último passo de um algoritmo corretamente executado?', 'Entrada de dados', 'Processamento das instruções', 'Geração de saída', 'Inicialização', 3, ''),
(19, 'Quando dizemos que um algoritmo é finito, isso significa que ele:', 'Pode rodar infinitamente', 'Sempre falha no final', 'Termina após um número limitado de passos', 'Não pode ser executado', 3, ''),
(20, 'A principal importância de um algoritmo bem definido é:', 'Tornar o código maior', 'Diminuir o desempenho do sistema', 'Aumentar o uso de memória', 'Garantir que a tarefa seja feita corretamente e com eficiência', 4, '');

-- --------------------------------------------------------

--
-- Estrutura para tabela `questions`
--

CREATE TABLE `questions` (
  `id` int(11) NOT NULL,
  `question` text NOT NULL,
  `answer1` text NOT NULL,
  `answer2` text NOT NULL,
  `answer3` text NOT NULL,
  `answer4` text NOT NULL,
  `correct_answer` int(11) NOT NULL,
  `dificuldade` varchar(50) NOT NULL,
  `topico` varchar(100) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `questions`
--

INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(1, 'O que é um algoritmo?', 'Um tipo de programa de computador.', 'Uma sequência finita de passos para resolver um problema.', 'Uma linguagem de programação.', 'Um hardware de computador.', 2, 'Fácil', 'algoritimos'),
(2, 'Qual a principal função de um algoritmo na computação?', 'Apenas para criar jogos.', 'Ser a base de qualquer software ou aplicação.', 'Exclusivamente para cálculos matemáticos.', 'Controlar o funcionamento de um mouse.', 2, 'Fácil', 'algoritimos'),
(3, 'Qual exemplo do cotidiano é citado no texto como um algoritmo?', 'Assistir a um filme.', 'Fazer compras no supermercado.', 'Uma receita de comida.', 'Dirigir um carro.', 3, 'Fácil', 'algoritimos'),
(4, 'Uma das características de um algoritmo é ser \"finito\". O que isso significa?', 'Ele pode ser executado infinitamente.', 'Ele deve ter um número limitado de passos.', 'Ele é muito complexo.', 'Ele não tem começo nem fim.', 2, 'Fácil', 'algoritimos'),
(5, 'Um algoritmo deve ter \"definição clara\". O que isso implica?', 'Que ele deve ser escrito em inglês.', 'Que cada passo deve ser compreendido por um computador.', 'Que cada passo deve ser descrito sem ambiguidades.', 'Que cada passo deve ser impresso em papel.', 3, 'Fácil', 'algoritimos'),
(6, 'Quais são os dois elementos que todo algoritmo recebe e gera, respectivamente?', 'Programas e erros.', 'Hardware e software.', 'Entradas (dados) e saídas (resultados).', 'Início e Fim.', 3, 'Fácil', 'algoritimos'),
(7, 'Por que a \"eficiência\" é uma característica desejável em um algoritmo?', 'Para torná-lo mais bonito.', 'Para que ele resolva problemas mais rapidamente, com menos recursos.', 'Para que ele seja mais difícil de entender.', 'Para que ele use mais memória RAM.', 2, 'Fácil', 'algoritimos'),
(8, 'No exemplo do cálculo da média de três números, qual é o primeiro passo do algoritmo?', 'Escrever Média.', 'Fim.', 'Ler número1.', 'Calcular a média.', 3, 'Fácil', 'algoritimos'),
(9, 'No algoritmo para fazer café, qual é o primeiro passo após o \"Início\"?', 'Colocar o pó de café.', 'Aquecer água até ferver.', 'Despejar a água quente.', 'Servir o café.', 2, 'Fácil', 'algoritimos'),
(10, 'O que o pseudocódigo busca evitar?', 'A lógica de programação.', 'A sintaxe exata de uma linguagem de programação.', 'O entendimento do algoritmo.', 'A resolução de problemas.', 2, 'Fácil', 'algoritimos'),
(11, 'O que o pseudocódigo mistura para facilitar o entendimento do algoritmo?', 'Matemática e física.', 'Lógica de programação com o idioma natural.', 'Códigos binários e números.', 'Imagens e sons.', 2, 'Fácil', 'algoritimos'),
(12, 'Qual a principal utilidade do pseudocódigo?', 'Criar programas prontos.', 'Servir como um esboço para ser convertido em linguagem de programação real.', 'Apenas para documentação.', 'Para testar a velocidade de um computador.', 2, 'Fácil', 'algoritimos'),
(13, 'No pseudocódigo de soma de dois números, qual o passo final?', 'Ler número1.', 'Somar os números.', 'Escrever Soma.', 'Início.', 3, 'Fácil', 'algoritimos'),
(14, 'Qual a importância da construção de algoritmos bem definidos?', 'Apenas para aumentar o tamanho do código.', 'Para desenvolver sistemas eficientes e confiáveis.', 'Para dificultar a manutenção do software.', 'Para consumir mais recursos computacionais.', 2, 'Fácil', 'algoritimos'),
(15, 'O que um bom algoritmo pode otimizar?', 'Apenas a aparência do programa.', 'O desempenho de um programa e reduzir o consumo de recursos.', 'O número de bugs em um programa.', 'O tempo de compilação.', 2, 'Fácil', 'algoritimos'),
(16, 'A lógica por trás dos algoritmos é fundamental para:', 'Decorar códigos.', 'Resolver problemas de maneira mais eficiente.', 'Escrever textos longos.', 'Desenhar imagens em computadores.', 2, 'Fácil', 'algoritimos'),
(17, 'Qual a característica de um algoritmo que garante que ele será executado dentro de um tempo limitado?', 'Entradas e saídas.', 'Definição clara.', 'Finito.', 'Eficiência.', 3, 'Fácil', 'algoritimos'),
(18, 'O que acontece se uma receita (algoritmo) for seguida corretamente?', 'O resultado será sempre diferente.', 'O resultado será sempre o mesmo.', 'A receita será alterada.', 'A tarefa não será concluída.', 2, 'Fácil', 'algoritimos'),
(19, 'Qual das opções não é uma característica fundamental para que algo seja considerado um algoritmo?', 'Finito.', 'Entradas e saídas.', 'Eficiência.', 'Definição clara.', 3, 'Fácil', 'algoritimos'),
(20, 'No exemplo do cálculo da média, qual é a operação matemática realizada?', 'Subtração e multiplicação.', 'Adição e divisão.', 'Apenas adição.', 'Apenas divisão.', 2, 'Fácil', 'algoritimos'),
(21, 'O que os algoritmos permitem descrever?', 'Apenas problemas complexos.', 'Soluções de maneira clara e precisa.', 'Novas linguagens de programação.', 'O funcionamento do hardware.', 2, 'Fácil', 'algoritimos'),
(22, 'Para qual profissional a habilidade de entender e praticar a construção de algoritmos é essencial?', 'Um artista plástico.', 'Um médico.', 'Um programador ou profissional da área de tecnologia.', 'Um cozinheiro.', 3, 'Fácil', 'algoritimos'),
(23, 'Se um algoritmo não tem uma \"definição clara\", o que pode acontecer?', 'Ele será mais eficiente.', 'Ele será mais fácil de entender.', 'Pode haver ambiguidades e dificultar sua execução.', 'Ele não precisará de entradas.', 3, 'Fácil', 'algoritimos'),
(24, 'Qual o papel das \"entradas\" em um algoritmo?', 'Gerar resultados.', 'Fornecer os dados necessários para a execução.', 'Definir o final do algoritmo.', 'Mostrar os passos do algoritmo.', 2, 'Fácil', 'algoritimos'),
(25, 'O que o \"Fim\" representa em um algoritmo ou pseudocódigo?', 'O início do processo.', 'O ponto de parada, indicando o término da execução.', 'Um erro no algoritmo.', 'Uma nova etapa.', 2, 'Fácil', 'algoritimos'),
(26, 'Qual o objetivo de um algoritmo?', 'Criar problemas.', 'Resolver um problema ou executar uma tarefa específica.', 'Apenas exibir informações.', 'Formatar um texto.', 2, 'Fácil', 'algoritimos'),
(27, 'Por que os algoritmos são considerados a \"espinha dorsal\" da programação?', 'Porque são difíceis de aprender.', 'Porque são a base para a criação de qualquer software.', 'Porque são usados apenas em programas antigos.', 'Porque consomem muitos recursos.', 2, 'Fácil', 'algoritimos'),
(28, 'Onde os algoritmos podem ser aplicados?', 'Somente na programação.', 'Somente no dia a dia.', 'Em uma infinidade de contextos, na programação e no dia a dia.', 'Apenas em cálculos científicos.', 3, 'Fácil', 'algoritimos'),
(29, 'O que um algoritmo bem definido pode evitar durante a execução?', 'Aumento de desempenho.', 'Erros.', 'Redução de recursos.', 'Clareza.', 2, 'Fácil', 'algoritimos'),
(30, 'No algoritmo de cálculo da média, o que a seta \"←\" significa?', 'Divisão.', 'Atribuição (recebe o valor de).', 'Comparação.', 'Multiplicação.', 2, 'Fácil', 'algoritimos'),
(31, 'Qual a ordem correta dos passos básicos para um algoritmo de cálculo da média?', 'Calcular, Ler, Escrever.', 'Escrever, Calcular, Ler.', 'Ler, Calcular, Escrever.', 'Início, Fim, Meio.', 3, 'Fácil', 'algoritimos'),
(32, 'O que o texto compara uma \"receita de instruções\" a?', 'Um manual de carro.', 'Um algoritmo.', 'Um dicionário.', 'Um livro de história.', 2, 'Fácil', 'algoritimos'),
(33, 'Qual a principal vantagem de usar pseudocódigo?', 'Ele pode ser executado diretamente pelo computador.', 'Ele ajuda a entender a lógica sem se prender à sintaxe da linguagem.', 'Ele é mais rápido de escrever do que um algoritmo real.', 'Ele substitui a necessidade de uma linguagem de programação.', 2, 'Fácil', 'algoritimos'),
(34, 'Se um algoritmo não tiver um número finito de passos, o que pode acontecer?', 'Ele terminará rapidamente.', 'Ele pode entrar em um loop infinito e nunca terminar.', 'Ele será mais fácil de depurar.', 'Ele não precisará de entradas.', 2, 'Fácil', 'algoritimos'),
(35, 'A frase \"resolver problemas de maneira mais eficiente\" está relacionada a qual característica do algoritmo?', 'Definição clara.', 'Finito.', 'Entradas e saídas.', 'Eficiência.', 4, 'Fácil', 'algoritimos'),
(36, 'Qual o significado de \"ambiguidades\" em relação à definição clara de um algoritmo?', 'Clareza.', 'Duplos sentidos ou falta de precisão.', 'Facilidade de execução.', 'Rapidez.', 2, 'Fácil', 'algoritimos'),
(37, 'O que a construção de algoritmos bem definidos é crucial para?', 'Criar problemas.', 'O desenvolvimento de sistemas ineficientes.', 'O desenvolvimento de sistemas eficientes e confiáveis.', 'Apenas para diversão.', 3, 'Fácil', 'algoritimos'),
(38, 'Qual a característica que garante que um algoritmo produzirá um resultado?', 'Ser finito.', 'Ter entradas e saídas.', 'Ser ambíguo.', 'Ser complexo.', 2, 'Fácil', 'algoritimos'),
(39, 'No exemplo do algoritmo para preparar um café, qual a \"entrada\" implícita?', 'O café pronto.', 'A água, o pó de café e a cafeteira.', 'A espera.', 'O servir.', 2, 'Fácil', 'algoritimos'),
(40, 'O que significa \"otimizar o desempenho de um programa\" no contexto de algoritmos?', 'Torná-lo mais lento.', 'Fazer com que ele execute mais tarefas ao mesmo tempo.', 'Fazer com que ele funcione melhor e mais rapidamente.', 'Aumentar o consumo de energia.', 3, 'Fácil', 'algoritimos'),
(41, 'Qual é a primeira etapa na construção de um algoritmo?', 'Codificação do programa.', 'Definição do problema a ser resolvido.', 'Teste do software.', 'Criação da interface gráfica.', 2, 'Fácil', 'algoritimos'),
(42, 'Um algoritmo é uma \"sequência finita\". O que isso impede?', 'Que ele seja executado apenas uma vez.', 'Que ele continue para sempre em um loop infinito.', 'Que ele aceite muitas entradas.', 'Que ele tenha poucos passos.', 2, 'Fácil', 'algoritimos'),
(43, 'O que significa um algoritmo ser \"bem definido\"?', 'Ele é complicado de entender.', 'Cada passo é claro e não ambíguo.', 'Ele pode ter vários resultados possíveis.', 'Ele é escrito em uma linguagem específica.', 2, 'Fácil', 'algoritimos'),
(44, 'Qual a relação entre um algoritmo e um programa de computador?', 'Um algoritmo é um programa de computador.', 'Um programa de computador é uma implementação de um algoritmo.', 'Eles não têm relação.', 'Um algoritmo é uma parte do hardware.', 2, 'Fácil', 'algoritimos'),
(45, 'Se um algoritmo não recebe entradas, o que ele não pode fazer?', 'Gerar saídas.', 'Executar passos.', 'Ser finito.', 'Ter um tópico.', 1, 'Fácil', 'algoritimos'),
(46, 'O que as \"saídas\" de um algoritmo representam?', 'Os dados iniciais.', 'Os resultados da execução.', 'Os erros encontrados.', 'As instruções a serem seguidas.', 2, 'Fácil', 'algoritimos'),
(47, 'Por que o pseudocódigo é considerado uma \"receita de bolo\" para algoritmos?', 'Porque ele é comestível.', 'Porque ele define os passos e ingredientes para o sucesso.', 'Porque ele é complexo como um bolo.', 'Porque ele sempre tem o mesmo sabor.', 2, 'Fácil', 'algoritimos'),
(48, 'Qual o objetivo de descrever um algoritmo em pseudocódigo antes de codificá-lo?', 'Para torná-lo mais rápido.', 'Para entender a lógica sem se preocupar com a sintaxe.', 'Para que apenas especialistas o entendam.', 'Para que ele seja mais seguro.', 2, 'Fácil', 'algoritimos'),
(49, 'O que o texto sugere que se deve fazer para se tornar um bom programador?', 'Decorar linguagens de programação.', 'Entender e praticar a construção de algoritmos.', 'Apenas usar programas prontos.', 'Comprar um computador potente.', 2, 'Fácil', 'algoritimos'),
(50, 'Qual das seguintes opções é um exemplo de algoritmo no dia a dia?', 'Dormir.', 'Ler um livro.', 'Seguir um manual de instruções para montar um móvel.', 'Cantar uma música.', 3, 'Fácil', 'algoritimos'),
(51, 'A ausência de \"ambiguidades\" em um algoritmo garante o quê?', 'Que ele será muito lento.', 'Que ele será executado de forma consistente e previsível.', 'Que ele será muito caro.', 'Que ele precisará de mais recursos.', 2, 'Fácil', 'algoritimos'),
(52, 'Um algoritmo deve ser capaz de ser executado em um \"tempo limitado\". Qual característica garante isso?', 'Entradas e saídas.', 'Finito.', 'Eficiência.', 'Definição clara.', 2, 'Fácil', 'algoritimos'),
(53, 'O que a \"lógica\" por trás dos algoritmos ajuda a resolver?', 'Problemas de hardware.', 'Problemas de forma eficiente.', 'Problemas de design gráfico.', 'Problemas de rede.', 2, 'Fácil', 'algoritimos'),
(54, 'Qual o papel da \"receita de comida\" como analogia para algoritmo?', 'Ela mostra que algoritmos são apenas para cozinhar.', 'Ela ilustra como algoritmos são sequências de passos para um resultado.', 'Ela sugere que algoritmos são sempre deliciosos.', 'Ela indica que algoritmos são difíceis de seguir.', 2, 'Fácil', 'algoritimos'),
(55, 'Um algoritmo é a \"espinha dorsal\" da programação porque:', 'Ele é a parte mais longa de um programa.', 'Ele forma a base essencial de qualquer software.', 'Ele é difícil de mudar.', 'Ele é feito de ossos.', 2, 'Fácil', 'algoritimos'),
(56, 'No exemplo de cálculo da média, o que \"Escrever Média\" representa?', 'Uma entrada de dados.', 'Uma saída de dados.', 'Uma operação matemática.', 'O início do algoritmo.', 2, 'Fácil', 'algoritimos'),
(57, 'O que significa dizer que algoritmos são \"aplicáveis em uma infinidade de contextos\"?', 'Eles só funcionam em contextos muito específicos.', 'Eles podem ser usados em diversas áreas, não apenas na programação.', 'Eles são usados apenas em contextos militares.', 'Eles são exclusivos para jogos.', 2, 'Fácil', 'algoritimos'),
(58, 'Qual é o benefício de um algoritmo eficiente?', 'Ele consome mais energia.', 'Ele resolve problemas mais rapidamente com menos recursos.', 'Ele é mais difícil de ser compreendido.', 'Ele é usado apenas em supercomputadores.', 2, 'Fácil', 'algoritimos'),
(59, 'O que o pseudocódigo fornece que uma linguagem de programação pura não faz no estágio inicial?', 'Velocidade de execução.', 'Sintaxe exata.', 'Flexibilidade para rascunhar a lógica.', 'Apenas erros.', 3, 'Fácil', 'algoritimos'),
(60, 'Por que o entendimento de algoritmos é fundamental para um desenvolvedor?', 'Para decorar códigos rapidamente.', 'Para resolver problemas de forma eficaz e otimizar programas.', 'Para escrever documentos longos.', 'Para usar a internet.', 2, 'Fácil', 'algoritimos'),
(61, 'Qual a principal diferença entre um algoritmo e um software?', 'Um algoritmo é físico, um software é lógico.', 'Um algoritmo é a lógica, o software é a implementação executável.', 'Não há diferença.', 'Um software é uma sequência de passos, um algoritmo não.', 2, 'Fácil', 'algoritimos'),
(62, 'O que um algoritmo sempre deve ter para ser considerado completo?', 'Um designer gráfico.', 'Um começo e um fim.', 'Muitas linhas de código.', 'Um nome complicado.', 2, 'Fácil', 'algoritimos'),
(63, 'Se um algoritmo está \"otimizando o desempenho\", o que ele está fazendo?', 'Tornando-o mais lento.', 'Melhorando sua velocidade e uso de recursos.', 'Aumentando seus erros.', 'Diminuindo sua clareza.', 2, 'Fácil', 'algoritimos'),
(64, 'Qual a importância de um algoritmo reduzir o \"consumo de recursos\"?', 'Para gastar mais dinheiro.', 'Para que o programa seja mais leve e rápido.', 'Para que ele seja mais complexo.', 'Para que ele demore mais para executar.', 2, 'Fácil', 'algoritimos'),
(65, 'O que é um \"passo\" em um algoritmo?', 'Uma parte do hardware.', 'Uma instrução individual a ser executada.', 'Um tipo de dado.', 'Um erro de programação.', 2, 'Fácil', 'algoritimos'),
(66, 'O que acontece se um algoritmo não for \"finito\"?', 'Ele sempre terminará rapidamente.', 'Ele pode nunca terminar sua execução.', 'Ele será mais fácil de depurar.', 'Ele não precisará de entradas.', 2, 'Fácil', 'algoritimos'),
(67, 'Qual o objetivo principal do pseudocódigo na fase de planejamento de um programa?', 'Escrever o código final.', 'Testar a compatibilidade do hardware.', 'Projetar a lógica antes da codificação.', 'Criar a interface do usuário.', 3, 'Fácil', 'algoritimos'),
(68, 'O que a \"receita de café\" demonstra sobre os algoritmos?', 'Que são apenas para bebidas.', 'Que são sequências de passos bem definidos com um resultado específico.', 'Que são sempre quentes.', 'Que são difíceis de seguir.', 2, 'Fácil', 'algoritimos'),
(69, 'Um algoritmo é uma \"receita de instruções\" que leva a quê?', 'À confusão.', 'A um resultado desejado.', 'A mais problemas.', 'A um loop infinito.', 2, 'Fácil', 'algoritimos'),
(70, 'O que é fundamental para a computação, formando a base de qualquer software?', 'Apenas a linguagem de programação.', 'O hardware mais recente.', 'Os algoritmos.', 'A internet.', 3, 'Fácil', 'algoritimos'),
(71, 'No exemplo de cálculo da média, o que a linha \"Média ← (número1 + número2 + número3) / 3\" representa?', 'Uma entrada.', 'Uma saída.', 'Um processamento (cálculo).', 'O fim do algoritmo.', 3, 'Fácil', 'algoritimos'),
(72, 'Por que é importante que os passos de um algoritmo sejam \"claros\"?', 'Para que ninguém mais os entenda.', 'Para evitar ambiguidades e garantir a execução correta.', 'Para torná-lo mais longo.', 'Para que ele seja mais rápido.', 2, 'Fácil', 'algoritimos'),
(73, 'Qual é a característica que permite que um algoritmo receba informações externas?', 'Finito.', 'Saídas.', 'Entradas.', 'Eficiência.', 3, 'Fácil', 'algoritimos'),
(74, 'O que acontece se um algoritmo é mal definido?', 'Ele sempre funcionará perfeitamente.', 'Ele pode gerar resultados inesperados ou erros.', 'Ele será mais rápido.', 'Ele não precisará de testes.', 2, 'Fácil', 'algoritimos'),
(75, 'A \"resolução de problemas computacionais\" é diretamente ligada a qual conceito?', 'Hardware.', 'Sistemas operacionais.', 'Algoritmos.', 'Periféricos.', 3, 'Fácil', 'algoritimos'),
(76, 'O que o \"Início\" e o \"Fim\" demarcam em um algoritmo?', 'As partes mais importantes.', 'O ciclo de vida do algoritmo.', 'O começo e o término da execução.', 'Apenas comentários.', 3, 'Fácil', 'algoritimos'),
(77, 'O que um algoritmo bem definido pode fazer para um programa?', 'Aumentar seu tamanho.', 'Otimizar o desempenho e evitar erros.', 'Diminuir sua legibilidade.', 'Torná-lo mais complexo.', 2, 'Fácil', 'algoritimos'),
(78, 'Qual a principal diferença entre um algoritmo e uma linguagem de programação?', 'Um algoritmo é abstrato, a linguagem é concreta para implementação.', 'Um algoritmo é escrito em código, a linguagem não.', 'Não há diferença.', 'Uma linguagem de programação é um tipo de algoritmo.', 1, 'Fácil', 'algoritimos'),
(79, 'Por que é importante que um algoritmo tenha um número \"finito\" de passos?', 'Para que ele possa ser executado eternamente.', 'Para garantir que ele termine em um tempo razoável.', 'Para que ele seja mais complexo.', 'Para que ele nunca produza um resultado.', 2, 'Fácil', 'algoritimos'),
(80, 'O que um algoritmo gera após processar as entradas?', 'Mais entradas.', 'Saídas (resultados).', 'Erros obrigatórios.', 'O código-fonte.', 2, 'Fácil', 'algoritimos'),
(81, 'Qual a característica que torna um algoritmo previsível em seus resultados?', 'Ser muito longo.', 'Ser ambíguo.', 'Ter definição clara.', 'Ser ineficiente.', 3, 'Fácil', 'algoritimos'),
(82, 'No cotidiano, a ação de \"trocar uma lâmpada\" pode ser vista como um algoritmo. Qual seria a primeira etapa?', 'Ligar o interruptor.', 'Pegar uma escada.', 'Desrosquear a lâmpada queimada.', 'Comprar uma lâmpada nova.', 2, 'Fácil', 'algoritimos'),
(83, 'O que o pseudocódigo facilita para o programador?', 'Apenas a depuração de erros.', 'A comunicação da lógica do algoritmo.', 'A escrita de programas muito longos.', 'A ignorância de como o algoritmo funciona.', 2, 'Fácil', 'algoritimos'),
(84, 'Qual a importância de um algoritmo reduzir o \"consumo de recursos\"?', 'Ele torna o software mais lento.', 'Ele otimiza o uso de memória e processamento.', 'Ele aumenta a necessidade de hardware.', 'Ele dificulta a execução em diferentes máquinas.', 2, 'Fácil', 'algoritimos'),
(85, 'Um algoritmo é uma \"receita de instruções\". Qual é a meta dessa receita?', 'Criar mais problemas.', 'Alcançar um resultado desejado.', 'Deixar a tarefa pela metade.', 'Ignorar as etapas.', 2, 'Fácil', 'algoritimos'),
(86, 'O que significa que um algoritmo tem \"entradas\"?', 'Ele só pode receber dados de um tipo específico.', 'Ele precisa de dados para iniciar o processamento.', 'Ele não interage com o usuário.', 'Ele produz dados para outros algoritmos.', 2, 'Fácil', 'algoritimos'),
(87, 'A lógica de um algoritmo é fundamental para:', 'Apenas a criação de jogos.', 'Qualquer tipo de resolução de problemas.', 'Somente cálculos matemáticos.', 'A organização de arquivos no computador.', 2, 'Fácil', 'algoritimos'),
(88, 'Qual o papel da \"eficiência\" para um algoritmo em sistemas reais?', 'Aumentar o tempo de resposta.', 'Reduzir o desempenho.', 'Garantir a rapidez e o uso otimizado de recursos.', 'Tornar o sistema mais complexo.', 3, 'Fácil', 'algoritimos'),
(89, 'O que as \"saídas\" de um algoritmo indicam?', 'Os dados que ele recebeu.', 'O que ele produziu como resultado.', 'As instruções que ele executou.', 'Os erros de sintaxe.', 2, 'Fácil', 'algoritimos'),
(90, 'Por que o conceito de algoritmo é aplicável \"no dia a dia\"?', 'Porque só podemos seguir algoritmos em computadores.', 'Porque muitas tarefas cotidianas seguem sequências lógicas de passos.', 'Porque as pessoas agem de forma aleatória.', 'Porque os algoritmos são invisíveis.', 2, 'Fácil', 'algoritimos'),
(91, 'O que um algoritmo bem planejado ajuda a evitar durante a execução de um programa?', 'Aumento de velocidade.', 'Bugs e falhas.', 'Clareza no código.', 'Eficiência.', 2, 'Fácil', 'algoritimos'),
(92, 'Qual a principal diferença entre um algoritmo e um fluxograma?', 'Um algoritmo é uma descrição textual, um fluxograma é uma representação gráfica.', 'Um algoritmo é gráfico, um fluxograma é textual.', 'Não há diferença.', 'Um fluxograma é uma parte do algoritmo.', 1, 'Fácil', 'algoritimos'),
(93, 'Se um algoritmo é \"finito\", ele deve ser capaz de ser executado dentro de:', 'Um tempo ilimitado.', 'Um tempo limitado.', 'Um espaço ilimitado.', 'Um espaço de memória enorme.', 2, 'Fácil', 'Algoritmos'),
(94, 'O que o termo \"passos bem definidos\" em um algoritmo garante?', 'Que os passos são opcionais.', 'Que não há ambiguidade na execução de cada instrução.', 'Que o algoritmo é muito longo.', 'Que ele precisa de muita energia.', 2, 'Fácil', 'algoritimos'),
(95, 'Qual é a habilidade essencial para qualquer programador mencionada no texto?', 'Aprender muitos idiomas.', 'Entender e praticar a construção de algoritmos.', 'Ser bom em matemática avançada.', 'Apenas copiar códigos prontos.', 2, 'Fácil', 'algoritimos'),
(96, 'O que o pseudocódigo serve como?', 'Um programa executável.', 'Um esboço para a codificação em linguagem real.', 'Um tipo de hardware.', 'Um sistema operacional.', 2, 'Fácil', 'algoritimos'),
(97, 'No algoritmo para preparar um café, \"Esperar o café ser filtrado\" é um exemplo de:', 'Entrada.', 'Saída.', 'Processamento ou ação.', 'Início do algoritmo.', 3, 'Fácil', 'algoritimos'),
(98, 'Qual a importância de algoritmos para o \"desenvolvimento de sistemas eficientes\"?', 'Eles tornam os sistemas mais lentos.', 'Eles garantem que os sistemas funcionem bem e usem poucos recursos.', 'Eles aumentam a complexidade dos sistemas.', 'Eles tornam os sistemas instáveis.', 2, 'Fácil', 'algoritimos'),
(99, 'O que é uma \"tarefa específica\" em relação a um algoritmo?', 'Algo que o algoritmo não pode fazer.', 'Um problema amplo e genérico.', 'Uma ação ou conjunto de ações com um objetivo claro.', 'Um erro de execução.', 3, 'Fácil', 'algoritimos'),
(100, 'Se um algoritmo não tiver \"entradas\", ele será:', 'Mais eficiente.', 'Impossível de ser executado.', 'Menos útil, pois não pode processar dados externos.', 'Sempre correto.', 3, 'Fácil', 'algoritimos'),
(101, 'A frase \"reduzir o consumo de recursos\" significa que um algoritmo:', 'Usa mais energia.', 'Consome menos memória e processamento.', 'É mais caro de desenvolver.', 'É menos seguro.', 2, 'Fácil', 'algoritimos'),
(102, 'Qual a principal finalidade da \"sequência finita de passos\" em um algoritmo?', 'Para que ele nunca termine.', 'Para garantir que ele chegue a um fim e produza um resultado.', 'Para que ele seja difícil de entender.', 'Para que ele seja executado infinitamente.', 2, 'Fácil', 'algoritimos'),
(103, 'A \"lógica por trás dos algoritmos\" é crucial para:', 'Apenas decorar linguagens de programação.', 'Desenvolver habilidades de resolução de problemas.', 'Evitar o uso de computadores.', 'Apenas criar interfaces de usuário.', 2, 'Fácil', 'algoritimos'),
(104, 'O que a \"definição clara\" de um algoritmo evita?', 'Resultados consistentes.', 'Ambiguidade e incerteza na execução.', 'Rapidez na execução.', 'Eficiência no uso de recursos.', 2, 'Fácil', 'algoritimos'),
(105, 'Um algoritmo é a \"base de qualquer software ou aplicação\". O que isso implica?', 'Que software e aplicação são a mesma coisa que algoritmo.', 'Que todo software é construído a partir de algoritmos.', 'Que algoritmos são apenas para sistemas operacionais.', 'Que algoritmos são um acessório do software.', 2, 'Fácil', 'algoritimos'),
(106, 'No exemplo do mundo real de fazer café, o que \"Servir o café\" representa?', 'Uma entrada.', 'Uma saída (o produto final).', 'Uma etapa de processamento.', 'O início do algoritmo.', 2, 'Fácil', 'algoritimos'),
(107, 'Por que o pseudocódigo é útil para iniciantes em programação?', 'Porque ele é uma linguagem de programação complexa.', 'Porque ele permite focar na lógica antes da sintaxe complexa.', 'Porque ele exige um compilador especial.', 'Porque ele é usado apenas em projetos avançados.', 2, 'Fácil', 'algoritimos'),
(108, 'O que a \"eficiência\" em um algoritmo proporciona?', 'Maior consumo de energia.', 'Soluções mais lentas.', 'Melhor aproveitamento dos recursos computacionais.', 'Maior complexidade na escrita.', 3, 'Fácil', 'algoritimos'),
(109, 'Um algoritmo é uma \"receita de instruções\" porque:', 'Ele é apenas para culinária.', 'Ele fornece um conjunto de passos detalhados para uma tarefa.', 'Ele é secreto e não pode ser compartilhado.', 'Ele é difícil de decifrar.', 2, 'Fácil', 'algoritimos'),
(110, 'Qual das seguintes é uma característica obrigatória de um algoritmo?', 'Ser executado em um celular.', 'Ter um número finito de passos.', 'Ser escrito em Python.', 'Ser usado apenas por programadores.', 2, 'Fácil', 'algoritimos'),
(111, 'O que as \"saídas\" de um algoritmo permitem?', 'Que ele receba mais dados.', 'Que ele apresente os resultados de seu trabalho.', 'Que ele continue indefinidamente.', 'Que ele ignore o problema.', 2, 'Fácil', 'algoritimos'),
(112, 'O que é a \"resolução de um problema\" para um algoritmo?', 'Um desafio que ele não pode superar.', 'O objetivo final de sua execução.', 'Uma entrada de dados.', 'Uma característica desnecessária.', 2, 'Fácil', 'algoritimos'),
(113, 'Por que é importante que os algoritmos sejam \"confiáveis\"?', 'Para que eles falhem frequentemente.', 'Para que produzam resultados corretos e consistentes.', 'Para que sejam caros.', 'Para que sejam imprevisíveis.', 2, 'Fácil', 'algoritimos'),
(114, 'O que o texto afirma que a construção de algoritmos é para o desenvolvimento de sistemas?', 'Desnecessária.', 'Fundamental e crucial.', 'Um complemento opcional.', 'Apenas para sistemas pequenos.', 2, 'Fácil', 'algoritimos'),
(115, 'Qual é o termo para a representação simplificada de algoritmos, sem sintaxe exata de linguagem?', 'Código de máquina.', 'Linguagem de alto nível.', 'Pseudocódigo.', 'Assembly.', 3, 'Fácil', 'algoritimos'),
(116, 'Se um algoritmo não gera \"saídas\", o que ele não pode fazer?', 'Receber entradas.', 'Processar informações.', 'Apresentar um resultado ao usuário.', 'Ter um início.', 3, 'Fácil', 'algoritimos'),
(117, 'A lógica por trás dos algoritmos ajuda a resolver problemas de maneira \"eficiente\", o que significa:', 'De forma lenta e demorada.', 'De forma rápida e com o mínimo de recursos.', 'De forma complexa e confusa.', 'De forma imprevisível.', 2, 'Fácil', 'algoritimos'),
(118, 'O que é a \"sequência\" em um algoritmo?', 'A ordem dos passos.', 'A quantidade de dados.', 'A complexidade do problema.', 'A linguagem de programação.', 1, 'Fácil', 'algoritimos'),
(119, 'O que significa que um algoritmo deve ter \"passos bem definidos\"?', 'Que eles podem ser interpretados de várias maneiras.', 'Que cada instrução é clara e sem ambiguidade.', 'Que os passos são opcionais.', 'Que eles são apenas para especialistas.', 2, 'Fácil', 'algoritimos'),
(120, 'Para que serve a \"conclusão\" do texto sobre algoritmos?', 'Para introduzir um novo tema.', 'Para resumir a importância e aplicabilidade dos algoritmos.', 'Para complicar o assunto.', 'Para dar exemplos práticos.', 2, 'Fácil', 'algoritimos'),
(121, 'Qual notação é utilizada para descrever a complexidade assintótica de tempo e espaço de um algoritmo?', 'Notação Lambda (λ-notation).', 'Notação Big O (O-notation).', 'Notação Omega (Ω-notation).', 'Notação Theta (Θ-notation).', 2, 'Difícil', 'algoritmos'),
(122, 'Um algoritmo de ordenação tem complexidade de tempo O(n log n). Qual das seguintes opções representa um algoritmo com essa característica?', 'Selection Sort.', 'Insertion Sort.', 'Merge Sort.', 'Bubble Sort.', 3, 'Difícil', 'algoritimos'),
(123, 'Qual é a principal desvantagem do algoritmo Bubble Sort em comparação com algoritmos de ordenação mais avançados para grandes conjuntos de dados?', 'Requer memória auxiliar excessiva.', 'Possui complexidade de tempo quadrática (O(n²)) no pior caso.', 'É instável.', 'Não é um algoritmo de comparação.', 2, 'Difícil', 'algoritimos'),
(124, 'Em um grafo, qual algoritmo é mais adequado para encontrar o caminho mais curto entre um único vértice de origem e todos os outros vértices, onde as arestas possuem pesos não-negativos?', 'Floyd-Warshall.', 'Bellman-Ford.', 'Kruskal.', 'Dijkstra.', 4, 'Difícil', 'algoritimos'),
(125, 'O que caracteriza um algoritmo de \"Programação Dinâmica\"?', 'Resolve o problema dividindo-o em subproblemas independentes e combinando os resultados.', 'Toma a melhor escolha local na esperança de encontrar uma solução global ótima.', 'Armazena os resultados de subproblemas para evitar recálculos e resolver problemas sobrepostos.', 'Envolve tentativa e erro sistemáticos para encontrar uma solução.', 3, 'Difícil', 'algoritimos'),
(126, 'Qual a complexidade de tempo no pior caso para buscar um elemento em uma Árvore Binária de Busca (BST) não balanceada com n nós?', 'O(log n).', 'O(1).', 'O(n).', 'O(n log n).', 3, 'Difícil', 'algoritimos'),
(127, 'Um problema é NP-completo. O que isso implica sobre a existência de um algoritmo que o resolva eficientemente (em tempo polinomial)?', 'Tal algoritmo certamente existe e é fácil de encontrar.', 'Tal algoritmo não existe.', 'Não se sabe se tal algoritmo existe, mas a maioria acredita que não.', 'Um algoritmo de tempo exponencial é sempre a melhor opção.', 3, 'Difícil', 'algoritimos\r\n'),
(128, 'Em qual cenário o algoritmo de busca em largura (BFS) é mais adequado que a busca em profundidade (DFS) para encontrar o caminho mais curto em um grafo não ponderado?', 'Quando o grafo é muito denso.', 'Quando o caminho mais curto é garantido como o mais profundo.', 'Quando se busca o caminho com o menor número de arestas.', 'Quando a conectividade é mais importante que a distância.', 3, 'Difícil', 'algoritimos'),
(129, 'Qual o principal desafio ao projetar algoritmos paralelos?', 'Aumentar a complexidade do código sequencial.', 'Gerenciar a comunicação e sincronização entre os processos.', 'Reduzir a quantidade de hardware necessário.', 'Eliminar a necessidade de compilação.', 2, 'Difícil', 'algoritimos'),
(130, 'O algoritmo Quick Sort tem uma complexidade de tempo no pior caso de O(n²). Quando isso ocorre?', 'Quando os elementos estão aleatoriamente ordenados.', 'Quando a escolha do pivô sempre resulta em partições desbalanceadas.', 'Quando o número de elementos é pequeno.', 'Quando o algoritmo é implementado recursivamente.', 2, 'Difícil', 'algoritimos'),
(131, 'Qual estrutura de dados é fundamental para a implementação eficiente de algoritmos de busca de caminho mínimo como Dijkstra?', 'Pilha (Stack).', 'Fila (Queue).', 'Pilha de Prioridade (Priority Queue).', 'Lista Encadeada (Linked List).', 3, 'Difícil', 'algoritimos'),
(132, 'O que significa um algoritmo ser \"estável\" no contexto de ordenação?', 'Ele sempre termina em tempo polinomial.', 'Ele preserva a ordem relativa de elementos com chaves iguais.', 'Ele não usa memória auxiliar.', 'Ele é executado rapidamente.', 2, 'Difícil', 'algoritimos'),
(133, 'Qual dos seguintes problemas pode ser resolvido eficientemente usando um algoritmo guloso (greedy algorithm)?', 'O problema do Caixeiro Viajante.', 'O problema da Mochila (0/1 Knapsack Problem).', 'O problema da Árvore Geradora Mínima (Minimum Spanning Tree).', 'O problema da Subsequência Comum Mais Longa.', 3, 'Difícil', 'algoritimos'),
(134, 'Em que situação a programação dinâmica é mais eficiente do que a recursão pura?', 'Quando o problema não pode ser dividido em subproblemas.', 'Quando os subproblemas são independentes e não se sobrepõem.', 'Quando há subproblemas sobrepostos e uma ótima subestrutura.', 'Quando a recursão é muito superficial.', 3, 'Difícil', 'algoritimos'),
(135, 'Para que serve a \"Notação Big Omega (Ω-notation)\" na análise de algoritmos?', 'Para descrever o limite superior apertado do tempo de execução.', 'Para descrever o limite inferior do tempo de execução (melhor caso).', 'Para descrever a complexidade média do tempo de execução.', 'Para descrever a complexidade de espaço.', 2, 'Difícil', 'algoritimos'),
(136, 'Qual é o principal critério para a escolha de um algoritmo de hash?', 'Seu consumo de memória.', 'A facilidade de implementação da função de hash.', 'A capacidade de minimizar colisões e distribuir uniformemente as chaves.', 'A velocidade de criptografia.', 3, 'Difícil', 'algoritimos'),
(137, 'O que é \"poda de alfa-beta\" em algoritmos de jogos (Game Theory)?', 'Um método de balanceamento de árvores.', 'Uma técnica de otimização para reduzir o número de nós avaliados em árvores de jogo (Minimax).', 'Um algoritmo para gerar números aleatórios.', 'Um tipo de estrutura de dados para grafos.', 2, 'Difícil', 'algoritimos'),
(138, 'Qual a principal diferença entre BFS e DFS em termos de estrutura de dados auxiliar utilizada?', 'BFS usa fila, DFS usa pilha.', 'BFS usa pilha, DFS usa fila.', 'Ambos usam filas.', 'Ambos usam pilhas.', 1, 'Difícil', 'algoritimos'),
(139, 'No contexto de criptografia, qual o papel dos algoritmos de chave pública (assimétricos)?', 'Gerar hashes de mensagens.', 'Garantir que a mesma chave seja usada para criptografar e descriptografar.', 'Permitir que diferentes chaves (pública e privada) sejam usadas para criptografia e descriptografia.', 'Ordenar grandes volumes de dados.', 3, 'Difícil', 'algoritimos'),
(140, 'Qual o problema intrínseco aos algoritmos de força bruta para problemas complexos?', 'A incapacidade de encontrar uma solução.', 'O alto consumo de memória.', 'O tempo de execução exponencial, inviável para grandes entradas.', 'A necessidade de hardware especializado.', 3, 'Difícil', 'algoritimos'),
(141, 'Quando um algoritmo guloso falha em encontrar a solução ótima global para um problema de otimização?', 'Quando a escolha local ótima sempre leva à solução global ótima.', 'Quando o problema exibe uma ótima subestrutura.', 'Quando a natureza do problema não permite que a escolha local ótima seja parte de uma solução global ótima.', 'Quando é um problema de árvore geradora mínima.', 3, 'Difícil', 'algoritimos'),
(142, 'Qual é a complexidade de tempo no pior caso para inserção ou remoção em uma Árvore AVL (autobalanceada) com n nós?', 'O(n).', 'O(log n).', 'O(n log n).', 'O(1).', 2, 'Difícil', 'algoritimos'),
(143, 'O que um algoritmo de \"Divisão e Conquista\" tipicamente envolve?', 'Solucionar um problema resolvendo subproblemas de tamanho crescente.', 'Dividir o problema em subproblemas, resolver recursivamente e combinar os resultados.', 'Tomar decisões localmente ótimas.', 'Converter o problema em um problema de fluxo máximo.', 2, 'Difícil', 'algoritimos'),
(144, 'Qual o principal fator que distingue um problema P de um problema NP-completo?', 'Se ele pode ser resolvido em tempo constante.', 'Se ele pode ser resolvido em tempo polinomial por um algoritmo determinístico.', 'Se ele não pode ser verificado em tempo polinomial.', 'Se ele pode ser resolvido por força bruta.', 2, 'Difícil', 'algoritimos'),
(145, 'Em algoritmos de grafos, o que o \"grau de um vértice\" representa?', 'Sua cor.', 'O número de arestas incidentes a ele.', 'Sua distância do vértice de origem.', 'Seu peso.', 2, 'Difícil', 'algoritimos'),
(146, 'Qual o conceito de \"memoização\" em programação dinâmica?', 'Armazenar todas as entradas possíveis.', 'Armazenar os resultados de chamadas de função custosas e retornar o resultado armazenado quando as mesmas entradas ocorrem novamente.', 'Otimizar o uso de memória RAM.', 'Usar um algoritmo guloso.', 2, 'Difícil', 'algoritimos'),
(147, 'Por que o algoritmo de ordenação Counting Sort é considerado um algoritmo não-comparativo?', 'Porque ele usa comparações implícitas.', 'Porque ele ordena os elementos contando as ocorrências de cada valor.', 'Porque ele é baseado em trocas de elementos.', 'Porque ele é mais lento que os comparativos.', 2, 'Difícil', 'algoritimos'),
(148, 'Qual algoritmo é mais adequado para encontrar todos os pares de caminhos mais curtos em um grafo ponderado?', 'Dijkstra (repetidamente).', 'Bellman-Ford.', 'Floyd-Warshall.', 'Prim.', 3, 'Difícil', 'algoritimos'),
(149, 'O que a \"função de hash\" busca realizar?', 'Criptografar dados simetricamente.', 'Mapear dados de tamanho arbitrário para um valor de tamanho fixo.', 'Ordenar dados em ordem crescente.', 'Descomprimir arquivos.', 2, 'Difícil', 'algoritimos'),
(150, 'Qual o principal problema da recursão profunda sem otimização de memória em alguns algoritmos?', 'Maior velocidade de execução.', 'Overflow de pilha (Stack Overflow).', 'Menor consumo de energia.', 'Simplicidade na implementação.', 2, 'Difícil', 'algoritimos'),
(151, 'O que é um \"algoritmo determinístico\"?', 'Um algoritmo que usa números aleatórios.', 'Um algoritmo que sempre produz o mesmo resultado para a mesma entrada e segue um caminho único.', 'Um algoritmo que pode ter múltiplos resultados para a mesma entrada.', 'Um algoritmo que nunca termina.', 2, 'Difícil', 'algoritimos'),
(152, 'Qual o propósito da \"heurística\" em algoritmos de busca complexos?', 'Garantir a solução ótima em todos os casos.', 'Acelerar a busca, sacrificando a otimalidade em troca de rapidez.', 'Apenas para validar entradas.', 'Para tornar o algoritmo mais difícil de entender.', 2, 'Difícil', 'algoritimos'),
(153, 'No problema da mochila fracionária (Fractional Knapsack), qual paradigma de projeto de algoritmo garante a solução ótima?', 'Programação Dinâmica.', 'Divisão e Conquista.', 'Algoritmo Guloso.', 'Backtracking.', 3, 'Difícil', 'algoritimos'),
(154, 'O que a \"Notação Big Theta (Θ-notation)\" descreve na análise de algoritmos?', 'O limite superior (pior caso).', 'O limite inferior (melhor caso).', 'O limite superior e inferior apertados (comportamento médio e pior/melhor).', 'Apenas a complexidade de espaço.', 3, 'Difícimos', 'algoritimos'),
(155, 'Qual é a desvantagem do algoritmo Bellman-Ford em comparação com Dijkstra para grafos com arestas não-negativas?', 'Não pode lidar com arestas negativas.', 'Sua complexidade de tempo é geralmente maior.', 'Ele não encontra o caminho mais curto.', 'Ele não detecta ciclos negativos.', 2, 'Difícil', 'algoritimos'),
(156, 'Um algoritmo de busca binária é eficiente para qual tipo de estrutura de dados?', 'Lista encadeada não ordenada.', 'Array ordenado.', 'Pilha.', 'Fila.', 2, 'Difícil', 'algoritimos'),
(157, 'O que o \"Princípio da Ótima Subestrutura\" implica para um problema que pode ser resolvido com Programação Dinâmica?', 'A solução ótima para o problema contém soluções ótimas para seus subproblemas.', 'A solução ótima é encontrada tomando a melhor escolha local.', 'O problema não pode ser dividido em partes menores.', 'Os subproblemas são independentes.', 1, 'Difícil', 'algoritimos'),
(158, 'Qual algoritmo é comumente usado para encontrar a Árvore Geradora Mínima (MST) de um grafo?', 'Prim ou Kruskal.', 'Dijkstra ou Bellman-Ford.', 'BFS ou DFS.', 'Floyd-Warshall.', 1, 'Difícil', 'algoritimos'),
(159, 'O que são \"colisões\" em tabelas hash e qual a técnica para resolvê-las?', 'Quando a tabela está vazia; rehashing.', 'Quando duas chaves diferentes são mapeadas para o mesmo índice; endereçamento aberto ou encadeamento.', 'Quando a tabela está cheia; compressão.', 'Quando a chave não é um número; normalização.', 2, 'Difícil', 'algoritimos'),
(160, 'Qual a principal diferença entre um problema P e um problema NP?', 'Problemas P são mais difíceis que problemas NP.', 'Problemas NP não podem ser verificados em tempo polinomial.', 'Problemas P podem ser resolvidos em tempo polinomial, problemas NP podem ser verificados em tempo polinomial.', 'Problemas P são apenas teóricos.', 3, 'Difícil', 'algoritimos'),
(161, 'Qual é o conceito de \"backtracking\" como paradigma de projeto de algoritmo?', 'Dividir o problema em subproblemas independentes.', 'Construir soluções incrementalmente e, se uma parcial levar a um impasse, desfazer (backtrack) e tentar outra opção.', 'Tomar a melhor escolha local em cada etapa.', 'Armazenar resultados de subproblemas para reutilização.', 2, 'Difícil', 'algoritimos'),
(162, 'Um algoritmo é \"instável\" no contexto de ordenação. O que isso significa?', 'Ele pode falhar durante a execução.', 'Ele não mantém a ordem relativa de elementos com chaves iguais.', 'Ele é muito lento.', 'Ele usa muita memória.', 2, 'Difícil', 'Algoritmos'),
(163, 'Qual a complexidade de tempo no pior caso para o algoritmo de ordenação Heap Sort?', 'O(n).', 'O(n log n).', 'O(n²).', 'O(log n).', 2, 'Difícil', 'Algoritmos'),
(164, 'Qual a importância de \"balancear\" árvores de busca, como nas árvores AVL ou Red-Black?', 'Para torná-las mais fáceis de visualizar.', 'Para garantir que as operações de busca, inserção e remoção permaneçam em O(log n).', 'Para que elas ocupem menos espaço em disco.', 'Para que elas aceitem apenas números pares.', 2, 'Difícil', 'algoritimos'),
(165, 'O que o \"Princípio da Optimalidade de Bellman\" estabelece na Programação Dinâmica?', 'Que a solução ótima de um problema depende de escolhas futuras.', 'Que qualquer subcaminho de um caminho ótimo é, por si só, um caminho ótimo.', 'Que a escolha local ótima leva à solução global ótima.', 'Que a memória é ilimitada.', 2, 'Difícil', 'algoritimos'),
(166, 'Em um grafo, o que representa um \"ciclo negativo\" e qual algoritmo pode detectá-lo?', 'Um caminho que começa e termina no mesmo vértice; Dijkstra.', 'Um ciclo onde a soma dos pesos das arestas é negativa; Bellman-Ford.', 'Um ciclo sem arestas; BFS.', 'Um ciclo de comprimento ímpar; DFS.', 2, 'Difícil', 'algoritimos'),
(167, 'Qual o trade-off principal entre um algoritmo de força bruta e um algoritmo heurístico?', 'Força bruta é mais rápida; heurístico é mais lento.', 'Força bruta garante a solução ótima, mas é lento; heurístico é mais rápido, mas pode não ser ótimo.', 'Força bruta usa menos memória; heurístico usa mais.', 'Força bruta é mais fácil de implementar; heurístico é mais difícil.', 2, 'Difícil', 'algoritimos'),
(168, 'O que é um \"algoritmo probabilístico\"?', 'Um algoritmo que sempre retorna a mesma saída para a mesma entrada.', 'Um algoritmo que faz escolhas aleatórias durante sua execução para encontrar uma solução, com alta probabilidade.', 'Um algoritmo que não termina.', 'Um algoritmo que só funciona com números primos.', 2, 'Difícil', 'algoritimos'),
(169, 'Qual o significado de \"overfitting\" em algoritmos de Machine Learning?', 'Quando o modelo não aprende nada.', 'Quando o modelo aprende muito bem os dados de treinamento, mas falha em generalizar para dados novos.', 'Quando o modelo é muito simples.', 'Quando o modelo é muito rápido.', 2, 'Difícil', 'algoritimos'),
(170, 'Em qual cenário um \"caminhamento em profundidade (DFS)\" é preferível a um \"caminhamento em largura (BFS)\"?', 'Para encontrar o caminho mais curto em grafos não ponderados.', 'Para detectar ciclos em grafos.', 'Para encontrar o caminho com o menor número de arestas.', 'Para encontrar um nó em um nível mais próximo da raiz.', 2, 'Difícil', 'algoritimos'),
(171, 'Qual a principal técnica para resolver o problema do caixeiro viajante (TSP) na prática, devido à sua complexidade NP-completa?', 'Algoritmos gulosos.', 'Algoritmos exatos com poda (branch and bound) ou heurísticas e meta-heurísticas.', 'Programação dinâmica sem memoização.', 'Divisão e conquista simples.', 2, 'Difícil', 'algoritimos'),
(172, 'O que é um \"algoritmo de criptografia de chave simétrica\"?', 'Usa chaves diferentes para criptografar e descriptografar.', 'Usa a mesma chave para criptografar e descriptografar.', 'Não usa chaves.', 'É usado apenas para hash.', 2, 'Difícil', 'algoritimos'),
(173, 'Para que serve a \"análise amortizada\" da complexidade de algoritmos?', 'Para analisar o pior caso de uma única operação.', 'Para analisar o custo médio de uma sequência de operações, onde operações raras e caras são compensadas por muitas operações baratas.', 'Para analisar o melhor caso de um algoritmo.', 'Para ignorar o consumo de memória.', 2, 'Difícil', 'algoritimos'),
(174, 'O que caracteriza um algoritmo de \"stream processing\"?', 'Processa dados em lotes grandes.', 'Processa dados contínuos à medida que chegam, sem armazenar tudo.', 'Processa dados apenas offline.', 'Processa dados criptografados.', 2, 'Difícil', 'algoritimos'),
(175, 'Qual o principal desafio ao aplicar algoritmos de Machine Learning em dados não estruturados?', 'A falta de capacidade de processamento.', 'A dificuldade de extrair features relevantes e convertê-las em formato utilizável.', 'A simplicidade dos algoritmos.', 'A pouca quantidade de dados disponíveis.', 2, 'Difícil', 'algoritimos'),
(176, 'O que é \"balanceamento de carga\" em algoritmos de sistemas distribuídos?', 'Distribuir a carga de trabalho uniformemente entre os recursos para otimizar o desempenho.', 'Apenas aumentar a capacidade de um único servidor.', 'Reduzir a segurança dos dados.', 'Desativar servidores ociosos.', 1, 'Difícil', 'algoritimos'),
(177, 'Qual o impacto de um algoritmo com alta complexidade polinomial (e.g., O(n^5)) para grandes entradas?', 'Ele será sempre mais rápido que um O(n log n).', 'Ele se tornará impraticável para grandes entradas devido ao tempo de execução excessivo.', 'Ele usará menos memória.', 'Ele é mais fácil de implementar.', 2, 'Difícil', 'algoritimos'),
(178, 'O que é \"tolerância a falhas\" em algoritmos de sistemas distribuídos?', 'A capacidade do sistema de continuar funcionando mesmo com falhas em alguns componentes.', 'A incapacidade de detectar erros.', 'A dependência de um único ponto de falha.', 'A diminuição do desempenho após uma falha.', 1, 'Difícil', 'algoritimos'),
(179, 'Em algoritmos de processamento de linguagem natural (PLN), o que é \"tokenização\"?', 'O processo de traduzir o texto para outro idioma.', 'O processo de dividir o texto em unidades menores (palavras, frases).', 'O processo de analisar a gramática de uma frase.', 'O processo de gerar texto aleatório.', 2, 'Difícil', 'algoritimos'),
(180, 'Qual o principal benefício de um algoritmo de ordenação in-place?', 'Ele é sempre mais rápido.', 'Ele não requer memória auxiliar significativa (além da necessária para a entrada).', 'Ele é mais complexo de implementar.', 'Ele pode ordenar apenas números inteiros.', 2, 'Difícil', 'algoritimos'),
(181, 'Qual o conceito de \"concorrência\" em algoritmos e sistemas?', 'Executar várias tarefas sequencialmente.', 'Executar várias tarefas em sobreposição de tempo, potencialmente em paralelo, para melhorar o desempenho ou responsividade.', 'Executar apenas uma tarefa por vez.', 'Sincronizar dados entre diferentes bases.', 2, 'Difícil', 'algoritimos'),
(182, 'No contexto de algoritmos de Machine Learning, o que é \"feature engineering\"?', 'O processo de escolher o melhor algoritmo para um problema.', 'O processo de transformar dados brutos em características (features) que os modelos podem aprender.', 'O processo de treinar um modelo.', 'O processo de avaliar o desempenho do modelo.', 2, 'Difícil', 'algoritimos'),
(183, 'O que um \"problema de otimização\" busca em termos de algoritmo?', 'Encontrar qualquer solução válida.', 'Encontrar a melhor solução possível (máximo ou mínimo) para um problema.', 'Apenas classificar dados.', 'Detectar erros em dados.', 2, 'Difícil', 'algoritimos'),
(184, 'Qual a principal desvantagem da busca em profundidade (DFS) em grafos com muitos caminhos longos?', 'Pode não encontrar o caminho mais curto.', 'Pode ficar \"presa\" em um caminho muito longo antes de explorar outros.', 'É ineficiente para detectar ciclos.', 'Não usa memória.', 2, 'Difícil', 'algoritimos'),
(185, 'O que significa um algoritmo ser \"generativo\" em Machine Learning?', 'Ele aprende a classificar dados.', 'Ele aprende a gerar novos dados semelhantes aos dados de treinamento.', 'Ele aprende a prever valores numéricos.', 'Ele apenas agrupa dados.', 2, 'Difícil', 'algoritimos'),
(186, 'Qual a principal aplicação do algoritmo de Kruskal?', 'Encontrar o caminho mais curto entre dois vértices.', 'Encontrar a Árvore Geradora Mínima (MST).', 'Detectar ciclos negativos em grafos.', 'Ordenar elementos em uma lista.', 2, 'Difícil', 'algoritimos'),
(187, 'Em algoritmos de visão computacional, o que é \"segmentação de imagem\"?', 'Mudar a cor da imagem.', 'Dividir uma imagem em múltiplas regiões ou objetos.', 'Aumentar a resolução da imagem.', 'Compactar a imagem.', 2, 'Difícil', 'algoritimos'),
(188, 'Qual a principal função de um algoritmo de \"escalonamento de processos\" em um sistema operacional?', 'Gerenciar a memória RAM.', 'Decidir qual processo será executado pela CPU e por quanto tempo.', 'Controlar os dispositivos de entrada e saída.', 'Formatar discos rígidos.', 2, 'Difícil', 'algoritimos');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(189, 'O que o \"Princípio da Localidade de Referência\" influencia no design de algoritmos e estruturas de dados?', 'A complexidade de tempo de Big O.', 'O desempenho da cache de memória.', 'A dificuldade de implementação.', 'A quantidade de entradas necessárias.', 2, 'Difícil', 'algoritimos'),
(190, 'Qual o principal benefício de usar algoritmos de \"hashing criptográfico\"?', 'Apenas organizar dados.', 'Garantir a integridade dos dados e autenticidade da mensagem (não reversível).', 'Criptografar dados de forma reversível.', 'Ordenar grandes bases de dados.', 2, 'Difícil', 'algoritimos'),
(191, 'O que é \"backtracking\" em algoritmos de busca?', 'Um método para ir sempre para frente na busca.', 'Uma técnica para explorar soluções parciais e \"voltar\" se não levarem a uma solução válida.', 'Um algoritmo de ordenação de dados.', 'Um tipo de algoritmo de compressão.', 2, 'Difícil', 'algoritimos'),
(192, 'Qual a diferença crucial entre a complexidade de tempo no pior caso e a complexidade de tempo média?', 'Pior caso é sempre O(n), média é O(1).', 'Pior caso garante um limite superior; média descreve o desempenho esperado em entradas típicas.', 'Não há diferença significativa.', 'Pior caso usa menos memória.', 2, 'Difícil', 'algoritimos'),
(193, 'Em algoritmos de Inteligência Artificial, o que representa um \"estado\" em um problema de busca?', 'Um passo no algoritmo.', 'Uma configuração específica do problema que o algoritmo pode alcançar.', 'Um tipo de dado de entrada.', 'Um erro de execução.', 2, 'Difícil', 'algoritimos'),
(194, 'O que é a \"paralelização\" de um algoritmo?', 'Torná-lo sequencial.', 'Dividir o algoritmo em partes que podem ser executadas simultaneamente em múltiplos processadores.', 'Reduzir o número de entradas.', 'Aumentar sua complexidade.', 2, 'Difícil', 'algoritimos'),
(195, 'Qual o principal objetivo de um algoritmo de \"compressão de dados\"?', 'Aumentar o tamanho do arquivo.', 'Reduzir o tamanho dos dados, mantendo a informação o máximo possível.', 'Criptografar os dados.', 'Tornar os dados mais complexos.', 2, 'Difícil', 'algoritimos'),
(196, 'O que um \"grafo direcionado acíclico (DAG)\" é importante em quais tipos de algoritmos?', 'Aqueles que requerem ciclos.', 'Aqueles que representam dependências ou fluxos de trabalho (ex: agendamento de tarefas).', 'Aqueles que não têm vértices.', 'Aqueles que sempre têm múltiplos caminhos.', 2, 'Difícil', 'algoritimos'),
(197, 'Qual o principal uso de algoritmos de \"reconhecimento de padrões\"?', 'Apenas organizar arquivos.', 'Identificar regularidades ou estruturas em dados.', 'Criptografar informações.', 'Criar novas linguagens de programação.', 2, 'Difícil', 'algoritimos'),
(198, 'No contexto de sistemas de recomendação, o que é \"filtragem colaborativa\"?', 'Recomendar itens baseados em características do item.', 'Recomendar itens baseados nas preferências de usuários com gostos semelhantes.', 'Recomendar itens aleatoriamente.', 'Recomendar itens que ninguém mais gostou.', 2, 'Difícil', 'algoritimos'),
(199, 'Qual o papel do \"gradiente descendente\" em algoritmos de Machine Learning (e.g., redes neurais)?', 'Para tornar o modelo mais lento.', 'Para ajustar os parâmetros do modelo minimizando uma função de custo.', 'Para gerar novos dados de treinamento.', 'Para aumentar a complexidade do modelo.', 2, 'Difícil', 'algoritimos'),
(200, 'O que significa um algoritmo ser \"online\" em vez de \"offline\"?', 'Online precisa de conexão à internet; offline não.', 'Online processa a entrada à medida que chega; offline precisa de toda a entrada antes de começar.', 'Online é mais lento; offline é mais rápido.', 'Online não usa memória.', 2, 'Difícil', 'algoritimos'),
(201, 'Qual é o principal uso de uma variável em um algoritmo?', 'Repetir um bloco de código', 'Armazenar um valor que pode ser usado e modificado', 'Deixar o código mais lento', 'Substituir funções', 2, 'facil', 'variaveis'),
(202, 'Quando é recomendado usar uma constante?', 'Quando o valor muda a cada execução', 'Quando o valor deve permanecer sempre o mesmo', 'Quando queremos ocultar um valor', 'Quando o valor é desconhecido', 2, 'facil', 'variaveis'),
(203, 'Em um jogo, a pontuação do jogador deve ser armazenada em:', 'Uma constante', 'Um laço de repetição', 'Uma variável', 'Um comentário', 3, 'facil', 'variaveis'),
(204, 'Em um sistema bancário, a taxa fixa de juros deve ser armazenada em:', 'Um laço for', 'Uma variável que muda sempre', 'Uma variável temporária', 'Uma constante', 4, 'facil', 'variaveis'),
(205, 'O que acontece com o valor de uma variável se atribuirmos um novo valor a ela?', 'O valor antigo é mantido', 'O valor antigo é descartado e substituído', 'Gera erro', 'Cria uma nova variável automaticamente', 2, 'facil', 'variaveis'),
(206, 'Qual é a vantagem de usar variáveis em um algoritmo?', 'Diminuir o tamanho do código', 'Tornar o código mais bonito', 'Permitir armazenar e manipular informações dinamicamente', 'Evitar a execução do programa', 3, 'facil', 'variaveis'),
(207, 'Em um programa que calcula a média de notas, o que podemos usar para armazenar cada nota?', 'Constante', 'Laço de repetição', 'Variável', 'Operador lógico', 3, 'facil', 'variaveis'),
(208, 'Em um programa, qual seria um bom exemplo de constante?', 'A idade do usuário', 'O nome do usuário', 'O valor de PI (3.1415)', 'O número de tentativas restantes', 3, 'facil', 'variaveis'),
(209, 'Se declararmos x = 5 e depois x = x + 3, qual será o novo valor de x?', '3', '5', '8', '15', 3, 'facil', 'variaveis'),
(210, 'O que significa \"atribuir um valor a uma variável\"?', 'Copiar o valor de outra variável', 'Escrever o nome da variável em maiúsculas', 'Definir qual valor ela vai armazenar', 'Remover o valor da variável', 3, 'facil', 'variaveis'),
(211, 'Qual é a função principal de uma constante em um algoritmo?', 'Controlar o fluxo de execução', 'Armazenar um valor que não deve ser alterado', 'Repetir um conjunto de instruções', 'Aumentar a velocidade do código', 2, 'facil', 'variaveis'),
(212, 'No desenvolvimento de um jogo, a quantidade máxima de vidas do jogador deve ser:', 'Uma variável', 'Uma constante', 'Um operador aritmético', 'Um laço de repetição', 2, 'facil', 'variaveis'),
(213, 'Se você quiser contar quantos cliques o usuário fez, o que você deve usar?', 'Constante', 'Função', 'Variável', 'Condição', 3, 'facil', 'variaveis'),
(214, 'Por que devemos evitar alterar o valor de uma constante?', 'Porque o programa fica mais lento', 'Porque não é permitido e gera erro', 'Porque ocupa muita memória', 'Porque o compilador não aceita constantes', 2, 'facil', 'variaveis'),
(215, 'Qual é o resultado esperado se você declarar pontuacao = 10 e depois pontuacao = pontuacao + 5?', '5', '10', '15', '50', 3, 'facil', 'variaveis'),
(216, 'Em um programa que converte temperatura, o que você deve usar para armazenar a temperatura de entrada?', 'Uma constante', 'Uma função', 'Uma variável', 'Um laço', 3, 'facil', 'variaveis'),
(217, 'Para que serve o conceito de \"variável\" na lógica de programação?', 'Para fazer loops', 'Para armazenar e manipular dados durante a execução', 'Para criar funções', 'Para escrever comentários', 2, 'facil', 'variaveis'),
(218, 'Quando criamos um sistema de cadastro de usuários, o campo \"nome do usuário\" deve ser:', 'Uma variável', 'Uma constante', 'Um laço', 'Um comentário', 1, 'facil', 'variaveis'),
(219, 'Quando usamos uma variável para controlar um laço de repetição, ela normalmente:', 'Fica com valor constante', 'É ignorada pelo programa', 'É incrementada ou modificada a cada repetição', 'Não tem valor inicial', 3, 'facil', 'variaveis'),
(220, 'Em um algoritmo de cálculo de desconto, o percentual de desconto fixo deve ser armazenado em:', 'Um laço', 'Uma variável que muda a cada compra', 'Uma constante', 'Um operador lógico', 3, 'facil', 'variaveis'),
(221, 'O que acontece se você tentar usar uma variável que não foi inicializada?', 'O programa exibe 0', 'O programa cria a variável automaticamente', 'Pode gerar um erro ou um valor indefinido', 'A variável recebe valor padrão', 3, 'facil', 'variaveis'),
(222, 'Para armazenar a quantidade de produtos em um carrinho de compras, você usaria:', 'Uma constante', 'Um comentário', 'Uma variável', 'Um operador lógico', 3, 'facil', 'variaveis'),
(223, 'Qual é o comportamento de uma variável dentro de um laço de repetição?', 'Permanece sempre com o mesmo valor', 'Não pode ser usada', 'Pode ter seu valor alterado a cada repetição', 'Não ocupa espaço de memória', 3, 'facil', 'variaveis'),
(224, 'Para representar a velocidade máxima permitida em um sistema de trânsito, você usaria:', 'Uma função', 'Um laço', 'Uma constante', 'Uma variável que muda sempre', 3, 'facil', 'variaveis'),
(225, 'Se você precisa armazenar o resultado de um cálculo temporário, o que deve usar?', 'Uma constante', 'Um laço', 'Uma variável', 'Um operador lógico', 3, 'facil', 'variaveis'),
(226, 'Em um algoritmo de contagem regressiva, a variável de controle:', 'Permanece constante', 'É incrementada', 'É decrementada', 'Não é usada', 3, 'facil', 'variaveis'),
(227, 'Para armazenar o nome do vencedor de um jogo, você deve usar:', 'Um número inteiro', 'Uma variável', 'Uma constante', 'Um operador relacional', 2, 'facil', 'variaveis'),
(228, 'O que acontece se você declarar const PI = 3.14 e tentar depois fazer PI = 3.14159?', 'O valor é atualizado', 'O valor vira nulo', 'Gera um erro', 'O valor vira uma string', 3, 'facil', 'variaveis'),
(229, 'Em um algoritmo simples de caixa eletrônico, o saldo da conta deve ser:', 'Uma constante', 'Uma variável', 'Um laço', 'Um comentário', 2, 'facil', 'variaveis'),
(230, 'Qual é o benefício de usar constantes em um código?', 'Tornar o código mais dinâmico', 'Garantir que certos valores não sejam modificados', 'Tornar o código mais lento', 'Evitar o uso de variáveis', 2, 'facil', 'variaveis'),
(231, 'Quando um programa precisa somar valores em um loop, a variável usada geralmente é:', 'Constante', 'Acumuladora', 'Boolean', 'Operador', 2, 'facil', 'variaveis'),
(232, 'Qual é o resultado de: total = 10; total = total * 2;?', '10', '12', '20', '5', 3, 'facil', 'variaveis'),
(233, 'Em um programa de relógio digital, a variável que armazena as horas deve:', 'Ser uma constante', 'Nunca mudar', 'Ser atualizada a cada segundo', 'Ser um comentário', 3, 'facil', 'variaveis'),
(234, 'Quando é uma boa ideia usar uma constante no seu código?', 'Para armazenar um valor que depende da entrada do usuário', 'Para armazenar valores que devem permanecer fixos', 'Para testar loops', 'Para armazenar a pontuação atual', 2, 'facil', 'variaveis'),
(235, 'Qual dos seguintes exemplos descreve melhor uma variável de controle?', 'Um valor que não muda', 'Um valor que controla a quantidade de repetições de um laço', 'Um valor fixo', 'Um valor que não é usado', 2, 'facil', 'variaveis'),
(236, 'Se você quiser contar quantas vezes uma função foi chamada, você deve usar:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço', 3, 'facil', 'variaveis'),
(237, 'Em um algoritmo de cadastro de livros, o título do livro deve ser armazenado em:', 'Um número inteiro', 'Uma constante', 'Uma variável do tipo texto', 'Um operador aritmético', 3, 'facil', 'variaveis'),
(238, 'O que significa \"incrementar uma variável\"?', 'Deletar o valor da variável', 'Dividir o valor atual', 'Diminuir o valor', 'Aumentar o valor', 4, 'facil', 'variaveis'),
(239, 'Em um sistema que calcula o preço final de um produto com imposto fixo, o percentual de imposto deve ser:', 'Uma variável que muda sempre', 'Uma constante', 'Um laço', 'Um operador lógico', 2, 'facil', 'variaveis'),
(240, 'Se você precisa somar o total de vendas em um dia, você usaria:', 'Uma variável acumuladora', 'Uma constante', 'Um comentário', 'Um laço sem controle', 1, 'facil', 'variaveis'),
(241, 'Em um sistema de votação, o número total de votos deve ser:', 'Uma constante', 'Um operador relacional', 'Uma variável', 'Um laço', 3, 'facil', 'variaveis'),
(242, 'Qual é a principal razão para declarar uma constante no código?', 'Evitar a repetição de código', 'Tornar o valor mais fácil de ser alterado', 'Proteger o valor de alterações', 'Melhorar a indentação', 3, 'facil', 'variaveis'),
(243, 'Para armazenar se um usuário está logado ou não, você usaria:', 'Um número inteiro', 'Uma string', 'Uma variável booleana', 'Uma constante', 3, 'facil', 'variaveis'),
(244, 'Qual é o comportamento esperado ao incrementar uma variável acumuladora dentro de um laço?', 'Ela diminui a cada repetição', 'Ela permanece constante', 'Seu valor aumenta progressivamente', 'O programa trava', 3, 'facil', 'variaveis'),
(245, 'Qual é um bom exemplo de uma constante em um sistema de conversão de moeda?', 'O valor da moeda atual do usuário', 'O valor fixo da taxa de conversão', 'O valor inserido pelo usuário', 'O total de transações do dia', 2, 'facil', 'variaveis'),
(246, 'Em um programa de controle de estoque, o número de itens em estoque deve ser:', 'Uma constante', 'Uma variável', 'Um comentário', 'Um operador lógico', 2, 'facil', 'variaveis'),
(247, 'Para controlar a quantidade de tentativas em um jogo, você usaria:', 'Uma função', 'Uma constante', 'Uma variável', 'Um operador relacional', 3, 'facil', 'variaveis'),
(248, 'Ao armazenar a quantidade de vezes que um botão foi clicado, você está usando a variável como:', 'Um operador', 'Um acumulador', 'Uma constante', 'Um índice', 2, 'facil', 'variaveis'),
(249, 'Quando você deseja impedir que um valor seja alterado acidentalmente no código, você deve usar:', 'Uma variável booleana', 'Um laço', 'Uma constante', 'Um operador lógico', 3, 'facil', 'variaveis'),
(250, 'Em um sistema de cálculo de frete, o valor fixo da taxa de entrega deve ser armazenado em:', 'Uma variável temporária', 'Um laço', 'Uma constante', 'Um comentário', 3, 'facil', 'variaveis'),
(251, 'Qual destas opções representa uma variável de controle?', 'Um valor que define a quantidade de repetições', 'Um valor fixo', 'Um operador lógico', 'Um comentário no código', 1, 'facil', 'variaveis'),
(252, 'Se você quiser registrar a pontuação mais alta de um jogador, você usaria:', 'Um laço', 'Uma variável', 'Uma constante', 'Um operador', 2, 'facil', 'variaveis'),
(253, 'Qual é o comportamento de uma variável dentro de um loop while?', 'Sempre permanece constante', 'É automaticamente deletada', 'Pode ser atualizada a cada iteração', 'Não é acessível no loop', 3, 'facil', 'variaveis'),
(254, 'Em um sistema de bilheteria, o preço fixo do ingresso deve ser armazenado em:', 'Uma variável que muda a cada cliente', 'Uma constante', 'Um laço de repetição', 'Um operador aritmético', 2, 'facil', 'variaveis'),
(255, 'O que é uma variável temporária em um algoritmo?', 'Uma variável que desaparece quando o código termina', 'Uma constante', 'Um laço que se repete', 'Um operador lógico', 1, 'facil', 'variaveis'),
(256, 'Qual é o valor de x após executar: x = 7; x = x - 2;?', '2', '5', '9', '7', 2, 'facil', 'variaveis'),
(257, 'Em um programa que calcula o valor total da compra, a soma dos preços deve ser armazenada em:', 'Um laço', 'Uma constante', 'Uma variável', 'Um operador lógico', 3, 'facil', 'variaveis'),
(258, 'Para que serve uma variável acumuladora?', 'Para armazenar a quantidade de repetições', 'Para armazenar um valor que é somado ou alterado repetidamente', 'Para definir um valor fixo', 'Para criar funções', 2, 'facil', 'variaveis'),
(259, 'Qual é um bom motivo para usar variáveis no desenvolvimento de programas?', 'Para armazenar dados e permitir alterações durante a execução', 'Para criar funções', 'Para evitar loops', 'Para evitar o uso de operadores', 1, 'facil', 'variaveis'),
(260, 'Em um jogo de adivinhação, o número secreto que não muda deve ser:', 'Uma variável', 'Uma constante', 'Um laço', 'Um operador', 2, 'facil', 'variaveis'),
(261, 'Em um sistema de vendas, o total de vendas do dia deve ser armazenado em:', 'Um laço', 'Uma constante', 'Uma variável', 'Um operador relacional', 3, 'facil', 'variaveis'),
(262, 'O que acontece se você tentar ler o valor de uma variável que nunca foi inicializada?', 'O programa roda normalmente', 'Pode gerar um erro', 'O valor é automaticamente zero', 'O valor é sempre 1', 2, 'facil', 'variaveis'),
(263, 'Para armazenar a resposta de um usuário (sim/não), qual tipo de variável é mais adequado?', 'Constante', 'Variável booleana', 'Operador lógico', 'Laço', 2, 'facil', 'variaveis'),
(264, 'Qual é a principal característica de uma constante?', 'Seu valor muda a cada execução', 'Seu valor não pode ser alterado', 'Seu valor depende de uma função', 'Não ocupa memória', 2, 'facil', 'variaveis'),
(265, 'Para armazenar a quantidade de itens selecionados em um carrinho de compras, usamos:', 'Um laço de repetição', 'Uma constante', 'Uma variável', 'Um operador aritmético', 3, 'facil', 'variaveis'),
(266, 'Ao calcular o valor total de uma compra, a variável \"total\" funciona como:', 'Um laço', 'Uma variável acumuladora', 'Uma constante', 'Um operador relacional', 2, 'facil', 'variaveis'),
(267, 'Em um sistema de sorteio, o número máximo de bilhetes permitidos deve ser:', 'Uma variável', 'Uma constante', 'Um laço', 'Um operador lógico', 2, 'facil', 'variaveis'),
(268, 'Se você precisa registrar quantas vezes um usuário acessou o sistema, você usaria:', 'Uma constante', 'Um operador', 'Uma variável', 'Um laço sem controle', 3, 'facil', 'variaveis'),
(269, 'Qual é a função de uma variável em um algoritmo de cadastro de usuários?', 'Controlar loops', 'Armazenar informações dos usuários', 'Definir funções', 'Evitar a execução', 2, 'facil', 'variaveis'),
(270, 'Ao atualizar a pontuação em um jogo, o que você faz com a variável \"pontuação\"?', 'Zera a cada rodada', 'Multiplica por zero', 'Incrementa conforme o jogador acerta', 'Define como constante', 3, 'facil', 'variaveis'),
(271, 'Para armazenar o número de tentativas em um quiz, você deve usar:', 'Uma função', 'Uma constante', 'Uma variável', 'Um operador lógico', 3, 'facil', 'variaveis'),
(272, 'Qual é o comportamento esperado se uma variável for usada fora do seu escopo?', 'Sempre funciona normalmente', 'Pode gerar um erro', 'O valor vira zero', 'É convertida para uma constante', 2, 'facil', 'variaveis'),
(273, 'Em um sistema de conversão de temperatura, o valor digitado pelo usuário deve ser armazenado em:', 'Uma constante', 'Um laço', 'Uma variável', 'Um operador lógico', 3, 'facil', 'variaveis'),
(274, 'Quando o valor de uma variável é atualizado dentro de um laço, chamamos isso de:', 'Definição de escopo', 'Atribuição de valor', 'Inicialização', 'Comentário no código', 2, 'facil', 'variaveis'),
(275, 'O que significa \"variável acumuladora\"?', 'Variável que recebe sempre o mesmo valor', 'Variável que armazena um valor fixo', 'Variável que soma ou acumula valores ao longo do algoritmo', 'Variável usada apenas em loops infinitos', 3, 'facil', 'variaveis'),
(276, 'Qual dos seguintes exemplos seria melhor representado por uma constante?', 'O número de alunos em uma turma', 'A taxa de imposto de um produto', 'A nota de um aluno', 'A idade atual de uma pessoa', 2, 'facil', 'variaveis'),
(277, 'Se você deseja que um valor permaneça inalterado em todo o programa, você deve usar:', 'Uma variável booleana', 'Um operador lógico', 'Uma constante', 'Um laço infinito', 3, 'facil', 'variaveis'),
(278, 'Qual é um bom motivo para usar variáveis em um programa?', 'Para deixar o código mais bonito', 'Para armazenar dados e permitir mudanças durante a execução', 'Para criar mais comentários', 'Para evitar usar constantes', 2, 'facil', 'variaveis'),
(279, 'Se você declarar contador = 0 e usar contador = contador + 1 em um laço, você está:', 'Decrementando', 'Incrementando', 'Reinicializando', 'Comparando', 2, 'facil', 'variaveis'),
(280, 'Em um programa que calcula descontos, o valor da porcentagem do desconto fixo deve ser:', 'Uma variável que muda toda hora', 'Um operador lógico', 'Uma constante', 'Um laço de repetição', 3, 'facil', 'variaveis'),
(281, 'Para armazenar a quantidade de cliques em um botão, você deve usar:', 'Um operador relacional', 'Um laço', 'Uma variável', 'Uma constante', 3, 'facil', 'variaveis'),
(282, 'Em um programa que armazena o preço fixo de um produto, o preço deve ser:', 'Uma constante', 'Um operador lógico', 'Uma variável booleana', 'Um laço infinito', 1, 'facil', 'variaveis'),
(283, 'Qual é o comportamento esperado ao modificar o valor de uma variável dentro de um laço?', 'Ela permanece igual', 'Ela é removida', 'Ela é atualizada', 'Gera erro', 3, 'facil', 'variaveis'),
(284, 'Se você quiser armazenar a resposta de um quiz (verdadeiro ou falso), o mais adequado é:', 'Uma constante', 'Uma variável booleana', 'Um número inteiro', 'Um laço', 2, 'facil', 'variaveis'),
(285, 'Qual é o papel das variáveis em um algoritmo de cálculo de média?', 'Exibir o resultado', 'Controlar loops', 'Armazenar os valores das notas e o resultado da média', 'Definir o número de laços', 3, 'facil', 'variaveis'),
(286, 'Em um jogo, a quantidade de vidas do jogador que diminui a cada erro deve ser armazenada em:', 'Um operador lógico', 'Uma constante', 'Uma variável', 'Um laço infinito', 3, 'facil', 'variaveis'),
(287, 'Se você deseja guardar o nome de um cliente, você deve usar:', 'Um número inteiro', 'Uma constante', 'Uma variável do tipo texto', 'Um laço de repetição', 3, 'facil', 'variaveis'),
(288, 'Qual das situações abaixo justifica o uso de uma variável?', 'Um valor que muda com o tempo', 'Um valor que nunca deve mudar', 'Um valor que será exibido apenas uma vez', 'Um valor de configuração do sistema', 1, 'facil', 'variaveis'),
(289, 'Se você quer limitar o número máximo de tentativas de login, esse valor deve ser armazenado em:', 'Uma variável', 'Uma constante', 'Um laço while', 'Um operador relacional', 2, 'facil', 'variaveis'),
(290, 'Quando um valor precisa ser alterado várias vezes durante a execução do programa, ele deve ser:', 'Uma constante', 'Um comentário', 'Uma variável', 'Um operador', 3, 'facil', 'variaveis'),
(291, 'Qual é a vantagem de usar constantes no código?', 'Evitam erros de digitação', 'Faz o código mais lento', 'Forçam o uso de loops', 'Substituem a necessidade de variáveis', 1, 'facil', 'variaveis'),
(292, 'Se você quer armazenar a data de nascimento de um usuário, você usaria:', 'Um operador lógico', 'Uma variável', 'Um laço', 'Uma constante', 2, 'facil', 'variaveis'),
(293, 'Para controlar um cronômetro que conta segundos, você deve usar:', 'Uma constante', 'Uma variável', 'Um operador lógico', 'Um laço for sem variável', 2, 'facil', 'variaveis'),
(294, 'Se o valor de um item é calculado a cada compra, ele deve ser armazenado em:', 'Uma constante', 'Uma variável', 'Um comentário', 'Um laço infinito', 2, 'facil', 'variaveis'),
(295, 'Qual é o resultado após executar: x = 3; x = x + 4;?', '4', '7', '3', '12', 2, 'facil', 'variaveis'),
(296, 'Para armazenar o tempo restante de um cronômetro regressivo, você usaria:', 'Uma constante', 'Uma variável', 'Um operador relacional', 'Um laço sem controle', 2, 'facil', 'variaveis'),
(297, 'Qual é o comportamento esperado de uma constante?', 'Valor fixo que não pode ser alterado', 'Valor que muda a cada execução', 'Valor que se adapta ao usuário', 'Valor que não ocupa memória', 1, 'facil', 'variaveis'),
(298, 'Se um programa exibe um menu com número de opções fixas, essa quantidade deve ser:', 'Uma variável', 'Um operador relacional', 'Uma constante', 'Um laço', 3, 'facil', 'variaveis'),
(299, 'Qual tipo de variável você usaria para armazenar um saldo bancário que varia?', 'Uma constante', 'Um operador relacional', 'Uma variável', 'Um laço', 3, 'facil', 'variaveis'),
(300, 'Se você precisa contar o número de alunos aprovados, a variável usada será:', 'Um operador relacional', 'Uma constante', 'Uma variável acumuladora', 'Um laço sem variável', 3, 'facil', 'variaveis'),
(301, 'Se você precisa armazenar o nível de dificuldade escolhido pelo usuário em um jogo, você deve usar:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço infinito', 3, 'facil', 'variaveis'),
(302, 'Qual é um bom exemplo de uso de variável acumuladora?', 'Contar pontos em um jogo', 'Armazenar o nome do jogador', 'Definir a quantidade máxima de vidas', 'Exibir uma mensagem na tela', 1, 'facil', 'variaveis'),
(303, 'Se um valor nunca deve ser alterado durante a execução, ele deve ser:', 'Uma variável', 'Um operador relacional', 'Uma constante', 'Um laço for', 3, 'facil', 'variaveis'),
(304, 'Qual é o comportamento de uma variável booleana?', 'Armazena números inteiros', 'Armazena valores verdadeiro ou falso', 'Armazena strings', 'Armazena funções', 2, 'facil', 'variaveis'),
(305, 'Para controlar o progresso de uma barra de carregamento, você usaria:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço sem controle', 3, 'facil', 'variaveis'),
(306, 'Em um sistema de quiz, o número total de perguntas deve ser:', 'Uma constante', 'Uma variável', 'Um operador relacional', 'Um laço', 1, 'facil', 'variaveis'),
(307, 'Qual é um uso comum de variáveis em um formulário?', 'Armazenar as respostas dos campos', 'Controlar loops', 'Exibir mensagens de erro', 'Definir o tamanho do formulário', 1, 'facil', 'variaveis'),
(308, 'O que acontece com uma variável acumuladora ao longo do loop?', 'Permanece igual', 'É zerada a cada iteração', 'Acumula os valores', 'Gera erro', 3, 'facil', 'variaveis'),
(309, 'Se você quiser armazenar a quantidade de produtos em um carrinho de compras, você usaria:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço sem variável', 3, 'facil', 'variaveis'),
(310, 'Qual dessas situações justifica o uso de uma variável?', 'Valor que precisa ser atualizado durante a execução', 'Valor que nunca muda', 'Valor que não é utilizado', 'Valor usado apenas no início do programa', 1, 'facil', 'variaveis'),
(311, 'Para armazenar o tempo que um usuário passou em uma página, você deve usar:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço for', 3, 'facil', 'variaveis'),
(312, 'Em um sistema de controle de estoque, o número máximo de produtos permitido deve ser:', 'Uma variável', 'Uma constante', 'Um operador relacional', 'Um laço', 2, 'facil', 'variaveis'),
(313, 'Se o valor de um desconto fixo não deve ser alterado, ele deve ser:', 'Uma variável', 'Um operador lógico', 'Uma constante', 'Um laço infinito', 3, 'facil', 'variaveis'),
(314, 'Para contar quantos produtos foram vendidos, você usaria:', 'Um laço sem controle', 'Um operador lógico', 'Uma variável acumuladora', 'Um constante', 3, 'facil', 'variaveis'),
(315, 'Qual é o papel de uma variável booleana em uma condição?', 'Armazenar um valor fixo', 'Controlar loops', 'Determinar verdadeiro ou falso', 'Exibir mensagens', 3, 'facil', 'variaveis'),
(316, 'Se o usuário informa seu nome em um formulário, o campo nome deve ser armazenado em:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço', 3, 'facil', 'variaveis'),
(317, 'Para armazenar a pontuação atual em um jogo, você usaria:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço infinito', 3, 'facil', 'variaveis'),
(318, 'Em um programa que calcula a soma de vários números, a variável usada para somar é chamada de:', 'Controle', 'Contador', 'Acumuladora', 'Infinita', 3, 'facil', 'variaveis'),
(319, 'Qual é um bom motivo para usar variáveis em programas interativos?', 'Para armazenar e manipular entradas do usuário', 'Para limitar loops', 'Para evitar o uso de operadores', 'Para definir constantes', 1, 'facil', 'variaveis'),
(320, 'Para armazenar o nível de acesso de um usuário (ex: admin ou usuário comum), você usaria:', 'Uma constante', 'Um operador lógico', 'Uma variável', 'Um laço', 3, 'facil', 'variaveis'),
(321, 'Qual é o comportamento de uma variável declarada dentro de uma função?', 'É visível em todo o programa', 'É visível apenas dentro da função', 'Não ocupa memória', 'Se torna uma constante automaticamente', 2, 'dificil', 'variaveis'),
(322, 'O que acontece com uma variável global se for alterada dentro de uma função sem a palavra global?', 'O valor global é alterado', 'O programa gera erro', 'Uma nova variável local é criada', 'A variável global é deletada', 3, 'dificil', 'variaveis'),
(323, 'Qual é a principal vantagem de usar variáveis com escopo local?', 'Melhorar a performance', 'Evitar conflitos com variáveis globais', 'Aumentar o uso de memória', 'Tornar o código mais lento', 2, 'dificil', 'variaveis'),
(324, 'Em um programa com loops aninhados, o uso incorreto de variáveis de controle pode causar:', 'Redução no tempo de execução', 'Resultados inesperados', 'Aumento na segurança', 'Execução mais rápida', 2, 'dificil', 'variaveis'),
(325, 'Qual é o comportamento de uma constante se você tentar reatribuir seu valor dentro de um loop?', 'Ela é alterada apenas na primeira iteração', 'Gera um erro', 'O valor se acumula', 'O valor é ignorado', 2, 'dificil', 'variaveis'),
(326, 'Uma variável declarada fora de todas as funções e loops é chamada de:', 'Local', 'Dinâmica', 'Global', 'Estática', 3, 'dificil', 'variaveis'),
(327, 'Qual das situações abaixo justifica o uso de variáveis temporárias?', 'Quando o valor precisa ser usado em todo o programa', 'Quando o valor é necessário apenas durante um cálculo', 'Quando o valor não pode mudar', 'Quando se quer evitar loops', 2, 'dificil', 'variaveis'),
(328, 'Em qual situação seria inadequado usar uma constante?', 'Armazenar um valor fixo de imposto', 'Armazenar a quantidade de vidas iniciais no jogo', 'Armazenar o saldo de uma conta bancária', 'Armazenar o valor de PI', 3, 'dificil', 'variaveis'),
(329, 'Qual a diferença entre variável estática e variável global (em linguagens que suportam variável estática)?', 'Nenhuma, são iguais', 'Variável estática mantém valor entre chamadas de função', 'Variável global não ocupa memória', 'Variável estática é sempre booleana', 2, 'dificil', 'variaveis'),
(330, 'Se uma variável global e uma variável local têm o mesmo nome, qual valor é usado dentro da função?', 'O da variável global', 'O da variável local', 'A soma dos dois valores', 'Gera erro', 2, 'dificil', 'variaveis'),
(331, 'Qual é o comportamento de uma variável acumuladora não inicializada corretamente?', 'Não influencia no resultado', 'Produz valores incorretos', 'Faz o programa rodar mais rápido', 'Faz o laço parar automaticamente', 2, 'dificil', 'variaveis'),
(332, 'Qual é a consequência de usar a mesma variável como controle em loops aninhados?', 'Não há consequência', 'O código fica mais organizado', 'Pode gerar resultados errados', 'Aumenta a eficiência', 3, 'dificil', 'variaveis'),
(333, 'Qual é o uso adequado de constantes em estruturas condicionais?', 'Para controlar o número de repetições', 'Para comparar valores', 'Para armazenar resultados temporários', 'Para incrementar contadores', 2, 'dificil', 'variaveis'),
(334, 'Em um algoritmo de ordenação, as variáveis de troca geralmente são:', 'Constantes', 'Variáveis temporárias', 'Variáveis globais', 'Variáveis de controle', 2, 'dificil', 'variaveis'),
(335, 'O que ocorre quando você esquece de atualizar uma variável de controle em um laço while?', 'O laço não inicia', 'O laço executa apenas uma vez', 'O laço entra em loop infinito', 'A variável vira constante', 3, 'dificil', 'variaveis'),
(336, 'Se você precisa que uma variável mantenha seu valor entre múltiplas chamadas de uma função, você deve usar:', 'Variável global ou estática', 'Variável local', 'Constante', 'Operador lógico', 1, 'dificil', 'variaveis'),
(337, 'Qual é o uso correto de variáveis no controle de estados de um programa?', 'Para controlar transições de estado', 'Para exibir mensagens de erro', 'Para evitar o uso de loops', 'Para armazenar strings constantes', 1, 'dificil', 'variaveis'),
(338, 'Ao somar grandes quantidades de números em um loop, qual cuidado deve-se ter com a variável acumuladora?', 'Não precisa de cuidado', 'Evitar overflow', 'Evitar loops aninhados', 'Usar sempre variável booleana', 2, 'dificil', 'variaveis'),
(339, 'Qual prática ajuda a evitar erros ao usar variáveis em funções grandes?', 'Usar nomes genéricos', 'Declarar todas as variáveis no início', 'Reutilizar variáveis para várias finalidades', 'Evitar comentários', 2, 'dificil', 'variaveis'),
(340, 'Qual situação exige uma variável de controle que não seja booleana?', 'Controle de um laço while simples', 'Controle de estados com mais de dois valores', 'Comparação de verdadeiro ou falso', 'Controle de acesso a um recurso', 2, 'dificil', 'variaveis'),
(341, 'Qual é o risco de usar variáveis globais em programas grandes?', 'Aumentar a legibilidade', 'Facilitar a manutenção', 'Gerar conflitos e efeitos colaterais', 'Melhorar a performance', 3, 'dificil', 'variaveis'),
(342, 'Qual é a vantagem de usar constantes nomeadas em vez de números \"mágicos\" no código?', 'Tornar o código mais rápido', 'Reduzir o consumo de memória', 'Tornar o código mais legível e fácil de manter', 'Eliminar a necessidade de loops', 3, 'dificil', 'variaveis'),
(343, 'Em um loop de processamento de lista, qual prática é recomendada para evitar interferência entre elementos?', 'Usar constantes', 'Usar variáveis de controle locais ao loop', 'Usar variáveis globais', 'Não usar variáveis', 2, 'dificil', 'variaveis'),
(344, 'Quando o escopo de uma variável deve ser restrito ao mínimo possível?', 'Para reduzir o uso de memória', 'Para evitar conflitos e facilitar manutenção', 'Para tornar o código mais rápido', 'Para evitar o uso de loops', 2, 'dificil', 'variaveis'),
(345, 'Qual é um risco de reusar variáveis com significados diferentes no mesmo código?', 'Aumentar a eficiência', 'Tornar o código mais claro', 'Introduzir bugs difíceis de rastrear', 'Reduzir o tamanho do código', 3, 'dificil', 'variaveis'),
(346, 'Qual é o comportamento de uma variável de controle em um loop for com incremento negativo?', 'Não altera o comportamento do loop', 'O loop se torna infinito', 'O loop executa de forma decrescente', 'A variável se torna constante', 3, 'dificil', 'variaveis'),
(347, 'Qual abordagem é mais segura ao passar variáveis para funções?', 'Passar sempre como global', 'Passar como argumento', 'Usar constantes', 'Não passar variáveis', 2, 'dificil', 'variaveis'),
(348, 'Em linguagens com passagem por referência, o que acontece se uma função altera a variável recebida?', 'A variável local da função é alterada', 'A variável original é alterada', 'Nenhuma variável é alterada', 'Um erro é gerado', 2, 'dificil', 'variaveis'),
(349, 'O que caracteriza uma variável imutável?', 'Não pode ser sobrescrita após inicialização', 'Não ocupa memória', 'Não pode ser usada em funções', 'Não é declarada', 1, 'dificil', 'variaveis'),
(350, 'O que é \"shadowing\" de variáveis?', 'Reutilizar o mesmo nome de variável globalmente', 'Ocultar uma variável global com uma local', 'Usar variáveis em loops aninhados', 'Declarar variáveis sem inicializá-las', 2, 'dificil', 'variaveis'),
(351, 'Qual é a vantagem de usar um nome descritivo para variáveis?', 'Reduzir o consumo de memória', 'Tornar o código autoexplicativo', 'Melhorar a performance', 'Evitar loops', 2, 'dificil', 'variaveis'),
(352, 'Em que caso uma variável deve ser inicializada com um valor padrão?', 'Sempre', 'Quando o comportamento com valores indefinidos pode causar erro', 'Quando se quer economizar memória', 'Quando se usa constantes', 2, 'dificil', 'variaveis'),
(353, 'Qual prática ajuda a minimizar o uso excessivo de variáveis globais?', 'Usar apenas variáveis globais', 'Dividir o código em funções e passar variáveis por parâmetro', 'Declarar variáveis fora de loops', 'Não usar funções', 2, 'dificil', 'variaveis'),
(354, 'Qual é o risco de não inicializar corretamente uma variável booleana?', 'Nenhum', 'Produzir comportamento não-determinístico', 'Tornar o código mais rápido', 'Forçar a execução de loops', 2, 'dificil', 'variaveis'),
(355, 'Qual é o comportamento de uma constante se você tentar incrementá-la com ++?', 'Ela é incrementada uma vez', 'O valor é mantido', 'Gera erro', 'Ela vira variável', 3, 'dificil', 'variaveis'),
(356, 'Qual é uma situação típica onde é melhor usar uma constante?', 'Contador de loop', 'Taxa de câmbio fixa', 'Variável temporária', 'Variável de controle de estado', 2, 'dificil', 'variaveis'),
(357, 'Em um algoritmo de busca, a variável que indica se o item foi encontrado deve ser:', 'Uma constante', 'Uma variável booleana', 'Um inteiro', 'Um operador relacional', 2, 'dificil', 'variaveis'),
(358, 'O que ocorre se você alterar uma variável de controle de um loop for manualmente dentro do corpo do loop?', 'Nada acontece', 'Gera erro', 'Pode quebrar a lógica do loop', 'O loop é otimizado', 3, 'dificil', 'variaveis'),
(359, 'Qual prática evita vazamento de variáveis em programas grandes?', 'Usar sempre variáveis globais', 'Declarar variáveis com escopo mínimo possível', 'Inicializar variáveis com null', 'Reutilizar nomes', 2, 'dificil', 'variaveis'),
(360, 'Qual é a diferença entre variável constante e variável final (ex: final em Java)?', 'Nenhuma', 'final permite uma única atribuição', 'Constante pode ser alterada', 'final é usada apenas em loops', 2, 'dificil', 'variaveis'),
(361, 'Quando uma variável é declarada dentro de um bloco if, qual é seu escopo?', 'Global', 'Visível apenas dentro do if', 'Visível em todo o programa', 'Visível em todo o arquivo', 2, 'dificil', 'variaveis'),
(362, 'O que acontece se você tenta usar uma variável fora de seu escopo?', 'É inicializada automaticamente', 'Gera erro', 'O valor vira zero', 'A variável vira constante', 2, 'dificil', 'variaveis'),
(363, 'O que é \"const correctness\" em linguagens como C++?', 'Não permitir usar loops com constantes', 'Garantir que valores constantes não sejam modificados', 'Transformar variáveis em constantes', 'Permitir incremento de constantes', 2, 'dificil', 'variaveis'),
(364, 'Qual prática é recomendada ao usar variáveis acumuladoras em loops aninhados?', 'Usar variável global', 'Usar variável separada para cada loop', 'Não usar acumuladores', 'Reutilizar a mesma variável', 2, 'dificil', 'variaveis'),
(365, 'Qual é o comportamento de uma variável do tipo imutável (ex: str em Python)?', 'Não pode ser usada em funções', 'Cada operação gera um novo objeto', 'Pode ser sobrescrita no lugar', 'Gera erro ao ser usada em loop', 2, 'dificil', 'variaveis'),
(366, 'Qual é o risco de misturar variáveis globais e locais com o mesmo nome?', 'Nenhum', 'Dificultar a legibilidade e manutenção do código', 'Aumentar a performance', 'Reduzir o uso de memória', 2, 'dificil', 'variaveis'),
(367, 'Qual prática ajuda a garantir que variáveis não sejam usadas antes de serem inicializadas?', 'Não declarar variáveis', 'Sempre inicializar no momento da declaração', 'Declarar como global', 'Não usar variáveis locais', 2, 'dificil', 'variaveis'),
(368, 'Se você declarar uma variável como constante, mas ela referencia um objeto mutável, o que acontece?', 'Nada acontece', 'O objeto pode ser alterado', 'O objeto é congelado', 'O código gera erro', 2, 'dificil', 'variaveis'),
(369, 'Qual é o uso típico de constantes em expressões condicionais?', 'Incrementar acumuladores', 'Definir limites ou parâmetros fixos', 'Controlar loops', 'Substituir variáveis locais', 2, 'dificil', 'variaveis'),
(370, 'Qual é o comportamento esperado de uma variável estática em uma função?', 'É recriada a cada chamada', 'Mantém seu valor entre chamadas', 'Não é inicializada', 'É destruída ao final do bloco', 2, 'dificil', 'variaveis'),
(371, 'Qual prática ajuda a manter o código escalável com uso de variáveis e constantes?', 'Usar sempre variáveis globais', 'Definir constantes para valores que podem mudar em requisitos futuros', 'Não usar constantes', 'Usar nomes de variáveis genéricos', 2, 'dificil', 'variaveis'),
(372, 'Qual é a principal diferença entre \"passagem por valor\" e \"passagem por referência\"?', 'Em valor, a variável original é alterada', 'Em referência, a variável original é alterada', 'Em valor, a variável é global', 'Em referência, não é possível alterar a variável', 2, 'dificil', 'variaveis'),
(373, 'Quando uma variável booleana deve ser usada em um loop?', 'Quando o número de iterações é fixo', 'Quando o loop deve depender de uma condição de parada', 'Quando a variável não muda', 'Quando se quer evitar loops', 2, 'dificil', 'variaveis'),
(374, 'Qual prática é indicada ao nomear variáveis temporárias em algoritmos complexos?', 'Usar letras únicas', 'Usar nomes descritivos mesmo que temporárias', 'Não nomear', 'Usar nomes repetidos', 2, 'dificil', 'variaveis'),
(375, 'O que acontece com uma variável que é declarada, mas nunca utilizada?', 'É otimizada pelo compilador', 'Gera erro', 'É automaticamente inicializada', 'Se torna uma constante', 1, 'dificil', 'variaveis'),
(376, 'Qual vantagem o uso de constantes proporciona em cálculos de fórmulas matemáticas?', 'Otimização automática do loop', 'Garantir a integridade dos valores', 'Reduzir o uso de memória', 'Evitar necessidade de variáveis', 2, 'dificil', 'variaveis'),
(377, 'O que caracteriza uma variável \"volatile\" (em linguagens como C)?', 'Pode ser alterada por processos externos', 'Não pode ser alterada', 'É uma constante', 'É destruída ao sair do bloco', 1, 'dificil', 'variaveis'),
(378, 'Qual é uma consequência de usar uma variável não inicializada em uma expressão?', 'Gera um erro de compilação ou comportamento indefinido', 'A variável é automaticamente inicializada', 'O código é otimizado', 'A variável vira constante', 1, 'dificil', 'variaveis'),
(379, 'Quando usar uma variável global é aceitável?', 'Sempre que possível', 'Quando um valor precisa ser compartilhado entre múltiplas funções e módulos', 'Para evitar uso de argumentos', 'Quando se quer simplificar o código', 2, 'dificil', 'variaveis'),
(380, 'Qual prática ajuda a reduzir bugs relacionados a variáveis em programas multi-thread?', 'Usar variáveis globais', 'Usar variáveis locais e sincronização adequada', 'Reutilizar variáveis', 'Não usar funções', 2, 'dificil', 'variaveis'),
(381, 'O que é \"mutable default argument\" em Python?', 'Constante', 'Argumento com valor padrão mutável', 'Variável local', 'Valor não inicializado', 2, 'dificil', 'variaveis'),
(382, 'Qual é um risco ao passar uma lista como argumento padrão em funções Python?', 'A função se torna lenta', 'A lista é compartilhada entre chamadas', 'O código não compila', 'O argumento se torna constante', 2, 'dificil', 'variaveis'),
(383, 'O que significa \"immutability\" em linguagens funcionais?', 'Variáveis são sempre globais', 'Variáveis não podem ser alteradas após criação', 'Não se pode criar variáveis', 'Não existem loops', 2, 'dificil', 'variaveis'),
(384, 'Quando usar \"const\" em ponteiros em C?', 'Para impedir que o ponteiro mude de endereço', 'Para impedir que o conteúdo apontado seja alterado', 'Para tornar o ponteiro local', 'Para tornar o ponteiro global', 2, 'dificil', 'variaveis'),
(385, 'Qual é um exemplo de variável que naturalmente deve ser imutável?', 'Contador de loop', 'Nome do usuário', 'Pontuação atual', 'Tempo decorrido', 2, 'dificil', 'variaveis'),
(386, 'Em qual situação variáveis dinâmicas são preferíveis?', 'Quando o número de elementos é desconhecido em tempo de compilação', 'Quando se quer desempenho máximo', 'Em sistemas embarcados', 'Para evitar uso de memória', 1, 'dificil', 'variaveis'),
(387, 'Em algoritmos de \"memoization\", qual tipo de variável é usada para armazenar resultados intermediários?', 'Constante', 'Tabela de cache (variável)', 'Variável booleana', 'Operador relacional', 2, 'dificil', 'variaveis'),
(388, 'Qual prática reduz o risco de \"race conditions\" com variáveis em programas concorrentes?', 'Usar variáveis globais', 'Usar sincronização adequada (ex: mutex)', 'Evitar funções', 'Evitar variáveis', 2, 'dificil', 'variaveis'),
(389, 'O que é um \"immutable data structure\"?', 'Estrutura de dados cujo conteúdo não pode ser alterado', 'Estrutura sempre local', 'Estrutura usada em loops', 'Estrutura global', 1, 'dificil', 'variaveis'),
(390, 'Qual prática melhora a performance em linguagens que suportam \"constant folding\"?', 'Usar variáveis globais', 'Declarar expressões como constantes', 'Evitar constantes', 'Reutilizar variáveis', 2, 'dificil', 'variaveis'),
(391, 'Quando uma variável de controle deve ser reinicializada dentro de um loop?', 'Quando se quer alterar a condição de parada', 'Quando a variável não muda', 'Quando o loop é pequeno', 'Nunca', 1, 'dificil', 'variaveis'),
(392, 'O que significa uma variável \"lazy-loaded\"?', 'Inicializada somente quando for utilizada', 'Não inicializada', 'Constante', 'Inicializada globalmente', 1, 'dificil', 'variaveis'),
(393, 'Qual vantagem do uso de variáveis imutáveis em código concorrente?', 'Menos bugs relacionados a estados compartilhados', 'Menos uso de memória', 'Melhor desempenho em laços', 'Menos loops', 1, 'dificil', 'variaveis'),
(394, 'O que ocorre se uma função tenta alterar uma variável capturada como const em um closure?', 'O valor é alterado', 'O código gera erro', 'O valor vira global', 'Nada acontece', 2, 'dificil', 'variaveis'),
(395, 'Qual é uma prática comum ao definir variáveis de configuração?', 'Usá-las como variáveis globais mutáveis', 'Defini-las como constantes', 'Defini-las como variáveis locais', 'Não usar variáveis', 2, 'dificil', 'variaveis'),
(396, 'O que é \"garbage collection\" em relação a variáveis?', 'Tornar variáveis constantes', 'Recolher variáveis não mais referenciadas para liberar memória', 'Tornar variáveis globais', 'Inicializar variáveis automaticamente', 2, 'dificil', 'variaveis'),
(397, 'Em que situação o uso de uma variável volátil é necessário?', 'Em código concorrente onde a variável pode ser alterada por hardware externo', 'Em código com apenas um thread', 'Quando a variável é constante', 'Quando se quer otimizar loops', 1, 'dificil', 'variaveis'),
(398, 'Qual é a consequência de declarar uma variável com o mesmo nome em escopos aninhados?', 'Gera erro', 'A variável mais interna \"sombra\" a variável externa', 'As variáveis se fundem', 'A variável interna não é inicializada', 2, 'dificil', 'variaveis'),
(399, 'Qual é o comportamento de uma variável capturada em um lambda (função anônima)?', 'Sempre é passada por valor', 'Depende da forma de captura', 'Não pode ser capturada', 'Sempre é global', 2, 'dificil', 'variaveis'),
(400, 'Qual técnica ajuda a garantir que uma variável seja inicializada apenas uma vez, mesmo em programas multi-thread?', 'Usar variável global', 'Usar padrão \"singleton\"', 'Não usar variáveis', 'Usar variáveis locais', 2, 'dificil', 'variaveis'),
(401, 'Qual operador aritmético é usado para soma?', '-', '*', '+', '/', 3, 'facil', 'operadores'),
(402, 'Qual operador aritmético calcula a divisão?', '+', '*', '/', '%', 3, 'facil', 'operadores'),
(403, 'O que significa o operador %?', 'Soma dois valores', 'Multiplica dois valores', 'Retorna o resto da divisão', 'Divide dois valores', 3, 'facil', 'operadores'),
(404, 'Qual operador relacional verifica se dois valores são iguais?', '=', '==', '!=', '>=', 2, 'facil', 'operadores'),
(405, 'Qual operador relacional verifica se dois valores são diferentes?', '==', '=', '!=', '>', 3, 'facil', 'operadores'),
(406, 'Qual é o resultado da expressão 5 + 3 * 2?', '11', '16', '8', '10', 1, 'facil', 'operadores'),
(407, 'Qual é o resultado de 10 % 3?', '0', '3', '1', '10', 3, 'facil', 'operadores'),
(408, 'Qual operador lógico significa \"E\" (AND)?', '&&', '||', '==', '!=', 1, 'facil', 'operadores'),
(409, 'Qual operador lógico significa \"OU\" (OR)?', '&&', '||', '==', '%', 2, 'facil', 'operadores'),
(410, 'Qual operador lógico significa \"NÃO\" (NOT)?', '==', '&&', '||', '!', 4, 'facil', 'operadores'),
(411, 'Qual o resultado de (5 > 3) && (2 < 4)?', 'verdadeiro', 'falso', '5', '2', 1, 'facil', 'operadores'),
(412, 'Qual o resultado de (5 < 3) || (2 < 4)?', 'verdadeiro', 'falso', '5', '2', 1, 'facil', 'operadores'),
(413, 'Qual o resultado de !(5 == 5)?', 'verdadeiro', 'falso', '5', '0', 2, 'facil', 'operadores'),
(414, 'Em uma expressão com + e *, qual operador é avaliado primeiro?', '+', '*', '%', '==', 2, 'facil', 'operadores'),
(415, 'Qual é o operador relacional \"maior que\"?', '<', '==', '>', '<=', 3, 'facil', 'operadores'),
(416, 'Qual é o operador relacional \"menor ou igual a\"?', '>=', '==', '!=', '<=', 4, 'facil', 'operadores'),
(417, 'Qual será o resultado de 4 * 2 + 3?', '14', '11', '10', '9', 1, 'facil', 'operadores'),
(418, 'Qual será o resultado de 10 / 2?', '2', '4', '5', '20', 3, 'facil', 'operadores'),
(419, 'Qual será o resultado de (6 % 4)?', '0', '2', '4', '6', 2, 'facil', 'operadores'),
(420, 'Qual operador relacional verifica se um valor é menor que outro?', '==', '!=', '>=', '<', 4, 'facil', 'operadores'),
(421, 'O operador >= significa:', 'maior que', 'menor que', 'maior ou igual', 'diferente', 3, 'facil', 'operadores'),
(422, 'Qual o resultado de 3 + 7 * 2?', '13', '17', '20', '21', 2, 'facil', 'operadores'),
(423, 'O operador != verifica:', 'Igualdade', 'Maior que', 'Menor que', 'Diferença', 4, 'facil', 'operadores'),
(424, 'Qual operador lógico em Python representa \"AND\"?', '&&', '||', 'and', 'not', 3, 'facil', 'operadores'),
(425, 'Qual operador lógico em Python representa \"OR\"?', '&&', 'or', 'not', '==', 2, 'facil', 'operadores'),
(426, 'O que faz o operador ! em linguagens como C ou Java?', 'E', 'OU', 'NÃO (negação)', 'Comparação', 3, 'facil', 'operadores'),
(427, 'Qual é o resultado de (7 > 5) && (3 == 3)?', 'verdadeiro', 'falso', '3', '5', 1, 'facil', 'operadores'),
(428, 'Qual será o resultado de (8 % 5)?', '3', '5', '0', '8', 1, 'facil', 'operadores'),
(429, 'Qual é o valor de 4 + 5 - 3?', '4', '6', '5', '9', 2, 'facil', 'operadores'),
(430, 'O que significa ==?', 'Atribuição', 'Comparação', 'Soma', 'Divisão', 2, 'facil', 'operadores'),
(431, 'O operador % é também conhecido como:', 'operador de soma', 'operador de divisão', 'operador de módulo', 'operador lógico', 3, 'facil', 'operadores'),
(432, 'Qual será o resultado de 12 / 4?', '2', '3', '4', '6', 2, 'facil', 'operadores'),
(433, 'Qual operador representa \"menor ou igual a\"?', '<=', '>=', '==', '!=', 1, 'facil', 'operadores'),
(434, 'Qual será o resultado de (7 < 9) || (4 > 5)?', 'verdadeiro', 'falso', '7', '9', 1, 'facil', 'operadores');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(435, 'Qual o resultado de 5 * (2 + 3)?', '10', '15', '25', '20', 3, 'facil', 'operadores'),
(436, 'O que representa o operador &&?', 'OU', 'NÃO', 'E', 'Igualdade', 3, 'facil', 'operadores'),
(437, 'O operador OR retorna verdadeiro quando:', 'Ambas as condições são falsas', 'Pelo menos uma condição é verdadeira', 'Todas as condições são falsas', 'Nenhuma condição é avaliada', 2, 'facil', 'operadores'),
(438, 'O operador NOT inverte:', 'Um número', 'Uma string', 'Um valor booleano', 'Uma variável', 3, 'facil', 'operadores'),
(439, 'Qual operador relacional significa \"igual a\"?', '==', '!=', '>=', '<', 1, 'facil', 'operadores'),
(440, 'Qual é o valor de 10 % 2?', '1', '0', '2', '5', 2, 'facil', 'operadores'),
(441, 'Qual é o valor de 7 % 4?', '2', '3', '1', '0', 2, 'facil', 'operadores'),
(442, 'O operador <= significa:', 'maior ou igual', 'menor ou igual', 'igual', 'diferente', 2, 'facil', 'operadores'),
(443, 'O que representa 3 + 4 * 2?', '14', '12', '11', '10', 1, 'facil', 'operadores'),
(444, 'O operador != retorna verdadeiro quando:', 'Os valores são iguais', 'Os valores são diferentes', 'O primeiro é maior', 'O primeiro é menor', 2, 'facil', 'operadores'),
(445, 'Qual será o valor de 10 - 2 * 3?', '12', '6', '4', '14', 2, 'facil', 'operadores'),
(446, 'Qual operador tem maior precedência?', '+', '==', '*', '||', 3, 'facil', 'operadores'),
(447, 'O operador || é um operador:', 'relacional', 'aritmético', 'lógico', 'de atribuição', 3, 'facil', 'operadores'),
(448, 'Qual é o resultado de !(3 > 1)?', 'verdadeiro', 'falso', '1', '0', 2, 'facil', 'operadores'),
(449, 'Qual é o resultado de (5 <= 5) && (7 > 6)?', 'verdadeiro', 'falso', '7', '5', 1, 'facil', 'operadores'),
(450, '3 * 4 + 2 resulta em:', '12', '14', '16', '18', 2, 'facil', 'operadores'),
(451, 'O operador > significa:', 'menor', 'maior', 'igual', 'diferente', 2, 'facil', 'operadores'),
(452, 'Qual é o valor de 15 % 4?', '2', '3', '4', '0', 2, 'facil', 'operadores'),
(453, 'Qual é o valor de 2 + 3 * 4?', '20', '14', '18', '24', 2, 'facil', 'operadores'),
(454, 'Qual é o valor de (6 / 3) + (4 * 2)?', '10', '12', '8', '6', 1, 'facil', 'operadores'),
(455, 'Qual operador relacional verifica igualdade?', '==', '=', '!=', '>', 1, 'facil', 'operadores'),
(456, 'Qual é o resultado de (4 == 4) || (5 != 5)?', 'verdadeiro', 'falso', '4', '5', 1, 'facil', 'operadores'),
(457, '!false resulta em:', 'false', 'true', '1', '0', 2, 'facil', 'operadores'),
(458, '(3 + 2) * (4 - 1) resulta em:', '10', '15', '20', '25', 2, 'facil', 'operadores'),
(459, 'Qual operador lógico nega uma condição?', '&&', '||', '!', '==', 3, 'facil', 'operadores'),
(460, '(6 > 3) && (2 >= 2) resulta em:', 'falso', 'verdadeiro', '2', '6', 2, 'facil', 'operadores'),
(461, 'O operador + serve para:', 'subtrair', 'dividir', 'somar', 'multiplicar', 3, 'facil', 'operadores'),
(462, 'Qual o resultado de 7 / 2 em divisão inteira?', '3', '4', '3.5', '2', 1, 'facil', 'operadores'),
(463, '(5 + 5) / (2 + 3) resulta em:', '2', '1', '5', '10', 1, 'facil', 'operadores'),
(464, '(8 > 6) && (9 < 5) resulta em:', 'falso', 'verdadeiro', '8', '9', 1, 'facil', 'operadores'),
(465, '(4 == 4) && !(3 > 5) resulta em:', 'falso', 'verdadeiro', '3', '4', 2, 'facil', 'operadores'),
(466, '10 % 4 resulta em:', '0', '2', '4', '6', 2, 'facil', 'operadores'),
(467, '(5 >= 5) && (2 != 3) resulta em:', 'falso', 'verdadeiro', '2', '5', 2, 'facil', 'operadores'),
(468, 'O operador * serve para:', 'dividir', 'subtrair', 'multiplicar', 'comparar', 3, 'facil', 'operadores'),
(469, '(6 < 7) || (3 == 4) resulta em:', 'verdadeiro', 'falso', '6', '3', 1, 'facil', 'operadores'),
(470, '(7 * 2) % 5 resulta em:', '1', '2', '0', '3', 1, 'facil', 'operadores'),
(471, '(10 / 2) + (3 * 1) resulta em:', '8', '6', '7', '9', 1, 'facil', 'operadores'),
(472, 'Qual operador representa diferença?', '==', '=', '!=', '<=', 3, 'facil', 'operadores'),
(473, '(4 + 3) * 2 resulta em:', '14', '12', '16', '10', 1, 'facil', 'operadores'),
(474, '(5 == 6) || (7 == 7) resulta em:', 'verdadeiro', 'falso', '7', '5', 1, 'facil', 'operadores'),
(475, '!(8 < 10) resulta em:', 'verdadeiro', 'falso', '8', '10', 2, 'facil', 'operadores'),
(476, '(6 + 4) / (5 - 3) resulta em:', '2', '4', '5', '6', 2, 'facil', 'operadores'),
(477, '(9 > 7) && (2 < 5) resulta em:', 'verdadeiro', 'falso', '9', '2', 1, 'facil', 'operadores'),
(478, '7 % 3 resulta em:', '1', '2', '3', '0', 1, 'facil', 'operadores'),
(479, 'Qual operador compara \"menor\"?', '>', '<', '==', '!=', 2, 'facil', 'operadores'),
(480, '(10 / 5) + (3 * 2) resulta em:', '8', '7', '6', '9', 1, 'facil', 'operadores'),
(481, '(2 * 3) + 4 resulta em:', '6', '8', '10', '12', 3, 'facil', 'operadores'),
(482, '!(4 != 4) resulta em:', 'verdadeiro', 'falso', '4', '0', 1, 'facil', 'operadores'),
(483, '(8 % 3) resulta em:', '3', '2', '1', '0', 2, 'facil', 'operadores'),
(484, '!(5 < 2) resulta em:', 'verdadeiro', 'falso', '5', '2', 1, 'facil', 'operadores'),
(485, '(3 + 2) * (4 + 1) resulta em:', '15', '25', '20', '10', 2, 'facil', 'operadores'),
(486, '(4 == 4) && (6 != 7) resulta em:', 'falso', 'verdadeiro', '6', '4', 2, 'facil', 'operadores'),
(487, '10 % 6 resulta em:', '2', '4', '0', '6', 2, 'facil', 'operadores'),
(488, '(3 > 1) || (2 == 5) resulta em:', 'falso', 'verdadeiro', '3', '2', 2, 'facil', 'operadores'),
(489, '(7 + 2) * 3 resulta em:', '21', '27', '30', '25', 2, 'facil', 'operadores'),
(490, '(8 >= 8) && (5 < 7) resulta em:', 'verdadeiro', 'falso', '5', '7', 1, 'facil', 'operadores'),
(491, '(9 % 4) resulta em:', '2', '1', '4', '5', 2, 'facil', 'operadores'),
(492, '!(2 == 2) resulta em:', 'falso', 'verdadeiro', '2', '0', 1, 'facil', 'operadores'),
(493, '(7 / 2) em divisão inteira resulta em:', '3', '4', '2', '5', 1, 'facil', 'operadores'),
(494, '(6 != 6) resulta em:', 'verdadeiro', 'falso', '6', '0', 2, 'facil', 'operadores'),
(495, '(9 > 3) && !(4 < 2) resulta em:', 'falso', 'verdadeiro', '9', '3', 2, 'facil', 'operadores'),
(496, '(5 + 5) % 4 resulta em:', '1', '2', '3', '4', 1, 'facil', 'operadores'),
(497, '(3 < 5) || (6 > 7) resulta em:', 'falso', 'verdadeiro', '3', '6', 2, 'facil', 'operadores'),
(498, '(10 - 2) * (2 + 3) resulta em:', '50', '48', '40', '45', 1, 'facil', 'operadores'),
(499, '(7 <= 7) && (3 >= 2) resulta em:', 'verdadeiro', 'falso', '7', '3', 1, 'facil', 'operadores'),
(500, '(8 % 5) resulta em:', '3', '5', '0', '8', 1, 'facil', 'operadores'),
(501, '(9 + 3) / 3 resulta em:', '4', '3', '5', '6', 1, 'facil', 'operadores'),
(502, '(5 > 2) && (7 < 10) resulta em:', 'verdadeiro', 'falso', '5', '7', 1, 'facil', 'operadores'),
(503, '(10 != 10) resulta em:', 'verdadeiro', 'falso', '10', '0', 2, 'facil', 'operadores'),
(504, '(7 % 2) resulta em:', '0', '1', '2', '7', 2, 'facil', 'operadores'),
(505, '(4 + 6) * 2 resulta em:', '18', '20', '22', '16', 2, 'facil', 'operadores'),
(506, '(5 <= 5) && (6 != 5) resulta em:', 'falso', 'verdadeiro', '5', '6', 2, 'facil', 'operadores'),
(507, '(9 / 3) resulta em:', '2', '3', '4', '6', 2, 'facil', 'operadores'),
(508, '!(5 > 10) resulta em:', 'falso', 'verdadeiro', '5', '10', 2, 'facil', 'operadores'),
(509, '(6 % 2) resulta em:', '1', '0', '2', '6', 2, 'facil', 'operadores'),
(510, '(3 + 4) * (2 + 1) resulta em:', '21', '18', '24', '16', 1, 'facil', 'operadores'),
(511, '(7 == 7) && (2 != 3) resulta em:', 'falso', 'verdadeiro', '2', '7', 2, 'facil', 'operadores'),
(512, '(9 % 3) resulta em:', '0', '1', '3', '6', 1, 'facil', 'operadores'),
(513, '(6 / 2) + 5 resulta em:', '7', '8', '6', '9', 1, 'facil', 'operadores'),
(514, '(8 != 9) resulta em:', 'verdadeiro', 'falso', '8', '9', 1, 'facil', 'operadores'),
(515, '(4 * 2) + 6 resulta em:', '12', '14', '16', '18', 2, 'facil', 'operadores'),
(516, '(10 >= 5) && (6 < 9) resulta em:', 'verdadeiro', 'falso', '10', '6', 1, 'facil', 'operadores'),
(517, '(7 % 4) resulta em:', '1', '2', '3', '4', 3, 'facil', 'operadores'),
(518, '(5 + 2) * (3 - 1) resulta em:', '10', '14', '12', '16', 2, 'facil', 'operadores'),
(519, '(8 != 8) resulta em:', 'verdadeiro', 'falso', '8', '0', 2, 'facil', 'operadores'),
(520, '(4 + 5) % 3 resulta em:', '2', '1', '3', '0', 1, 'facil', 'operadores'),
(561, 'Qual palavra-chave inicia uma estrutura condicional?', 'loop', 'for', 'if', 'case', 3, 'facil', 'condicionais'),
(562, 'Qual palavra usamos para tratar o caso contrário de um if?', 'case', 'default', 'else', 'switch', 3, 'facil', 'condicionais'),
(563, 'Qual estrutura permite verificar várias opções com base em um valor?', 'if', 'else', 'switch', 'loop', 3, 'facil', 'condicionais'),
(564, 'Qual operador lógico é comumente usado em um if?', '+', '&&', '*', '%', 2, 'facil', 'condicionais'),
(565, 'Em qual situação um bloco else é executado?', 'Quando a condição do if é verdadeira', 'Quando a condição do if é falsa', 'Quando o programa inicia', 'Sempre', 2, 'facil', 'condicionais'),
(566, 'Em um switch, qual palavra trata o caso padrão?', 'if', 'else', 'default', 'for', 3, 'facil', 'condicionais'),
(567, 'Qual estrutura permite escolher entre duas alternativas?', 'switch', 'if/else', 'for', 'case', 2, 'facil', 'condicionais'),
(568, 'Qual é o formato correto de um if simples?', 'if (condição)', 'if {condição}', 'case (condição)', 'else (condição)', 1, 'facil', 'condicionais'),
(569, 'No switch, cada opção é indicada por:', 'else', 'case', 'default', 'if', 2, 'facil', 'condicionais'),
(570, 'Qual é o comportamento de um switch sem break entre os case?', 'Não executa nada', 'Executa apenas o primeiro', 'Executa em cascata', 'Gera erro', 3, 'facil', 'condicionais'),
(571, 'Qual operador relacional é usado em if para \"igual a\"?', '=', '==', '!=', '>=', 2, 'facil', 'condicionais'),
(572, 'Qual comando geralmente fecha um case no switch?', 'else', 'break', 'if', 'return', 2, 'facil', 'condicionais'),
(573, 'Qual parte do if/else é opcional?', 'if', 'else', 'condição', 'bloco de código', 2, 'facil', 'condicionais'),
(574, 'Um switch funciona apenas com:', 'condições booleanas', 'valores inteiros, caracteres ou equivalentes', 'operadores lógicos', 'loops', 2, 'facil', 'condicionais'),
(575, 'Qual será o comportamento se a condição do if for verdadeira?', 'O else é executado', 'O bloco do if é executado', 'Nada acontece', 'O programa para', 2, 'facil', 'condicionais'),
(576, 'Qual operador podemos usar para criar um if com múltiplas condições?', '&&', '==', '%', '/', 1, 'facil', 'condicionais'),
(577, 'A estrutura if (condição) { } else { } serve para:', 'fazer loops', 'repetir código', 'executar código dependendo da condição', 'armazenar variáveis', 3, 'facil', 'condicionais'),
(578, 'Qual valor faz o if (false) não ser executado?', 'true', '1', 'false', '!=', 3, 'facil', 'condicionais'),
(579, 'Um switch pode substituir:', 'um laço for', 'um if com múltiplos else if', 'um while', 'um break', 2, 'facil', 'condicionais'),
(580, 'Qual é o operador para \"diferente de\" em um if?', '=', '==', '!=', '<=', 3, 'facil', 'condicionais'),
(581, 'O que acontece se a condição no if for falsa e não existir um else?', 'Gera erro', 'Executa o else padrão', 'Não executa nenhum bloco', 'Executa tudo', 3, 'facil', 'condicionais'),
(582, 'Qual estrutura condicional permite mais de duas opções?', 'if', 'else', 'if/else if', 'for', 3, 'facil', 'condicionais'),
(583, 'Em um switch, se nenhum case for verdadeiro e não houver default, o que acontece?', 'Executa tudo', 'Gera erro', 'Não executa nada', 'Executa o primeiro case', 3, 'facil', 'condicionais'),
(584, 'Qual a função da palavra break no switch?', 'Iniciar o case', 'Ignorar o case', 'Finalizar o case atual', 'Saltar para o default', 3, 'facil', 'condicionais'),
(585, 'Qual estrutura permite comparar valores numéricos e de texto?', 'if', 'for', 'while', 'switch', 1, 'facil', 'condicionais'),
(586, 'O que é obrigatório em um if?', 'Um else', 'Um switch', 'Uma condição', 'Um break', 3, 'facil', 'condicionais'),
(587, 'Qual estrutura condicional permite o uso de operadores lógicos?', 'for', 'while', 'switch', 'if', 4, 'facil', 'condicionais'),
(588, 'Um switch bem estruturado sempre deve conter:', 'um if', 'um else', 'pelo menos um case', 'um loop', 3, 'facil', 'condicionais'),
(589, 'O que acontece se a condição do if for true?', 'O código no if será executado', 'O código do else será executado', 'O programa para', 'O switch é acionado', 1, 'facil', 'condicionais'),
(590, 'No switch, o default é:', 'obrigatório', 'opcional', 'sempre no início', 'sempre no fim e obrigatório', 2, 'facil', 'condicionais'),
(591, 'Qual das estruturas abaixo NÃO é uma condicional?', 'if', 'else', 'while', 'switch', 3, 'facil', 'condicionais'),
(592, 'Qual operador lógico é usado para representar OU?', '&&', '==', '||', '!=', 3, 'facil', 'condicionais'),
(593, 'Qual valor faz a condição de um if ser executada?', 'false', '0', 'true', 'vazio', 3, 'facil', 'condicionais'),
(594, 'Qual palavra reservada podemos usar para várias alternativas seguidas de if?', 'else', 'else if', 'switch', 'for', 2, 'facil', 'condicionais'),
(595, 'Qual estrutura é melhor para comparar faixas de valores?', 'switch', 'else', 'if', 'case', 3, 'facil', 'condicionais'),
(596, 'Qual comando finaliza um case no switch?', 'if', 'else', 'break', 'continue', 3, 'facil', 'condicionais'),
(597, 'O que um if/else permite fazer?', 'Repetir um código', 'Escolher entre executar ou não um bloco', 'Comparar strings apenas', 'Substituir loops', 2, 'facil', 'condicionais'),
(598, 'Qual tipo de valor pode ser usado no switch em muitas linguagens?', 'Booleano', 'Texto', 'Inteiro', 'Lista', 3, 'facil', 'condicionais'),
(599, 'Se temos if (condição) { } else { }, qual parte é obrigatória?', 'else', 'break', 'if', 'for', 3, 'facil', 'condicionais'),
(600, 'Qual estrutura facilita a escrita de muitos if/else seguidos?', 'for', 'switch', 'break', 'while', 2, 'facil', 'condicionais'),
(601, 'Qual estrutura condicional permite tratar exceções de valores no switch?', 'if', 'case', 'default', 'else', 3, 'facil', 'condicionais'),
(602, 'Qual tipo de variável é mais comum em uma condição if?', 'lista', 'número ou booleano', 'função', 'objeto', 2, 'facil', 'condicionais'),
(603, 'O que acontece se o switch não tem break entre case?', 'Executa todos os cases', 'Executa só o primeiro', 'Não executa nada', 'Gera erro', 1, 'facil', 'condicionais'),
(604, 'Qual palavra reservada permite mais de dois caminhos em um if?', 'if', 'else if', 'else', 'switch', 2, 'facil', 'condicionais'),
(605, 'Um if/else sempre deve conter:', 'pelo menos um if', 'um switch', 'um case', 'um default', 1, 'facil', 'condicionais'),
(606, 'No switch, se nenhum case casar e não houver default, o que acontece?', 'Gera erro', 'Executa o primeiro case', 'Não executa nada', 'Executa o else', 3, 'facil', 'condicionais'),
(607, 'Qual operador permite combinar múltiplas condições em um if?', '||', '==', '%', '*', 1, 'facil', 'condicionais'),
(608, 'Qual estrutura é mais recomendada para verificar intervalos de valores?', 'switch', 'else', 'if', 'case', 3, 'facil', 'condicionais'),
(609, 'O que acontece se um if for verdadeiro?', 'Executa o bloco do else', 'Não executa nada', 'Executa o bloco do if', 'Gera erro', 3, 'facil', 'condicionais'),
(610, 'Qual é o formato correto para um case dentro de um switch?', 'if (valor)', 'case valor:', 'switch valor:', 'else valor', 2, 'facil', 'condicionais'),
(611, 'Um if pode existir sem else?', 'não', 'sim', 'depende', 'gera erro', 2, 'facil', 'condicionais'),
(612, 'Qual estrutura é mais apropriada para tratar várias faixas de idade?', 'switch', 'if', 'while', 'case', 2, 'facil', 'condicionais'),
(613, 'Qual operador é usado para comparar se um valor é igual no if?', '=', '==', '!=', '>=', 2, 'facil', 'condicionais'),
(614, 'Qual a finalidade de um default no switch?', 'Executar caso nenhum case seja verdadeiro', 'Executar antes do primeiro case', 'Encerrar o switch', 'Gera erro', 1, 'facil', 'condicionais'),
(615, 'Se você precisa comparar string com várias opções, deve usar:', 'for', 'if/else', 'case', 'break', 2, 'facil', 'condicionais'),
(616, 'No if (condição), o que deve ser a condição?', 'um número sempre', 'um valor booleano', 'uma string', 'um loop', 2, 'facil', 'condicionais'),
(617, 'É possível usar else if depois de um if?', 'Não', 'Sim', 'Só em C++', 'Gera erro', 2, 'facil', 'condicionais'),
(618, 'Em um switch, o break serve para:', 'quebrar um loop', 'encerrar um case', 'pular um case', 'executar o else', 2, 'facil', 'condicionais'),
(619, 'Qual estrutura é mais legível quando temos muitas opções fixas?', 'if', 'else', 'switch', 'while', 3, 'facil', 'condicionais'),
(620, 'Qual operador lógico é usado para representar \"E\" (AND)?', '&&', '||', '==', '!=', 1, 'facil', 'condicionais'),
(621, 'O que acontece se a condição do if for falsa e não existir else?', 'Executa default', 'Não executa nada', 'Executa if', 'Executa tudo', 2, 'facil', 'condicionais'),
(622, 'Qual estrutura condicional permite usar operadores relacionais e lógicos juntos?', 'switch', 'if', 'for', 'while', 2, 'facil', 'condicionais'),
(623, 'Qual operador podemos usar no if para verificar se duas condições são verdadeiras?', '&&', '==', '||', '%', 1, 'facil', 'condicionais'),
(624, 'Se temos if (idade >= 18), o bloco será executado quando:', 'idade for 18 ou mais', 'idade for menor que 18', 'idade for 0', 'nunca', 1, 'facil', 'condicionais'),
(625, 'Qual é o papel do else?', 'Iniciar um loop', 'Tratar a condição falsa do if', 'Encerrar um if', 'Substituir o case', 2, 'facil', 'condicionais'),
(626, 'Qual comando podemos usar após vários else if?', 'switch', 'break', 'else', 'for', 3, 'facil', 'condicionais'),
(627, 'O que acontece se não colocar break nos case de um switch?', 'Executa apenas um', 'Não executa', 'Executa em cascata', 'Gera erro', 3, 'facil', 'condicionais'),
(628, 'O que sempre deve existir em um if?', 'else', 'break', 'uma condição', 'um case', 3, 'facil', 'condicionais'),
(629, 'Qual palavra reservada é usada para comparar mais de duas faixas de valor?', 'else', 'else if', 'case', 'switch', 2, 'facil', 'condicionais'),
(630, 'Qual palavra permite tratar qualquer outro valor no switch?', 'if', 'else', 'default', 'break', 3, 'facil', 'condicionais'),
(631, 'Qual operador podemos usar para verificar \"OU\" no if?', '&&', '||', '==', '%', 2, 'facil', 'condicionais'),
(632, 'Qual estrutura é mais simples para duas opções (verdadeiro/falso)?', 'switch', 'else if', 'if/else', 'while', 3, 'facil', 'condicionais'),
(633, 'Um switch sempre precisa de um:', 'if', 'else', 'case', 'break', 3, 'facil', 'condicionais'),
(634, 'É possível usar switch com strings em algumas linguagens?', 'Não', 'Sim', 'Só com números', 'Só em C++', 2, 'facil', 'condicionais'),
(635, 'Qual estrutura condicional é mais flexível para comparações complexas?', 'switch', 'if', 'case', 'else', 2, 'facil', 'condicionais'),
(636, 'Qual a finalidade de um break no switch?', 'Finalizar um loop', 'Finalizar um case', 'Iniciar o default', 'Ignorar um case', 2, 'facil', 'condicionais'),
(637, 'Podemos ter if dentro de outro if?', 'Não', 'Sim', 'Gera erro', 'Só com case', 2, 'facil', 'condicionais'),
(638, 'Qual palavra reservada é obrigatória em um if?', 'break', 'else', 'if', 'case', 3, 'facil', 'condicionais'),
(639, 'Um switch é ideal para:', 'Comparar intervalos', 'Comparar muitos valores fixos', 'Repetir código', 'Verificar true/false', 2, 'facil', 'condicionais'),
(640, 'Podemos usar if aninhado (um dentro do outro)?', 'Não', 'Sim', 'Gera erro', 'Só em Java', 2, 'facil', 'condicionais'),
(641, 'Qual parte do if é opcional?', 'a condição', 'o else', 'o bloco', 'o if', 2, 'facil', 'condicionais'),
(642, 'Qual operador é usado para \"igual a\" em um if?', '=', '==', '!=', '>=', 2, 'facil', 'condicionais'),
(643, 'O que acontece se a condição do if for false e não houver else?', 'Executa tudo', 'Executa else automático', 'Não executa nada', 'Gera erro', 3, 'facil', 'condicionais'),
(644, 'O que acontece se o switch não tiver default e nenhum case for válido?', 'Executa primeiro case', 'Executa o último case', 'Não executa nada', 'Gera erro', 3, 'facil', 'condicionais'),
(645, 'Podemos usar mais de um else if em uma estrutura?', 'Não', 'Sim', 'Só em Python', 'Só em Java', 2, 'facil', 'condicionais'),
(646, 'Qual estrutura é usada quando temos várias condições em cascata?', 'while', 'switch', 'if/else if', 'for', 3, 'facil', 'condicionais'),
(647, 'Qual operador permite comparar se duas condições são verdadeiras?', '||', '&&', '==', '!=', 2, 'facil', 'condicionais'),
(648, 'Qual operador permite \"ou\" (OR) entre condições?', '&&', '||', '==', '!=', 2, 'facil', 'condicionais'),
(649, 'No switch, o case é:', 'um loop', 'uma condição', 'um operador', 'um else', 2, 'facil', 'condicionais'),
(650, 'Qual estrutura permite criar um menu com opções numéricas de forma simples?', 'if', 'else if', 'switch', 'for', 3, 'facil', 'condicionais'),
(651, 'Qual comando finaliza um case no switch?', 'continue', 'break', 'else', 'return', 2, 'facil', 'condicionais'),
(652, 'Qual estrutura permite comparar intervalos variáveis?', 'switch', 'if', 'case', 'break', 2, 'facil', 'condicionais'),
(653, 'Um switch funciona melhor com:', 'condições booleanas', 'valores fixos', 'loops', 'listas', 2, 'facil', 'condicionais'),
(654, 'Qual estrutura facilita comparar várias faixas de idade?', 'switch', 'if', 'case', 'break', 2, 'facil', 'condicionais'),
(655, 'Qual operador é usado para verificar \"diferente de\" em um if?', '=', '==', '!=', '>=', 3, 'facil', 'condicionais'),
(656, 'Um if dentro de outro if se chama:', 'else aninhado', 'if aninhado', 'switch', 'loop', 2, 'facil', 'condicionais'),
(657, 'Podemos ter um switch dentro de outro switch?', 'Não', 'Sim', 'Só em C++', 'Só em Java', 2, 'facil', 'condicionais'),
(658, 'O default em um switch é:', 'obrigatório', 'opcional', 'só no início', 'só no final e obrigatório', 2, 'facil', 'condicionais'),
(659, 'Qual estrutura é ideal quando temos vários valores fixos a comparar?', 'if', 'else', 'switch', 'for', 3, 'facil', 'condicionais'),
(660, 'Se temos if (idade >= 60), isso testa:', 'se idade é menor que 60', 'se idade é igual a 60', 'se idade é maior ou igual a 60', 'se idade é diferente de 60', 3, 'facil', 'condicionais'),
(661, 'Qual estrutura permite verificar condição verdadeira ou falsa?', 'for', 'if', 'switch', 'while', 2, 'facil', 'condicionais'),
(662, 'O switch compara:', 'intervalos', 'valores fixos', 'loops', 'listas', 2, 'facil', 'condicionais'),
(663, 'No if, qual valor torna a condição verdadeira?', '0', 'false', 'true', '-1', 3, 'facil', 'condicionais'),
(664, 'Podemos usar else sozinho sem if?', 'Não', 'Sim', 'Só em Python', 'Só em Java', 1, 'facil', 'condicionais'),
(665, 'O que é executado se nenhum case corresponder e houver default?', 'Gera erro', 'Executa o default', 'Executa primeiro case', 'Não executa nada', 2, 'facil', 'condicionais'),
(666, 'Qual estrutura permite criar menus interativos simples?', 'if/else if', 'switch', 'for', 'while', 2, 'facil', 'condicionais'),
(667, 'Podemos usar if dentro de um switch?', 'Não', 'Sim', 'Só em C++', 'Só em Java', 2, 'facil', 'condicionais'),
(668, 'Qual operador podemos usar no if para duas condições?', '=', '==', '&&', '%', 3, 'facil', 'condicionais'),
(669, 'Qual estrutura permite criar várias opções fixas?', 'if', 'else', 'switch', 'while', 3, 'facil', 'condicionais'),
(670, 'Qual palavra reservada permite tratar o contrário do if?', 'case', 'switch', 'else', 'break', 3, 'facil', 'condicionais'),
(671, 'Qual parte de um if/else é opcional?', 'if', 'condição', 'else', 'bloco', 3, 'facil', 'condicionais'),
(672, 'Qual operador é usado para comparar igualdade?', '=', '==', '!=', '>=', 2, 'facil', 'condicionais'),
(673, 'Podemos ter quantos else if quisermos?', 'Não', 'Sim', 'No máximo 2', 'No máximo 3', 2, 'facil', 'condicionais'),
(674, 'Podemos colocar um switch dentro de um if?', 'Não', 'Sim', 'Só em C++', 'Só em Python', 2, 'facil', 'condicionais'),
(675, 'O switch funciona melhor com:', 'intervalos', 'valores fixos', 'listas', 'booleanos', 2, 'facil', 'condicionais'),
(676, 'Qual estrutura permite combinar múltiplas condições?', 'switch', 'if', 'case', 'for', 2, 'facil', 'condicionais'),
(677, 'Qual operador permite comparar \"OU\"?', '&&', '||', '==', '!=', 2, 'facil', 'condicionais'),
(678, 'Qual estrutura é mais flexível para comparar intervalos?', 'switch', 'if', 'case', 'for', 2, 'facil', 'condicionais'),
(679, 'Qual operador é usado para \"diferente de\"?', '=', '==', '!=', '>=', 3, 'facil', 'condicionais'),
(680, 'Podemos aninhar quantos if quisermos?', 'Não', 'No máximo 2', 'No máximo 3', 'Sim, quantos quisermos', 4, 'facil', 'condicionais'),
(681, 'O que acontece nesta expressão: if (x > 5 && y < 10)?', 'Executa se x for maior que 5 OU y menor que 10', 'Executa se ambas forem verdadeiras', 'Executa se uma for falsa', 'Sempre executa', 2, 'dificil', 'condicionais'),
(682, 'O que acontece se um if não tiver chaves {} e conter múltiplas linhas?', 'Executa todas', 'Executa só a primeira linha', 'Gera erro', 'Executa nenhuma', 2, 'dificil', 'condicionais'),
(683, 'No switch, o que acontece se esquecer break?', 'Gera erro', 'Apenas o primeiro case executa', 'Executa em cascata', 'Ignora todos os case', 3, 'dificil', 'condicionais'),
(684, 'O que é um if aninhado?', 'Um if dentro de um switch', 'Um if dentro de um if', 'Um switch dentro de um switch', 'Um if com else if', 2, 'dificil', 'condicionais'),
(685, 'Qual o resultado deste trecho:\nif (x > 5) if (y < 3) z = 10; else z = 5;', 'O else pertence ao primeiro if', 'O else pertence ao segundo if', 'O else não pertence a nenhum', 'Erro de sintaxe', 2, 'dificil', 'condicionais'),
(686, 'Podemos colocar um switch dentro de um case de outro switch?', 'Não', 'Sim', 'Apenas em C++', 'Apenas em Java', 2, 'dificil', 'condicionais'),
(687, 'Um switch sempre precisa de um break?', 'Não, é opcional', 'Sim, obrigatório', 'Depende da linguagem', 'Depende do número de case', 1, 'dificil', 'condicionais'),
(688, 'Um if com else if sem else final gera erro?', 'Sim', 'Não', 'Só em Python', 'Só em Java', 2, 'dificil', 'condicionais'),
(689, 'Quantos else if podem existir após um if?', 'No máximo 2', 'No máximo 3', 'No máximo 10', 'Quantos quiser', 4, 'dificil', 'condicionais'),
(690, 'Qual valor da variável após:\nint x = 4; if (x > 5) x = 10; else x = x + 2;', '6', '10', '4', 'Erro', 1, 'dificil', 'condicionais'),
(691, 'No switch, é obrigatório que default seja o último?', 'Sim', 'Não', 'Só em C', 'Só em C++', 2, 'dificil', 'condicionais'),
(692, 'Qual é a ordem de execução em:\nif (cond1) if (cond2) A; else B;', 'Sempre A', 'Sempre B', 'O else pertence ao segundo if', 'O else pertence ao primeiro if', 3, 'dificil', 'condicionais'),
(693, 'Qual o resultado de:\nif (x > 0 && x < 10 || x == 20)', 'true se x for entre 0 e 10 ou igual a 20', 'true apenas se x == 20', 'true apenas se x > 0', 'Nunca true', 1, 'dificil', 'condicionais'),
(694, 'É permitido misturar if com switch no mesmo bloco de código?', 'Não', 'Sim', 'Só em C++', 'Só em Python', 2, 'dificil', 'condicionais'),
(695, 'O que acontece se dois case em um switch tiverem o mesmo valor?', 'Executa ambos', 'Erro de compilação', 'Ignora o segundo', 'Executa apenas o primeiro', 2, 'dificil', 'condicionais'),
(696, 'Qual é o fluxo de execução:\nif (x > 0) if (y > 0) print(\"A\"); else print(\"B\");', 'Sempre A', 'Sempre B', 'Depende de y', 'Depende de x', 3, 'dificil', 'condicionais'),
(697, 'Podemos ter switch aninhado dentro de if aninhado?', 'Não', 'Sim', 'Apenas em C++', 'Apenas em Python', 2, 'dificil', 'condicionais'),
(698, 'Qual a vantagem de switch em relação a vários if?', 'Mais lento', 'Mais legível', 'Mais complexo', 'Não tem vantagem', 2, 'dificil', 'condicionais'),
(699, 'Em que caso if é melhor que switch?', 'Quando temos valores fixos', 'Quando temos intervalos', 'Quando temos apenas true/false', 'Quando temos listas', 2, 'dificil', 'condicionais'),
(700, 'O que acontece se o switch não tiver break e o default for no meio?', 'Não executa nada', 'Executa tudo após default', 'Executa apenas até default', 'Gera erro', 2, 'dificil', 'condicionais'),
(701, 'O que acontece em:\nif (a > b) if (c > d) X; else Y;', 'else sempre executa', 'else pertence ao segundo if', 'else pertence ao primeiro if', 'Erro', 2, 'dificil', 'condicionais'),
(702, 'O default de um switch é obrigatório?', 'Sim', 'Não', 'Só em C++', 'Só em Java', 2, 'dificil', 'condicionais'),
(703, 'Qual o comportamento esperado:\nswitch (x) { case 1: case 2: y = 10; break; }', 'Apenas para x == 1', 'Apenas para x == 2', 'Para x == 1 ou x == 2', 'Gera erro', 3, 'dificil', 'condicionais'),
(704, 'Um if aninhado pode conter outro if com else?', 'Não', 'Sim', 'Só em C++', 'Só em Java', 2, 'dificil', 'condicionais'),
(705, 'Qual o comportamento:\nif (a > 5 || b < 3)', 'Executa se ambos forem verdadeiros', 'Executa se qualquer um for verdadeiro', 'Executa sempre', 'Nunca executa', 2, 'dificil', 'condicionais'),
(706, 'Em um switch, se não tiver break, acontece:', 'Gera erro', 'Executa apenas o case', 'Executa em cascata', 'Executa o default', 3, 'dificil', 'condicionais'),
(707, 'Podemos colocar return dentro de um case?', 'Não', 'Sim', 'Só em C++', 'Só em Java', 2, 'dificil', 'condicionais'),
(708, 'Qual fluxo ocorre:\nif (x > 10 && y < 5)', 'Executa se ambos forem verdadeiros', 'Executa se um for falso', 'Executa se x > 10', 'Executa se y < 5', 1, 'dificil', 'condicionais'),
(709, 'Qual operador é usado para \"OU\" em if?', '&&', '||', '==', '!=', 2, 'dificil', 'condicionais'),
(710, 'Em um switch, o que acontece com case sem break?', 'Executa até final', 'Gera erro', 'Não executa', 'Executa primeiro apenas', 1, 'dificil', 'condicionais'),
(711, 'Qual o comportamento de else if após if falso?', 'Sempre executa', 'Só executa se a condição for verdadeira', 'Nunca executa', 'Gera erro', 2, 'dificil', 'condicionais'),
(712, 'Podemos usar if dentro de case?', 'Não', 'Sim', 'Só em C++', 'Só em Python', 2, 'dificil', 'condicionais'),
(713, 'Qual a vantagem de usar switch?', 'Melhor para intervalos', 'Melhor para muitos valores fixos', 'Mais rápido que if', 'Não tem vantagem', 2, 'dificil', 'condicionais'),
(714, 'Qual a vantagem de if?', 'Melhor para valores fixos', 'Melhor para condições complexas', 'Melhor para listas', 'Melhor para strings', 2, 'dificil', 'condicionais'),
(715, 'Em switch (x) { case 1: case 2: default: y = 10; break; }, quando y = 10?', 'x == 1', 'x == 2', 'Outro valor', 'Qualquer valor', 4, 'dificil', 'condicionais'),
(716, 'Qual a vantagem do default?', 'Substitui if', 'Garante tratamento de casos não previstos', 'Gera erro se não usado', 'Torna o código mais lento', 2, 'dificil', 'condicionais'),
(717, 'Qual é mais flexível?', 'if', 'switch', 'case', 'else', 1, 'dificil', 'condicionais'),
(718, 'Qual estrutura permite aninhamento ilimitado?', 'switch', 'if', 'case', 'else', 2, 'dificil', 'condicionais'),
(719, 'É permitido misturar switch e if?', 'Não', 'Sim', 'Só em C++', 'Só em Java', 2, 'dificil', 'condicionais'),
(720, 'Qual estrutura é ideal para menus fixos?', 'if', 'switch', 'else', 'while', 2, 'dificil', 'condicionais'),
(721, 'Qual palavra-chave inicia um laço que testa a condição antes de entrar?', 'do', 'while', 'for', 'switch', 2, 'facil', 'laços'),
(722, 'Qual laço sempre executa pelo menos uma vez?', 'while', 'for', 'do...while', 'if', 3, 'facil', 'laços'),
(723, 'Qual laço é mais adequado para contagem controlada?', 'while', 'do...while', 'for', 'switch', 3, 'facil', 'laços'),
(724, 'No for, a variável de controle é:', 'definida fora do laço', 'definida dentro do parênteses', 'não existe', 'é opcional', 2, 'facil', 'laços'),
(725, 'O laço while é executado:', 'até a variável ser falsa', 'até a variável ser verdadeira', 'uma vez', 'nunca', 1, 'facil', 'laços'),
(726, 'Qual estrutura se usa para repetir um bloco enquanto uma condição for verdadeira?', 'if', 'for', 'while', 'switch', 3, 'facil', 'laços'),
(727, 'Em qual laço a condição é verificada no final?', 'for', 'while', 'do...while', 'if', 3, 'facil', 'laços'),
(728, 'Qual comando encerra imediatamente um laço?', 'continue', 'break', 'stop', 'return', 2, 'facil', 'laços'),
(729, 'Em um for (int i = 0; i < 10; i++), quantas vezes o laço executa?', '9', '10', '11', 'indefinido', 2, 'facil', 'laços'),
(730, 'Qual parte do for é responsável por atualizar a variável de controle?', 'primeira parte', 'segunda parte', 'terceira parte', 'fora do laço', 3, 'facil', 'laços'),
(731, 'Qual laço é recomendado quando o número de repetições é conhecido?', 'while', 'do...while', 'for', 'if', 3, 'facil', 'laços'),
(732, 'O que acontece se a condição de um while for sempre verdadeira?', 'não executa', 'executa uma vez', 'gera erro', 'cria um laço infinito', 4, 'facil', 'laços'),
(733, 'O laço do...while é garantido que execute:', 'nenhuma vez', 'pelo menos uma vez', 'exatamente 10 vezes', 'se a variável for false', 2, 'facil', 'laços'),
(734, 'Qual palavra-chave permite pular uma iteração do laço?', 'break', 'return', 'continue', 'stop', 3, 'facil', 'laços'),
(735, 'Em um for (int i = 5; i <= 10; i++), quantas vezes o laço executa?', '4', '5', '6', '10', 3, 'facil', 'laços'),
(736, 'O laço while verifica a condição:', 'no final', 'no início', 'fora do laço', 'depois do primeiro passo', 2, 'facil', 'laços'),
(737, 'Um laço for possui quantas partes em sua declaração?', '1', '2', '3', '4', 3, 'facil', 'laços'),
(738, 'O que acontece se a condição de um for for sempre falsa?', 'executa uma vez', 'não executa nenhuma vez', 'executa sempre', 'gera erro', 2, 'facil', 'laços'),
(739, 'Qual estrutura pode ser usada para criar um menu de repetição?', 'switch', 'for', 'do...while', 'if', 3, 'facil', 'laços'),
(740, 'O que acontece quando um break é encontrado em um laço?', 'continua normalmente', 'volta ao início', 'pula uma iteração', 'sai do laço imediatamente', 4, 'facil', 'laços'),
(741, 'Qual laço é mais adequado para repetir enquanto uma condição for verdadeira?', 'for', 'do...while', 'while', 'switch', 3, 'facil', 'laços'),
(742, 'Qual é a ordem de execução no do...while?', 'condição → código', 'código → condição', 'só condição', 'só código', 2, 'facil', 'laços'),
(743, 'O for é dividido em:', 'condição, variável, incremento', 'variável, condição, incremento', 'condição, incremento, break', 'inicialização, break, return', 2, 'facil', 'laços'),
(744, 'O que acontece se esquecermos de atualizar a variável no while?', 'erro de compilação', 'laço infinito', 'não executa', 'executa uma vez', 2, 'facil', 'laços'),
(745, 'Qual laço é mais indicado para estruturas com contador?', 'while', 'for', 'do...while', 'switch', 2, 'facil', 'laços'),
(746, 'Qual estrutura garante pelo menos uma execução?', 'for', 'while', 'do...while', 'if', 3, 'facil', 'laços'),
(747, 'O que o comando continue faz no laço?', 'encerra o laço', 'pula uma iteração', 'reinicia o laço', 'ignora a condição', 2, 'facil', 'laços'),
(748, 'No for (int i = 0; i < 5; i++), qual é a última execução de i?', '3', '4', '5', '6', 2, 'facil', 'laços'),
(749, 'Quando um while não é executado nenhuma vez?', 'quando a condição é sempre verdadeira', 'quando a condição é falsa desde o início', 'quando usamos break', 'quando usamos continue', 2, 'facil', 'laços'),
(750, 'Um laço for pode ser infinito se:', 'a condição for sempre verdadeira', 'não houver variável de controle', 'c) não tiver incremento', 'todos acima', 1, 'facil', 'laços'),
(751, 'Qual é a vantagem do for sobre o while?', 'mais flexível', 'mais claro para contadores', 'mais rápido', 'não precisa de condição', 2, 'facil', 'laços'),
(752, 'Qual estrutura é melhor para menus de repetição com opção de sair?', 'for', 'while', 'do...while', 'switch', 3, 'facil', 'laços'),
(753, 'No while (condição), o laço executa quando?', 'sempre', 'condição verdadeira', 'condição falsa', 'nunca', 2, 'facil', 'laços'),
(754, 'Podemos ter while dentro de for?', 'não', 'sim', 'só em C++', 'só em Python', 2, 'facil', 'laços'),
(755, 'O que acontece se um break for usado em um while?', 'laço continua', 'laço é interrompido', 'pula uma vez', 'não faz nada', 2, 'facil', 'laços'),
(756, 'Em um for (i = 0; i < 3; i++), quantas vezes executa?', '2', '3', '4', '5', 2, 'facil', 'laços'),
(757, 'No do...while, a verificação ocorre:', 'no início', 'no final', 'antes de executar', 'nunca', 2, 'facil', 'laços'),
(758, 'Qual é a sintaxe correta de um while?', 'while condição', 'while {condição}', 'while (condição)', 'while condição { }', 3, 'facil', 'laços'),
(759, 'Um for pode ser usado para:', 'repetir um menu', 'repetir até um contador', 'repetir até erro', 'não serve para repetir', 2, 'facil', 'laços'),
(760, 'Qual laço é ideal para repetir até que o usuário peça para sair?', 'for', 'while', 'do...while', 'switch', 3, 'facil', 'laços'),
(761, 'Qual laço é mais indicado quando você não sabe quantas vezes irá repetir?', 'for', 'while', 'c) switch', 'do...while', 2, 'facil', 'laços'),
(762, 'No for (i = 0; i < 5; i++), quando o laço para?', 'i == 5', 'i == 4', 'i == 3', 'nunca', 1, 'facil', 'laços'),
(763, 'Qual comando permite sair imediatamente de um do...while?', 'return', 'break', 'continue', 'stop', 2, 'facil', 'laços'),
(764, 'Um while com condição falsa no início:', 'executa uma vez', 'gera erro', 'não executa', 'entra em loop infinito', 3, 'facil', 'laços'),
(765, 'Podemos ter um for sem incremento?', 'não', 'sim', 'só em C++', 'gera erro', 2, 'facil', 'laços'),
(766, 'No do...while, o laço sempre executa pelo menos:', '2 vezes', '0 vezes', '1 vez', 'depende da condição', 3, 'facil', 'laços'),
(767, 'Qual estrutura é melhor para laço com contador crescente?', 'while', 'for', 'do...while', 'if', 2, 'facil', 'laços'),
(768, 'Podemos ter for dentro de for?', 'não', 'sim', 'só em Java', 'só em C++', 2, 'facil', 'laços'),
(769, 'Qual comando pula para a próxima iteração no for?', 'break', 'return', 'continue', 'skip', 3, 'facil', 'laços'),
(770, 'Um while só para quando:', 'contador acaba', 'condição vira falsa', 'contador vira zero', 'contador vira 10', 2, 'facil', 'laços'),
(771, 'No for, a ordem de execução é:', 'inicialização → condição → incremento', 'condição → incremento → inicialização', 'incremento → condição → inicialização', 'condição → inicialização → incremento', 1, 'facil', 'laços'),
(772, 'Qual laço pode ser usado para validar entrada de usuário?', 'for', 'while', 'switch', 'if', 2, 'facil', 'laços'),
(773, 'No while (x < 10), o laço para quando:', 'x > 10', 'x == 10', 'x == 9', 'x == 5', 2, 'facil', 'laços'),
(774, 'O que acontece se um break for usado no for?', 'laço continua', 'laço para', 'pula uma vez', 'ignora break', 2, 'facil', 'laços'),
(775, 'Qual laço permite executar um menu até opção de sair?', 'for', 'while', 'do...while', 'if', 3, 'facil', 'laços'),
(776, 'Qual parte do for pode ser omitida?', 'nenhuma', 'inicialização', 'condição', 'qualquer uma', 4, 'facil', 'laços'),
(777, 'Qual comando interrompe um while no meio?', 'return', 'break', 'continue', 'stop', 2, 'facil', 'laços'),
(778, 'No for, a variável de controle:', 'nunca muda', 'sempre cresce', 'pode crescer ou diminuir', 'é sempre 0', 3, 'facil', 'laços'),
(779, 'Podemos ter while dentro de do...while?', 'não', 'sim', 'só em C++', 'só em Java', 2, 'facil', 'laços'),
(780, 'Qual laço é usado para repetir com condição no final?', 'for', 'while', 'do...while', 'if', 3, 'facil', 'laços'),
(781, 'O que acontece se um while nunca tiver a condição falsa?', 'executa uma vez', 'não executa', 'entra em loop infinito', 'gera erro', 3, 'facil', 'laços'),
(782, 'O for sempre precisa de incremento?', 'sim', 'não', 'só em C++', 'só em Python', 2, 'facil', 'laços'),
(783, 'Um while com contador decrementando:', 'é possível', 'não é permitido', 'gera erro', 'só em C++', 1, 'facil', 'laços'),
(784, 'Qual laço é mais legível para contagem decrescente?', 'for', 'while', 'do...while', 'if', 1, 'facil', 'laços'),
(785, 'O do...while testa a condição:', 'antes de executar', 'depois de executar', 'nunca', 'antes e depois', 2, 'facil', 'laços'),
(786, 'O comando continue em while faz:', 'sai do laço', 'reinicia o laço', 'pula para próxima iteração', 'gera erro', 3, 'facil', 'laços'),
(787, 'Qual laço é ideal para verificar senha até correta?', 'for', 'while', 'do...while', 'if', 2, 'facil', 'laços'),
(788, 'Um for pode não ter condição?', 'não', 'sim', 'só em C++', 'só em Java', 2, 'facil', 'laços'),
(789, 'Um do...while com condição sempre true faz:', 'laço normal', 'laço infinito', 'não executa', 'gera erro', 2, 'facil', 'laços'),
(790, 'O que acontece se um break estiver no do...while?', 'pula iteração', 'sai do laço', 'reinicia laço', 'ignora', 2, 'facil', 'laços'),
(791, 'Qual laço verifica no início?', 'while', 'do...while', 'for', 'if', 1, 'facil', 'laços'),
(792, 'Qual laço é mais flexível para qualquer tipo de repetição?', 'for', 'while', 'do...while', 'if', 2, 'facil', 'laços'),
(793, 'O for pode não ter incremento?', 'não', 'sim', 'só em C++', 'só em Python', 2, 'facil', 'laços'),
(794, 'Qual laço é melhor para ler uma lista de itens com índice?', 'while', 'for', 'do...while', 'if', 2, 'facil', 'laços'),
(795, 'O que acontece se while (true) for usado?', 'laço normal', 'laço infinito', 'não executa', 'gera erro', 2, 'facil', 'laços'),
(796, 'Podemos aninhar for e while?', 'não', 'sim', 'só em C++', 'só em Java', 2, 'facil', 'laços'),
(797, 'O break funciona em quais laços?', 'while', 'for', 'do...while', 'todos acima', 4, 'facil', 'laços'),
(798, 'Um do...while sem condição:', 'não existe', 'funciona normal', 'gera erro', 'é laço infinito', 1, 'facil', 'laços'),
(799, 'Um for pode ter incremento negativo?', 'não', 'sim', 'só em C++', 'só em Java', 2, 'facil', 'laços'),
(800, 'Qual laço é ideal para repetir até uma entrada válida?', 'for', 'while', 'do...while', 'switch', 3, 'facil', 'laços'),
(801, 'Qual laço é mais usado para varrer um vetor com índice?', 'while', 'for', 'do...while', 'if', 2, 'facil', 'laços'),
(802, 'Qual comando faz o laço encerrar imediatamente?', 'continue', 'break', 'skip', 'return', 2, 'facil', 'laços'),
(803, 'Qual laço executa a condição após rodar uma vez?', 'while', 'do...while', 'for', 'if', 2, 'facil', 'laços'),
(804, 'Qual estrutura permite contagem simples de 1 a 10?', 'for', 'while', 'do...while', 'switch', 1, 'facil', 'laços'),
(805, 'O que acontece se um continue for usado no for?', 'laço para', 'pula para próxima iteração', 'sai do laço', 'gera erro', 2, 'facil', 'laços'),
(806, 'Em um while, se a condição nunca mudar:', 'não executa', 'executa uma vez', 'entra em loop infinito', 'gera erro', 3, 'facil', 'laços'),
(807, 'Qual laço é ideal para controle de tentativas (ex: senha)?', 'for', 'while', 'do...while', 'if', 2, 'facil', 'laços'),
(808, 'Podemos combinar for e while?', 'não', 'sim', 'só em C++', 'só em Python', 2, 'facil', 'laços'),
(809, 'No do...while, o que acontece primeiro?', 'condição', 'execução', 'break', 'continue', 2, 'facil', 'laços'),
(810, 'No for (i = 10; i > 0; i--), o laço faz:', 'contar de 0 a 10', 'contar de 10 a 1', 'contar até 0', 'erro', 2, 'facil', 'laços'),
(811, 'O que acontece se um for não tiver condição?', 'erro', 'loop infinito', 'laço normal', 'não executa', 2, 'facil', 'laços'),
(812, 'Qual comando só pula a iteração atual?', 'return', 'break', 'continue', 'skip', 3, 'facil', 'laços'),
(813, 'Qual laço é melhor para processar lista de alunos com contador?', 'while', 'do...while', 'for', 'if', 3, 'facil', 'laços'),
(814, 'Qual laço é melhor para menu com opção de repetir?', 'while', 'b) do...while', 'for', 'if', 2, 'facil', 'laços'),
(815, 'Qual parte do for verifica a condição?', 'primeira', 'segunda', 'terceira', 'nenhuma', 2, 'facil', 'laços'),
(816, 'Um while sem incremento:', 'gera erro', 'pode causar loop infinito', 'não executa', 'executa uma vez', 2, 'facil', 'laços'),
(817, 'No for (i = 0; i < 5; i++), o laço termina quando:', 'i == 4', 'i == 5', 'i == 3', 'nunca', 2, 'facil', 'laços'),
(818, 'Qual laço é usado para verificar até entrada válida?', 'for', 'while', 'do...while', 'switch', 3, 'facil', 'laços'),
(819, 'Qual laço não garante execução se condição for falsa no início?', 'do...while', 'while', 'for', 'if', 2, 'facil', 'laços'),
(820, 'Um for com i-- faz:', 'contador crescente', 'contador decrescente', 'laço infinito', 'gera erro', 2, 'facil', 'laços'),
(821, 'Qual laço pode ser controlado com uma variável booleana?', 'for', 'while', 'do...while', 'if', 2, 'facil', 'laços'),
(822, 'Qual laço é melhor para executar até condição externa mudar?', 'for', 'while', 'do...while', 'if', 2, 'facil', 'laços'),
(823, 'Podemos usar while (true) para:', 'erro', 'laço infinito', 'pular condição', 'fazer um if', 2, 'facil', 'laços'),
(824, 'Um for com i += 2 faz:', 'conta de 1 em 1', 'conta de 2 em 2', 'conta de 3 em 3', 'laço infinito', 2, 'facil', 'laços'),
(825, 'Qual laço é mais simples para contador?', 'while', 'do...while', 'for', 'if', 3, 'facil', 'laços'),
(826, 'Qual laço é ideal para esperar uma condição externa?', 'for', 'while', 'do...while', 'switch', 2, 'facil', 'laços'),
(827, 'O que acontece se continue for usado em while?', 'laço para', 'laço pula iteração atual', 'laço reinicia', 'gera erro', 2, 'facil', 'laços'),
(828, 'Qual laço verifica a condição no início?', 'do...while', 'while', 'for', 'if', 2, 'facil', 'laços'),
(829, 'Um for pode ser usado para contagem regressiva?', 'não', 'sim', 'só em C++', 'só em Java', 2, 'facil', 'laços'),
(830, 'Qual laço sempre executa ao menos uma vez?', 'while', 'do...while', 'for', 'if', 2, 'facil', 'laços'),
(831, 'Qual comando sai de um laço?', 'return', 'skip', 'break', 'continue', 3, 'facil', 'laços'),
(832, 'Qual laço é melhor para processar cada caractere de uma string?', 'while', 'for', 'do...while', 'switch', 2, 'facil', 'laços'),
(833, 'Qual comando pula uma iteração e volta ao início do laço?', 'break', 'continue', 'return', 'skip', 2, 'facil', 'laços'),
(834, 'Podemos usar break em um for?', 'não', 'sim', 'c) só em C++', 'só em Java', 2, 'facil', 'laços'),
(835, 'Um for pode ser infinito?', 'não', 'sim', 'só com while', 'só com do...while', 2, 'facil', 'laços'),
(836, 'Qual laço é mais usado para menu com opção de sair?', 'for', 'while', 'do...while', 'if', 3, 'facil', 'laços'),
(837, 'No for (i = 0; i < 5; i++), quando i == 5?', 'quando laço termina', 'quando laço inicia', 'nunca', 'na primeira execução', 1, 'facil', 'laços'),
(838, 'Qual laço é melhor para condição que muda com input?', 'for', 'while', 'do...while', 'switch', 2, 'facil', 'laços'),
(839, 'Qual comando encerra qualquer laço?', 'skip', 'continue', 'return', 'break', 4, 'facil', 'laços'),
(840, 'Qual laço garante que código execute ao menos uma vez?', 'for', 'while', 'do...while', 'if', 3, 'facil', 'laços'),
(841, 'O que acontece se um for não tiver condição (ex: for(;;))?', 'Erro de sintaxe', 'Executa uma vez', 'Loop infinito', 'Não executa', 3, 'dificil', 'laços'),
(842, 'Qual a ordem de execução de um for (inicio; condicao; incremento)?', 'Condição → Incremento → Início', 'Início → Condição → Bloco → Incremento → Condição...', 'Bloco → Incremento → Condição → Início', 'Início → Bloco → Incremento', 2, 'dificil', 'laços'),
(843, 'O que acontece no while (false)?', 'Loop infinito', 'Executa uma vez', 'Não executa', 'Gera erro', 3, 'dificil', 'laços'),
(844, 'Qual o resultado de: for(int i=0; i<5; i++) { if(i==2) break; }', 'Loop até i == 5', 'Loop para em i == 2', 'Loop não inicia', 'Loop infinito', 2, 'dificil', 'laços'),
(845, 'Qual a diferença entre while e do...while quando a condição é inicialmente falsa?', 'Ambas não executam', 'Ambas executam uma vez', 'while não executa; do...while executa uma vez', 'Nenhuma diferença', 3, 'dificil', 'laços'),
(846, 'Em um for, qual parte é executada somente uma vez?', 'Condição', 'Incremento', 'Inicialização', 'Bloco', 3, 'dificil', 'laços'),
(847, 'O que acontece em: while (true) { break; }', 'Loop infinito', 'Erro', 'Executa uma vez e sai', 'Nunca executa', 3, 'dificil', 'laços'),
(848, 'Qual o comportamento: for(int i=0; i<10; i+=3)', 'Conta de 1 em 1', 'Conta de 2 em 2', 'Conta de 3 em 3: 0, 3, 6, 9', 'Loop infinito', 3, 'dificil', 'laços'),
(849, 'Qual o comportamento de continue em while?', 'Sai do laço', 'Pula para a próxima verificação da condição', 'Reinicia o laço', 'Ignora condição', 2, 'dificil', 'laços'),
(850, 'Qual laço é mais controlado externamente?', 'for', 'while', 'do...while', 'switch', 2, 'dificil', 'laços'),
(851, 'Qual laço é ideal para leitura até fim de arquivo?', 'for', 'while', 'do...while', 'switch', 2, 'dificil', 'laços'),
(852, 'Em um for, onde colocar continue afeta:', 'Incremento', 'Condição', 'A próxima iteração', 'Inicialização', 3, 'dificil', 'laços'),
(853, 'O que acontece em: do { } while(false);', 'Loop infinito', 'Executa uma vez', 'Não executa', 'Erro', 2, 'dificil', 'laços'),
(854, 'Qual a saída de: for(int i=10; i>=0; i-=2)', 'Não executa', 'Conta de 10 até 0 de 2 em 2', 'Conta até infinito', 'Erro', 2, 'dificil', 'laços'),
(855, 'O que acontece se esquecer incremento no for?', 'Erro', 'Loop infinito se condição nunca muda', 'Não executa', 'Executa uma vez', 2, 'dificil', 'laços'),
(856, 'Qual a vantagem de while (true) com break interno?', 'Nenhuma', 'Controle total de saída dentro do bloco', 'Mais rápido', 'Substitui for', 2, 'dificil', 'laços'),
(857, 'O que acontece se break estiver dentro de for aninhado?', 'Sai do laço externo', 'Sai apenas do laço atual', 'Sai dos dois', 'Gera erro', 2, 'dificil', 'laços'),
(858, 'Qual laço não exige variável de controle?', 'while', 'for', 'do...while', 'todos exigem', 1, 'dificil', 'laços'),
(859, 'Qual saída: for(int i=1; i<=10; i*=2)', 'Não executa', '1, 2, 4, 8', '1, 3, 5, 7', 'Erro', 2, 'dificil', 'laços'),
(860, 'Qual a função de do...while em menus?', 'Não serve', 'Apenas para contadores', 'Permite menu que executa ao menos uma vez', 'Menu infinito', 3, 'dificil', 'laços'),
(861, 'O que acontece: while(x != 0) { x--; }', 'Loop infinito', 'Não executa', 'Diminui x até 0', 'Aumenta x', 3, 'dificil', 'laços'),
(862, 'for(;;) cria:', 'Erro', 'Loop infinito', 'Laço normal', 'Não executa', 2, 'dificil', 'laços'),
(863, 'Em while (x>0), se x == -1:', 'Executa', 'Não executa', 'Erro', 'Executa uma vez', 2, 'dificil', 'laços'),
(864, 'for(int i=0; i<5; ++i) é equivalente a:', 'i--', 'i = i + 1', 'i = i * 2', 'i = i - 1', 2, 'dificil', 'laços'),
(865, 'Qual saída de: do { print(x); x++; } while(x<3); (se x = 1 inicialmente)', '1', '1 2', '1 2 3', 'Nenhuma', 2, 'dificil', 'laços'),
(866, 'O que acontece se continue em for estiver antes do incremento?', 'Não executa', 'Incremento não ocorre', 'Incremento ocorre normalmente', 'Erro', 3, 'dificil', 'laços');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(867, 'Em laço aninhado, quantas iterações em: for i=0 to 2; for j=0 to 2', '3', '6', '9', 'Erro', 3, 'dificil', 'laços'),
(868, 'Qual laço mais flexível para entradas variáveis?', 'for', 'while', 'do...while', 'if', 2, 'dificil', 'laços'),
(869, 'do...while é preferido quando:', 'Entrada já válida', 'Precisa executar uma vez antes de testar', 'Condição externa', 'Loop infinito', 2, 'dificil', 'laços'),
(870, 'Um while (x < 5) com x+=2 executa:', '5 vezes', 'Não executa', '3 vezes (x = 0, 2, 4)', 'Loop infinito', 3, 'dificil', 'laços'),
(871, 'O que acontece se condição de while for alterada no meio?', 'Erro', 'Loop infinito', 'Afeta o comportamento', 'Não muda', 3, 'dificil', 'laços'),
(872, 'Qual comportamento de continue em do...while?', 'Sai do laço', 'Pula para while', 'Erro', 'Volta para início', 2, 'dificil', 'laços'),
(873, 'Laço aninhado serve para:', 'Menus', 'Interface', 'Percorrer estruturas compostas (ex: matriz)', 'Loop infinito', 3, 'dificil', 'laços'),
(874, 'Laço que varre de trás para frente:', 'while', 'for com decremento', 'do...while', 'if', 2, 'dificil', 'laços'),
(875, 'Qual a vantagem do break?', 'Pular iteração', 'Encerrar laço de forma controlada', 'Ignorar condição', 'Laço infinito', 2, 'dificil', 'laços'),
(876, 'for (int i=0; i<10; i+=2) gera:', '1 a 10', '0, 2, 4, 6, 8', '1, 3, 5', 'Erro', 2, 'dificil', 'laços'),
(877, 'Se a condição no while depende de variável externa:', 'Loop infinito', 'Pode sair quando variável mudar', 'Não executa', 'Sempre executa', 2, 'dificil', 'laços'),
(878, 'Um for com break no meio:', 'Sempre executa tudo', 'Pode encerrar antes', 'Executa em ordem inversa', 'Erro', 2, 'dificil', 'laços'),
(879, 'Em while(x>0){x--;}, se x = 3:', 'Não executa', 'Executa 3 vezes', 'Executa 2 vezes', 'Executa 4 vezes', 2, 'dificil', 'laços'),
(880, 'Qual a vantagem de do...while sobre while?', 'Mais rápido', 'Garante execução ao menos uma vez', 'Não precisa de condição', 'Não tem vantagem', 2, 'dificil', 'laços'),
(881, 'O que é um vetor em programação?', 'uma variável booleana', 'uma estrutura condicional', 'uma variável que armazena apenas um valor', 'uma coleção de valores do mesmo tipo', 4, 'facil', 'vetores'),
(882, 'Qual é o índice do primeiro elemento de um vetor em linguagens como C, Java, Python?', '0', '1', '-1', 'depende da linguagem', 1, 'facil', 'vetores'),
(883, 'Um vetor de tamanho 5 possui índices de:', '1 a 5', '-1 a 4', '0 a 4', '0 a 5', 3, 'facil', 'vetores'),
(884, 'Qual a sintaxe correta para acessar o terceiro elemento de um vetor v?', 'v[3]', 'v[2]', 'v(3)', 'v{2}', 2, 'facil', 'vetores'),
(885, 'Qual é o nome correto para um vetor de duas dimensões?', 'conjunto', 'tupla', 'matriz', 'lista', 3, 'facil', 'vetores'),
(886, 'Uma matriz é composta por:', 'uma linha e uma coluna', 'uma única linha', 'um vetor', 'linhas e colunas', 4, 'facil', 'vetores'),
(887, 'Qual é o índice da primeira linha e primeira coluna de uma matriz?', '[1][1]', '[0][0]', '[0][1]', '[1][0]', 2, 'facil', 'vetores'),
(888, 'Um vetor armazena:', 'apenas números inteiros', 'apenas números reais', 'valores do mesmo tipo', 'qualquer tipo misturado', 3, 'facil', 'vetores'),
(889, 'Qual comando percorre um vetor em ordem crescente de índices?', 'if', 'switch', 'for', 'while', 3, 'facil', 'vetores'),
(890, 'Qual laço é mais usado para percorrer uma matriz?', 'if', 'dois for aninhados', 'while', 'switch', 2, 'facil', 'vetores'),
(891, 'Em uma matriz m[3][4], quantas linhas existem?', '4', '3', '7', '12', 2, 'facil', 'vetores'),
(892, 'Em m[3][4], quantas colunas existem?', '3', '4', '7', '12', 2, 'facil', 'vetores'),
(893, 'Quantos elementos tem a matriz m[3][4]?', '3', '4', '7', '12 (3 x 4)', 4, 'facil', 'vetores'),
(894, 'Qual a posição de m[1][2]?', '2ª linha, 3ª coluna', '1ª linha, 2ª coluna', '3ª linha, 2ª coluna', '2ª linha, 2ª coluna', 1, 'facil', 'vetores'),
(895, 'Um vetor pode armazenar:', 'qualquer número de elementos do mesmo tipo', 'só 10 elementos', 'apenas números', 'apenas texto', 1, 'facil', 'vetores'),
(896, 'Como acessar o último elemento de um vetor de tamanho n?', 'v[n]', 'v[n-1]', 'v[n+1]', 'v[0]', 2, 'facil', 'vetores'),
(897, 'Um vetor de inteiros em C é declarado como:', 'vetor int;', 'array int;', 'int vetor[ ];', 'int vetor();', 3, 'facil', 'vetores'),
(898, 'Qual é o índice da última coluna em uma matriz m[5][3]?', '2', '3', '5', '4', 1, 'facil', 'vetores'),
(899, 'Uma matriz em C ou Java é percorrida usando:', 'while', 'dois for aninhados', 'switch', 'if', 2, 'facil', 'vetores'),
(900, 'A função de um vetor é:', 'controlar loops', 'armazenar e acessar elementos por índice', 'criar menus', 'executar funções', 2, 'facil', 'vetores'),
(901, 'Qual estrutura armazena dados em linhas e colunas?', 'vetor', 'função', 'matriz', 'variável simples', 3, 'facil', 'vetores'),
(902, 'Se um vetor tem tamanho 8, seu último índice é:', '7', '8', '6', '9', 1, 'facil', 'vetores'),
(903, 'Qual é o índice da primeira linha em uma matriz?', '1', '0', '-1', 'depende da linguagem', 2, 'facil', 'vetores'),
(904, 'Um vetor é uma estrutura:', 'condicional', 'de controle', 'de dados', 'booleana', 3, 'facil', 'vetores'),
(905, 'Qual estrutura é multidimensional?', 'vetor', 'matriz', 'variável simples', 'função', 2, 'facil', 'vetores'),
(906, 'Qual operador permite acessar elementos do vetor?', '. (ponto)', '-> (seta)', '[ ] (colchetes)', '{ } (chaves)', 3, 'facil', 'vetores'),
(907, 'Qual comando mais usado para preencher um vetor?', 'if', 'while', 'for', 'switch', 3, 'facil', 'vetores'),
(908, 'Uma matriz 3x3 tem quantos elementos?', '6', '9', '3', '12', 2, 'facil', 'vetores'),
(909, 'O que é um array unidimensional?', 'matriz', 'variável', 'vetor', 'função', 3, 'facil', 'vetores'),
(910, 'Como acessar a posição da 2ª linha, 1ª coluna em m[ ][ ]?', 'm[2][1]', 'm[1][0]', 'm[0][1]', 'm[2][0]', 2, 'facil', 'vetores'),
(911, 'Qual comando mais usado para preencher uma matriz?', 'while', 'dois for aninhados', 'switch', 'if', 2, 'facil', 'vetores'),
(912, 'Como somar todos os elementos de um vetor?', 'if', 'while', 'for com acumulador', 'break', 3, 'facil', 'vetores'),
(913, 'Qual a principal vantagem de usar vetores?', 'menos memória', 'menos código', 'acessar rapidamente elementos por índice', 'evitar loops', 3, 'facil', 'vetores'),
(914, 'Uma matriz 4x5 possui:', '9 elementos', '20 elementos', '10 elementos', '25 elementos', 2, 'facil', 'vetores'),
(915, 'Qual índice corresponde à primeira coluna da segunda linha?', '[1][1]', '[1][0]', '[0][1]', '[2][1]', 2, 'facil', 'vetores'),
(916, 'Vetores são usados quando:', 'os dados mudam sempre', 'não sabemos o tipo', 'queremos acessar por chave', 'queremos acessar por índice', 4, 'facil', 'vetores'),
(917, 'Qual comando é mais usado para mostrar os elementos de um vetor?', 'if', 'for', 'break', 'return', 2, 'facil', 'vetores'),
(918, 'Qual o menor número de índices necessários para acessar um elemento da matriz?', '1', '2', '3', '4', 2, 'facil', 'vetores'),
(919, 'Qual a função da matriz?', 'reduzir o código', 'executar funções', 'controlar loops', 'armazenar valores em forma de tabela', 4, 'facil', 'vetores'),
(920, 'Qual índice acessa o primeiro elemento de um vetor?', '1', '0', '-1', 'depende da linguagem', 2, 'facil', 'vetores'),
(921, 'Qual índice corresponde à última linha de uma matriz m[4][5]?', '5', '3', '4', '2', 2, 'facil', 'vetores'),
(922, 'Quantos índices usamos para acessar uma matriz?', '1', '2', '3', '0', 2, 'facil', 'vetores'),
(923, 'Qual estrutura armazena elementos em sequência linear?', 'matriz', 'árvore', 'vetor', 'lista ligada', 3, 'facil', 'vetores'),
(924, 'Qual laço é mais utilizado para percorrer vetor?', 'if', 'switch', 'while', 'for', 4, 'facil', 'vetores'),
(925, 'Quantos elementos possui uma matriz m[5][5]?', '10', '15', '25', '20', 3, 'facil', 'vetores'),
(926, 'Em uma matriz m[3][4], o índice da última coluna é:', '2', '3', '4', '1', 2, 'facil', 'vetores'),
(927, 'Qual comando pode ser usado para zerar um vetor?', 'switch', 'for com atribuição 0', 'break', 'continue', 2, 'facil', 'vetores'),
(928, 'Como declaramos um vetor de 10 inteiros em C?', 'int vetor(10);', 'int vetor[10];', 'int vetor{10};', 'vetor int(10);', 2, 'facil', 'vetores'),
(929, 'Qual comando acessa um elemento de uma matriz?', 'matriz()', 'matriz{}', 'matriz[ ][ ]', 'matriz->', 3, 'facil', 'vetores'),
(930, 'Para acessar um elemento da 3ª linha, 4ª coluna, usamos:', 'm[2][3]', 'm[3][4]', 'm[4][3]', 'm[3][2]', 1, 'facil', 'vetores'),
(931, 'Um array multidimensional é:', 'vetor', 'matriz', 'variável', 'constante', 2, 'facil', 'vetores'),
(932, 'Qual comando é mais usado para preencher matriz com valores?', 'if', 'switch', 'dois for aninhados', 'break', 3, 'facil', 'vetores'),
(933, 'Como acessamos o primeiro elemento da segunda linha?', '[0][1]', '[1][0]', '[1][1]', '[2][1]', 2, 'facil', 'vetores'),
(934, 'Em uma matriz m[2][3], quantas colunas há?', '3', '2', '5', '6', 1, 'facil', 'vetores'),
(935, 'Quantos elementos em m[2][3]?', '3', '5', '6', '4', 3, 'facil', 'vetores'),
(936, 'Um vetor é um:', 'loop', 'função', 'array unidimensional', 'variável composta', 3, 'facil', 'vetores'),
(937, 'A estrutura que armazena dados em forma de tabela é:', 'vetor', 'variável', 'matriz', 'função', 3, 'facil', 'vetores'),
(938, 'Para exibir todos os elementos de uma matriz:', 'if', 'switch', 'dois for aninhados', 'while', 3, 'facil', 'vetores'),
(939, 'O índice da primeira coluna em uma matriz é:', '1', '0', '-1', 'depende da linguagem', 2, 'facil', 'vetores'),
(940, 'A principal vantagem do vetor é:', 'usar menos memória', 'usar menos código', 'acesso rápido por índice', 'evitar loops', 3, 'facil', 'vetores'),
(941, 'Qual índice acessa o último elemento de um vetor v[10]?', '10', '9', '8', '0', 2, 'facil', 'vetores'),
(942, 'Um vetor em C é declarado como:', 'array vetor[ ];', 'vetor int;', 'int vetor[ ];', 'vetor( );', 3, 'facil', 'vetores'),
(943, 'Qual estrutura armazena valores com dois índices?', 'vetor', 'variável', 'matriz', 'função', 3, 'facil', 'vetores'),
(944, 'O que acontece se acessarmos um índice inválido?', 'valor 0', 'valor -1', 'erro ou comportamento indefinido', 'nada', 3, 'facil', 'vetores'),
(945, 'Qual comando é usado para preencher um vetor?', 'if', 'while', 'for', 'switch', 3, 'facil', 'vetores'),
(946, 'Como declaramos uma matriz 4x5 em C?', 'matriz[4,5];', 'matriz(4)(5);', 'int matriz[4][5];', 'matriz{4}{5};', 3, 'facil', 'vetores'),
(947, 'Qual comando mais usado para ler uma matriz?', 'switch', 'if', 'dois for aninhados', 'while', 3, 'facil', 'vetores'),
(948, 'O que é um vetor?', 'variável booleana', 'função', 'array unidimensional', 'matriz', 3, 'facil', 'vetores'),
(949, 'Qual estrutura é usada para armazenar números de alunos?', 'função', 'matriz', 'vetor', 'variável simples', 3, 'facil', 'vetores'),
(950, 'Uma matriz m[5][6] possui quantos elementos?', '11', '30', '25', '36', 2, 'facil', 'vetores'),
(951, 'Como acessamos 2ª linha, 3ª coluna?', 'm[3][2]', 'm[1][2]', 'm[2][3]', 'm[2][2]', 2, 'facil', 'vetores'),
(952, 'Qual é o índice da primeira linha em uma matriz?', '1', '-1', '0', 'depende', 3, 'facil', 'vetores'),
(953, 'Vetor é ideal para armazenar:', 'sequência de valores do mesmo tipo', 'variáveis diferentes', 'funções', 'estruturas condicionais', 1, 'facil', 'vetores'),
(954, 'Como percorrer um vetor de tamanho n?', 'if', 'switch', 'for de 0 a n-1', 'while até n+1', 3, 'facil', 'vetores'),
(955, 'Como percorrer uma matriz m[3][3]?', 'if', 'switch', 'dois for aninhados', 'um for', 3, 'facil', 'vetores'),
(956, 'Quantas colunas em m[4][7]?', '4', '7', '6', '5', 2, 'facil', 'vetores'),
(957, 'Qual índice acessa a última coluna em m[4][7]?', '6', '7', '5', '4', 1, 'facil', 'vetores'),
(958, 'Qual a finalidade da matriz?', 'criar funções', 'armazenar vetores', 'armazenar dados em tabela (linhas e colunas)', 'executar loops', 3, 'facil', 'vetores'),
(959, 'Qual estrutura armazena dados em forma linear?', 'matriz', 'função', 'vetor', 'lista ligada', 3, 'facil', 'vetores'),
(960, 'Em um vetor de tamanho 6, o índice válido mais alto é:', '6', '5', '4', '7', 2, 'facil', 'vetores'),
(961, 'Qual comando mais usado para imprimir todos os elementos de um vetor?', 'if', 'switch', 'for', 'break', 3, 'facil', 'vetores'),
(962, 'O que acontece se tentarmos acessar v[10] em um vetor v[5]?', 'valor 0', 'valor -1', 'erro ou comportamento indefinido', 'imprime 5', 3, 'facil', 'vetores'),
(963, 'Um vetor é ideal para armazenar:', 'sequência de valores do mesmo tipo', 'variáveis diferentes', 'strings e números misturados', 'funções', 1, 'facil', 'vetores'),
(964, 'Qual laço é mais comum para preencher uma matriz?', 'if', 'switch', 'dois for aninhados', 'while', 3, 'facil', 'vetores'),
(965, 'Em m[5][5], o número total de elementos é:', '10', '25', '20', '15', 2, 'facil', 'vetores'),
(966, 'O que é um array multidimensional?', 'variável simples', 'vetor', 'matriz', 'função', 3, 'facil', 'vetores'),
(967, 'O índice da primeira coluna em uma matriz é:', '1', '-1', '0', 'depende', 3, 'facil', 'vetores'),
(968, 'Quantos for precisamos para percorrer uma matriz 2D?', '1', '2', '3', '4', 2, 'facil', 'vetores'),
(969, 'Um vetor v[10] é percorrido até índice:', '10', '9', '8', '11', 2, 'facil', 'vetores'),
(970, 'Qual estrutura é bidimensional?', 'vetor', 'função', 'matriz', 'variável', 3, 'facil', 'vetores'),
(971, 'Como acessar o último elemento de um vetor com n posições?', 'v[n]', 'v[n-1]', 'v[n+1]', 'v[n-2]', 2, 'facil', 'vetores'),
(972, 'Para exibir todos os elementos de uma matriz usamos:', 'while', 'if', 'dois for aninhados', 'switch', 3, 'facil', 'vetores'),
(973, 'Qual é a função do vetor?', 'executar loops', 'armazenar funções', 'armazenar uma sequência de dados', 'executar condicionais', 3, 'facil', 'vetores'),
(974, 'O que é um array unidimensional?', 'matriz', 'função', 'vetor', 'constante', 3, 'facil', 'vetores'),
(975, 'Quantas colunas há em m[3][4]?', '3', '4', '2', '5', 2, 'facil', 'vetores'),
(976, 'Um vetor armazena:', 'valores diferentes', 'valores do mesmo tipo', 'tipos misturados', 'funções', 2, 'facil', 'vetores'),
(977, 'Um índice inválido gera:', 'valor padrão', 'erro ou comportamento indefinido', '0', 'última posição', 2, 'facil', 'vetores'),
(978, 'Qual comando inicializa todos os elementos de um vetor com 0?', 'if', 'switch', 'for com v[i] = 0', 'break', 3, 'facil', 'vetores'),
(979, 'Quantos elementos tem m[2][5]?', '5', '7', '10', '12', 3, 'facil', 'vetores'),
(980, 'Qual laço é mais usado para percorer um vetor?', 'if', 'switch', 'while', 'for', 4, 'facil', 'vetores'),
(981, 'O que é necessário para acessar um elemento da matriz?', 'apenas 1 índice', 'dois índices (linha e coluna)', 'três índices', 'nenhuma', 2, 'facil', 'vetores'),
(982, 'Qual índice acessa o primeiro elemento de um vetor?', '-1', '1', '0', 'depende', 3, 'facil', 'vetores'),
(983, 'Uma matriz m[2][3] possui quantos elementos?', '5', '6', '4', '3', 2, 'facil', 'vetores'),
(984, 'Qual comando é mais usado para preencher um vetor?', 'if', 'while', 'for', 'switch', 3, 'facil', 'vetores'),
(985, 'Como declarar uma matriz 3x3 de inteiros em C?', 'matriz(3,3);', 'matriz[3,3];', 'int matriz[3][3];', 'int matriz{3}{3};', 3, 'facil', 'vetores'),
(986, 'Qual índice acessa a última linha de m[5][5]?', '4', '5', '3', '6', 1, 'facil', 'vetores'),
(987, 'O que acontece se o índice for negativo?', 'retorna 0', 'retorna -1', 'gera erro ou comportamento indefinido', 'acessa a última posição', 3, 'facil', 'vetores'),
(988, 'Vetores são acessados por:', 'chave', 'função', 'índice', 'variável', 3, 'facil', 'vetores'),
(989, 'Como percorrer uma matriz?', 'while', 'if', 'dois for aninhados', 'um for', 3, 'facil', 'vetores'),
(990, 'Para acessar a terceira linha, segunda coluna, usamos:', 'm[3][2]', 'm[2][1]', 'm[1][2]', 'm[2][2]', 2, 'facil', 'vetores'),
(991, 'Quantos for são necessários para preencher m[4][4]?', '1', '2', '3', '4', 2, 'facil', 'vetores'),
(992, 'Um vetor é um array:', 'bidimensional', 'multidimensional', 'unidimensional', 'constante', 3, 'facil', 'vetores'),
(993, 'Quantos elementos tem m[5][2]?', '7', '10', '12', '15', 2, 'facil', 'vetores'),
(994, 'O índice da primeira coluna é:', '1', '-1', '0', 'depende da linguagem', 3, 'facil', 'vetores'),
(995, 'Para somar todos os elementos de um vetor usamos:', 'if', 'switch', 'for com acumulador', 'while com break', 3, 'facil', 'vetores'),
(996, 'Qual laço é mais usado para exibir todas as posições de uma matriz?', 'if', 'switch', 'dois for aninhados', 'um while', 3, 'facil', 'vetores'),
(997, 'Um vetor armazena:', 'valores diferentes', 'valores booleanos', 'valores do mesmo tipo', 'funções', 3, 'facil', 'vetores'),
(998, 'A função da matriz é:', 'executar funções', 'controlar loops', 'armazenar dados em tabela', 'armazenar strings', 3, 'facil', 'vetores'),
(999, 'O índice da última coluna de m[4][6] é:', '4', '5', '5', '6', 2, 'facil', 'vetores'),
(1000, 'Qual laço é mais utilizado para preencher um vetor?', 'if', 'switch', 'while', 'for', 4, 'facil', 'vetores'),
(1001, 'Qual é o valor do último elemento de v[5] se o vetor foi inicializado assim: int v[5] = {1, 2, 3, 4, 5};', '3', '5', '4', '6', 2, 'dificil', 'vetores'),
(1002, 'Em um vetor v[10], quantas iterações no laço for(int i=0; i<10; i++)?', '9', '11', '10', '12', 3, 'dificil', 'vetores'),
(1003, 'O que acontece se usarmos for(int i=1; i<=5; i++) v[i]; para vetor v[5]?', 'tudo normal', 'acesso inválido em v[5]', 'erro de compilação', 'não executa', 2, 'dificil', 'vetores'),
(1004, 'Qual é o valor de m[1][2] nesta matriz? int m[2][3] = { {1,2,3}, {4,5,6} };', '2', '3', '6', '5', 3, 'dificil', 'vetores'),
(1005, 'Se v[5] = {0}; é declarado, qual o valor de v[2]?', 'indefinido', '0', '1', '2', 2, 'dificil', 'vetores'),
(1006, 'Quantas iterações são feitas por este código? for(int i=0; i<3; i++) for(int j=0; j<4; j++)', '7', '10', '12', '6', 3, 'dificil', 'vetores'),
(1007, 'Se temos int v[3] = {1,2,3};, o que imprime printf(\"%d\", v[1]);?', '1', '2', '3', 'erro', 2, 'dificil', 'vetores'),
(1008, 'Em uma matriz m[4][3], quantas colunas?', '4', '3', '5', '7', 2, 'dificil', 'vetores'),
(1009, 'Em m[3][3], o elemento m[2][1] corresponde a:', '1ª linha, 2ª coluna', '3ª linha, 2ª coluna', '2ª linha, 3ª coluna', '2ª linha, 1ª coluna', 2, 'dificil', 'vetores'),
(1010, 'Se temos int v[4]; e nenhum valor atribuído, o conteúdo de v[2] será:', '0 garantido', 'indefinido', '2', '-1', 2, 'dificil', 'vetores'),
(1011, 'Como acessar o elemento da última coluna da última linha em m[4][5]?', 'm[5][4]', 'm[3][5]', 'm[4][4]', 'm[3][4]', 4, 'dificil', 'vetores'),
(1012, 'O que imprime este código? int v[3] = {1,2}; printf(\"%d\", v[2]);', '1', '2', '0 (por inicialização parcial)', 'indefinido', 3, 'dificil', 'vetores'),
(1013, 'Quantas posições um vetor v[100] possui?', '99', '100', '101', '98', 2, 'dificil', 'vetores'),
(1014, 'Qual índice acessa o último elemento de m[5][6]?', 'm[5][6]', 'm[5][5]', 'm[6][5]', 'm[4][5]', 4, 'dificil', 'vetores'),
(1015, 'Se for(int i=0; i<=4; i++), para vetor v[4], o que acontece?', 'tudo normal', 'acesso fora dos limites em v[4]', 'não executa', 'erro de compilação', 2, 'dificil', 'vetores'),
(1016, 'Para percorrer uma matriz m[2][5], quantas iterações no total?', '7', '10 (2x5)', '12', '5', 2, 'dificil', 'vetores'),
(1017, 'O que imprime este código? int v[3] = {5,6,7}; printf(\"%d\", v[0]);', '5', '6', '7', '0', 1, 'dificil', 'vetores'),
(1018, 'Qual a fórmula para o número total de elementos em m[x][y]?', 'x + y', 'x * y', 'x - y', 'x / y', 2, 'dificil', 'vetores'),
(1019, 'Se m[3][3] for percorrida com: for(i=0; i<3; i++) for(j=0; j<3; j++) Quantas iterações?', '9', '6', '3', '12', 1, 'dificil', 'vetores'),
(1020, 'O que acontece se acessar m[-1][0]?', 'valor 0', 'comportamento indefinido / erro', '-1', 'imprime 1', 2, 'dificil', 'vetores'),
(1021, 'Se um vetor v[6] for percorrido com i<6, quantas vezes executa?', '5', '6', '7', '4', 2, 'dificil', 'vetores'),
(1022, 'O que ocorre se acessar v[1000] em um vetor v[10]?', 'retorna 0', 'retorna 1000', 'erro ou comportamento indefinido', 'retorna 10', 3, 'dificil', 'vetores'),
(1023, 'Se m[5][5], quantas linhas tem?', '5', '10', '25', '6', 1, 'dificil', 'vetores'),
(1024, 'Qual índice da última coluna em m[2][6]?', '6', '5', '4', '3', 2, 'dificil', 'vetores'),
(1025, 'Como acessar a segunda linha, terceira coluna?', 'm[3][2]', 'm[1][2]', 'm[2][3]', 'm[2][1]', 2, 'dificil', 'vetores'),
(1026, 'Qual o maior índice em v[20]?', '19', '20', '18', '21', 1, 'dificil', 'vetores'),
(1027, 'Em m[3][4], quantos elementos totais?', '7', '10', '12', '8', 3, 'dificil', 'vetores'),
(1028, 'Se for(int i=0; i<=9; i++) em v[10], tudo certo?', 'não', 'sim', 'erro', 'não executa', 2, 'dificil', 'vetores'),
(1029, 'Qual a saída: int v[4] = {1}; printf(\"%d\", v[3]);', '1', '0 (por inicialização parcial)', '3', 'indefinido', 2, 'dificil', 'vetores'),
(1030, 'Qual a fórmula para percorrer uma matriz?', 'dois for aninhados', 'while', 'if', 'switch', 1, 'dificil', 'vetores'),
(1031, 'Se v[10], índice máximo é:', '10', '9', '8', '11', 2, 'dificil', 'vetores'),
(1032, 'Quantos elementos tem m[6][2]?', '6', '12', '10', '8', 2, 'dificil', 'vetores'),
(1033, 'Qual índice da última linha em m[4][4]?', '3', '4', '5', '2', 1, 'dificil', 'vetores'),
(1034, 'Qual índice da última coluna em m[4][7]?', '6', '5', '4', '7', 1, 'dificil', 'vetores'),
(1035, 'Qual estrutura é bidimensional?', 'vetor', 'função', 'matriz', 'variável', 3, 'dificil', 'vetores'),
(1036, 'Quantas iterações em m[5][3] com dois for?', '12', '15', '9', '8', 2, 'dificil', 'vetores'),
(1037, 'Como acessar a última posição de v[50]?', 'v[50]', 'v[49]', 'v[48]', 'v[51]', 2, 'dificil', 'vetores'),
(1038, 'Quantas linhas em m[7][4]?', '4', '7', '6', '8', 2, 'dificil', 'vetores'),
(1039, 'Como acessar o primeiro elemento de uma matriz?', 'm[1][1]', 'm[0][0]', 'm[1][0]', 'm[0][1]', 2, 'dificil', 'vetores'),
(1040, 'Em v[5], o índice 3 acessa qual elemento?', 'quarto elemento', 'quinto elemento', 'terceiro elemento', 'segundo elemento', 1, 'dificil', 'vetores'),
(1041, 'O que é uma função?', 'um tipo de variável', 'um tipo de laço', 'um bloco de código que executa uma tarefa', 'um comando de repetição', 3, 'facil', 'funcoes'),
(1042, 'Qual comando define uma função em C?', 'if', 'for', 'tipo nome() { }', 'while', 3, 'facil', 'funcoes'),
(1043, 'Qual é o nome da função principal em C?', 'start', 'run', 'execute', 'main', 4, 'facil', 'funcoes'),
(1044, 'O que é um parâmetro de uma função?', 'um retorno', 'um valor passado para a função', 'um laço dentro da função', 'um tipo de variável', 2, 'facil', 'funcoes'),
(1045, 'Uma função pode ter:', 'só retorno', 'só parâmetros', 'parâmetros e retorno', 'nenhum', 3, 'facil', 'funcoes'),
(1046, 'Qual palavra reservada em C indica que a função não retorna valor?', 'return', 'main', 'void', 'stop', 3, 'facil', 'funcoes'),
(1047, 'Qual é o comando para retornar um valor em uma função?', 'void', 'stop', 'break', 'return', 4, 'facil', 'funcoes'),
(1048, 'Como passamos valores para uma função?', 'com if', 'com while', 'pelos parâmetros na chamada', 'com break', 3, 'facil', 'funcoes'),
(1049, 'O que acontece se uma função não tiver return e não for void?', 'erro', 'retorna 0', 'executa normal', 'chama main', 1, 'facil', 'funcoes'),
(1050, 'Como chamamos uma função chamada soma?', 'if soma();', 'return soma;', 'soma;', 'soma();', 4, 'facil', 'funcoes'),
(1051, 'Uma função pode receber nenhum parâmetro?', 'não', 'sim', 'só se for void', 'depende da linguagem', 2, 'facil', 'funcoes'),
(1052, 'Onde declaramos os parâmetros de uma função?', 'dentro do corpo da função', 'entre parênteses na definição', 'depois do return', 'antes do main', 2, 'facil', 'funcoes'),
(1053, 'O que significa a seguinte função? void imprime();', 'função que retorna int', 'função com retorno char', 'função sem retorno', 'função com retorno float', 3, 'facil', 'funcoes'),
(1054, 'O que acontece quando chamamos uma função?', 'o código da função é executado', 'o programa para', 'o programa fecha', 'nada acontece', 1, 'facil', 'funcoes'),
(1055, 'Uma função pode ter vários parâmetros?', 'não', 'sim', 'só dois', 'só um', 2, 'facil', 'funcoes'),
(1056, 'Como passamos dois parâmetros para uma função?', 'a, b', '(a, b)', '[a b]', '{a, b}', 2, 'facil', 'funcoes'),
(1057, 'O que faz return em uma função?', 'imprime valores', 'chama outra função', 'encerra o programa', 'retorna um valor', 4, 'facil', 'funcoes'),
(1058, 'A função main em C deve ter qual retorno?', 'void', 'char', 'int', 'string', 3, 'facil', 'funcoes'),
(1059, 'Qual é a sintaxe básica para chamar uma função?', 'if função;', 'função return;', 'função{};', 'função();', 4, 'facil', 'funcoes'),
(1060, 'Qual parte da função especifica o tipo de retorno?', 'return', 'void', 'main', 'o tipo antes do nome da função', 4, 'facil', 'funcoes'),
(1061, 'Uma função pode ter nenhum parâmetro e nenhum retorno?', 'não', 'sim', 'depende', 'só se for void', 2, 'facil', 'funcoes'),
(1062, 'Como se chama uma função que não retorna nada?', 'função constante', 'função return', 'função void', 'função estática', 3, 'facil', 'funcoes'),
(1063, 'O que é obrigatório em uma função com retorno?', 'while', 'for', 'comando return', 'break', 3, 'facil', 'funcoes'),
(1064, 'O que é um valor de retorno?', 'um parâmetro', 'valor enviado de volta pela função', 'uma variável', 'um laço', 2, 'facil', 'funcoes'),
(1065, 'Podemos chamar uma função várias vezes?', 'não', 'sim', 'só uma vez', 'depende da linguagem', 2, 'facil', 'funcoes'),
(1066, 'Para passar um número inteiro para uma função, usamos:', 'void', 'char', 'string', 'int', 4, 'facil', 'funcoes'),
(1067, 'Se uma função retorna float, seu cabeçalho deve começar com:', 'void', 'double', 'float', 'int', 3, 'facil', 'funcoes'),
(1068, 'Como chamamos uma função que retorna int e recebe dois int?', 'void função(int a, int b);', 'int função(int a, int b);', 'função();', 'função return;', 2, 'facil', 'funcoes'),
(1069, 'Podemos ter funções sem parâmetros?', 'não', 'sim', 'depende', 'só em C++', 2, 'facil', 'funcoes'),
(1070, 'Onde o valor de retorno aparece?', 'dentro do for', 'dentro do while', 'no return', 'dentro do if', 3, 'facil', 'funcoes'),
(1071, 'Como é chamada uma função sem parâmetros?', 'função', 'função( )', 'função[ ]', 'função{ }', 2, 'facil', 'funcoes'),
(1072, 'Qual o comando que encerra uma função e devolve valor?', 'stop', 'break', 'return', 'close', 3, 'facil', 'funcoes'),
(1073, 'Qual das funções abaixo não retorna nada?', 'int soma();', 'float calcula();', 'char letra();', 'void imprime();', 4, 'facil', 'funcoes'),
(1074, 'Para passar um valor real como parâmetro, usamos:', 'char', 'int', 'float', 'bool', 3, 'facil', 'funcoes'),
(1075, 'Um parâmetro é:', 'um comando', 'um retorno', 'uma variável que recebe valor ao chamar função', 'uma constante', 3, 'facil', 'funcoes'),
(1076, 'Como chamamos uma função void mostra()?', 'void mostra;', 'mostra;', 'mostra();', 'return mostra();', 3, 'facil', 'funcoes'),
(1077, 'O que acontece se uma função for chamada?', 'programa para', 'função ignora', 'função executa seu código', 'função retorna -1', 3, 'facil', 'funcoes'),
(1078, 'Qual o tipo de retorno da função int calcula()?', 'void', 'int', 'char', 'float', 2, 'facil', 'funcoes'),
(1079, 'Qual palavra-chave devolve valor da função?', 'main', 'return', 'void', 'type', 2, 'facil', 'funcoes'),
(1080, 'O que podemos passar como parâmetro para função?', 'apenas números', 'qualquer valor do tipo esperado', 'apenas strings', 'apenas inteiros', 2, 'facil', 'funcoes'),
(1081, 'Podemos ter funções com mais de um parâmetro?', 'não', 'sim', 'só dois', 'depende da linguagem', 2, 'facil', 'funcoes'),
(1082, 'Para passar texto como parâmetro em C, usamos:', 'int', 'float', 'char * (ponteiro para char)', 'void', 3, 'facil', 'funcoes'),
(1083, 'A função main sempre é:', 'void', 'char', 'string', 'ponto de entrada do programa', 4, 'facil', 'funcoes'),
(1084, 'Qual função abaixo não retorna nada?', 'int soma();', 'float calcula();', 'char letra();', 'void imprime();', 4, 'facil', 'funcoes'),
(1085, 'Uma função pode receber parâmetros de diferentes tipos?', 'não', 'sim', 'só se for void', 'só se for int', 2, 'facil', 'funcoes'),
(1086, 'Como é chamada a função int soma(int a, int b)?', 'soma[a,b];', 'soma{a,b};', 'soma(a,b);', 'soma;', 3, 'facil', 'funcoes'),
(1087, 'Qual é o retorno padrão de uma função void?', '-1', '0', 'nenhum retorno', 'true', 3, 'facil', 'funcoes'),
(1088, 'Qual parte da função define o número de parâmetros?', 'return', 'parênteses da definição', 'if', 'while', 2, 'facil', 'funcoes'),
(1089, 'O que acontece quando chamamos uma função com argumentos?', 'ignora os argumentos', 'erro', 'parâmetros recebem os argumentos', 'não executa', 3, 'facil', 'funcoes'),
(1090, 'Podemos chamar uma função dentro de outra?', 'não', 'sim', 'só em C++', 'só se for void', 2, 'facil', 'funcoes'),
(1091, 'Uma função com retorno float deve:', 'retornar char', 'retornar int', 'retornar void', 'retornar float', 4, 'facil', 'funcoes'),
(1092, 'Como uma função retorna um valor?', 'usando void', 'usando break', 'usando return', 'usando continue', 3, 'facil', 'funcoes'),
(1093, 'A palavra-chave return deve aparecer:', 'no main', 'fora da função', 'dentro da função', 'em um if', 3, 'facil', 'funcoes'),
(1094, 'Qual a vantagem de usar funções?', 'deixa o código mais lento', 'organiza e reutiliza código', 'aumenta a complexidade', 'ocupa mais memória', 2, 'facil', 'funcoes'),
(1095, 'Qual tipo de função não precisa de parâmetros nem de retorno?', 'int', 'float', 'void função(void)', 'char', 3, 'facil', 'funcoes'),
(1096, 'O que acontece se uma função espera um parâmetro e você não passa?', 'funciona normal', 'retorna 0', 'gera erro', 'retorna void', 3, 'facil', 'funcoes'),
(1097, 'Como passamos valores diferentes para uma função?', 'while', 'break', 'parâmetros separados por vírgula', 'if', 3, 'facil', 'funcoes'),
(1098, 'Podemos passar uma variável como parâmetro?', 'não', 'sim', 'só se for global', 'só se for int', 2, 'facil', 'funcoes'),
(1099, 'Qual palavra é usada para sair da função e devolver valor?', 'void', 'break', 'stop', 'return', 4, 'facil', 'funcoes'),
(1100, 'Podemos usar funções para quebrar o código em partes menores?', 'não', 'sim', 'só em C++', 'só no main', 2, 'facil', 'funcoes'),
(1101, 'Podemos criar funções com qualquer nome válido?', 'não', 'sim', 'só nomes reservados', 'depende do compilador', 2, 'facil', 'funcoes'),
(1102, 'Qual o nome da função obrigatória em todo programa em C?', 'start', 'run', 'main', 'execute', 3, 'facil', 'funcoes'),
(1103, 'Para declarar uma função que retorna inteiro e não recebe parâmetros:', 'void função();', 'função(int);', 'função(void);', 'int função(void);', 4, 'facil', 'funcoes'),
(1104, 'Onde declaramos os parâmetros de uma função?', 'no return', 'fora da função', 'entre parênteses na definição', 'dentro do if', 3, 'facil', 'funcoes'),
(1105, 'Uma função pode não receber nenhum parâmetro?', 'não', 'sim', 'depende do tipo', 'só se for void', 2, 'facil', 'funcoes'),
(1106, 'Como passamos um valor inteiro para uma função?', '(int)', '[int]', '(variável do tipo int)', '{int}', 3, 'facil', 'funcoes'),
(1107, 'Qual função não retorna valor?', 'int soma();', 'float calcula();', 'void imprime();', 'char letra();', 3, 'facil', 'funcoes'),
(1108, 'Podemos usar funções dentro de funções?', 'não', 'sim, chamando-as', 'só em C++', 'só no main', 2, 'facil', 'funcoes'),
(1109, 'Podemos retornar uma variável de dentro da função?', 'não', 'sim', 'só se for global', 'só se for int', 2, 'facil', 'funcoes'),
(1110, 'Quantos parâmetros podemos passar para uma função?', 'no máximo 2', 'no máximo 5', 'no máximo 10', 'quantos forem necessários', 4, 'facil', 'funcoes'),
(1111, 'Qual comando chamaria uma função calcula_area()?', 'calcula_area;', 'calcula_area{};', 'calcula_area();', 'return calcula_area;', 3, 'facil', 'funcoes'),
(1112, 'O que significa o void antes do nome da função?', 'a função não existe', 'a função para', 'a função não retorna valor', 'a função retorna string', 3, 'facil', 'funcoes'),
(1113, 'Podemos passar expressões como parâmetros?', 'não', 'sim', 'só variáveis', 'só constantes', 2, 'facil', 'funcoes'),
(1114, 'O que acontece se a função espera um int e você passa um float?', 'funciona igual', 'pode ocorrer conversão automática ou erro', 'sempre erro', 'retorna 0', 2, 'facil', 'funcoes'),
(1115, 'Podemos usar retorno de uma função como parâmetro de outra?', 'não', 'sim', 'só em C++', 'depende do tipo', 2, 'facil', 'funcoes'),
(1116, 'Qual a finalidade do return?', 'terminar programa', 'executar main', 'devolver um valor da função', 'declarar variável', 3, 'facil', 'funcoes'),
(1117, 'O que significa esta função? float media(int a, int b);', 'recebe dois float', 'retorna int', 'retorna float e recebe dois int', 'não retorna', 3, 'facil', 'funcoes'),
(1118, 'Como chamamos media(5,10)?', 'media[5,10];', 'media{5,10};', 'media(5,10);', 'media<5,10>;', 3, 'facil', 'funcoes'),
(1119, 'Podemos passar resultado de cálculo como parâmetro?', 'não', 'sim', 'só se for int', 'só se for em variável', 2, 'facil', 'funcoes'),
(1120, 'Qual comando permite que uma função termine e devolva um valor?', 'stop', 'continue', 'return', 'void', 3, 'facil', 'funcoes'),
(1121, 'Para uma função retornar um valor, é necessário:', 'for', 'break', 'return', 'continue', 3, 'facil', 'funcoes'),
(1122, 'Qual o tipo de retorno da função double raiz()?', 'int', 'float', 'void', 'double', 4, 'facil', 'funcoes'),
(1123, 'Como passamos mais de um parâmetro para uma função?', 'separados por ponto e vírgula', 'entre chaves', 'separados por vírgula', 'entre colchetes', 3, 'facil', 'funcoes'),
(1124, 'Qual é o nome da função principal em um programa C?', 'start', 'run', 'main', 'execute', 3, 'facil', 'funcoes'),
(1125, 'Podemos passar expressões matemáticas como parâmetros?', 'não', 'sim', 'só se for int', 'só se for float', 2, 'facil', 'funcoes'),
(1126, 'O que acontece se não usarmos return em uma função com retorno?', 'nada', 'retorna 0', 'erro ou comportamento indefinido', 'volta para main', 3, 'facil', 'funcoes'),
(1127, 'O que o return faz dentro da função?', 'termina programa', 'devolve um valor e termina a função', 'reinicia função', 'ignora função', 2, 'facil', 'funcoes'),
(1128, 'Qual a forma correta de chamar a função void limpar()?', 'limpar;', 'limpar{};', 'limpar[];', 'limpar();', 4, 'facil', 'funcoes'),
(1129, 'O que é uma função void?', 'retorna 0', 'retorna -1', 'não retorna valor', 'retorna true', 3, 'facil', 'funcoes'),
(1130, 'Para receber um parâmetro do tipo char, usamos:', 'int', 'float', 'char', 'double', 3, 'facil', 'funcoes'),
(1131, 'O que acontece se não chamarmos a função?', 'executa automaticamente', 'não executa', 'erro', 'chama main', 2, 'facil', 'funcoes'),
(1132, 'Uma função pode chamar outra função?', 'não', 'sim', 'só se for void', 'só se for no main', 2, 'facil', 'funcoes'),
(1133, 'Qual das opções é um exemplo de função com retorno inteiro?', 'void soma()', 'char letra()', 'int calcula()', 'float valor()', 3, 'facil', 'funcoes'),
(1134, 'Podemos ter uma função que só executa uma tarefa, sem retornar valor?', 'não', 'sim', 'só se for main', 'depende', 2, 'facil', 'funcoes'),
(1135, 'Para declarar uma função que não recebe parâmetro e não retorna, usamos:', 'void função(int);', 'void função(char);', 'void função(void);', 'int função(void);', 3, 'facil', 'funcoes'),
(1136, 'Qual parte da função define o tipo de dado que será retornado?', 'nome da função', 'parâmetros', 'tipo antes do nome', 'return', 3, 'facil', 'funcoes'),
(1137, 'O que significa a função int soma(int a, int b)?', 'recebe um int', 'recebe float', 'recebe dois int e retorna int', 'não retorna', 3, 'facil', 'funcoes'),
(1138, 'Podemos passar valores de variáveis como parâmetros?', 'não', 'sim', 'só em C++', 'só se for global', 2, 'facil', 'funcoes'),
(1139, 'Podemos usar o resultado de uma função como parâmetro de outra?', 'não', 'sim', 'só em C++', 'só se for float', 2, 'facil', 'funcoes'),
(1140, 'Qual comando encerra a função e devolve um valor?', 'stop', 'continue', 'return', 'void', 3, 'facil', 'funcoes'),
(1141, 'O que acontece se uma função int calcula() não usar return?', 'retorna 0 sempre', 'funciona normalmente', 'pode gerar erro ou comportamento indefinido', 'sempre retorna -1', 3, 'dificil', 'funcoes'),
(1142, 'O que significa a declaração: float media(int a, int b);', 'retorna int', 'não retorna nada', 'retorna float e recebe dois int', 'recebe float', 3, 'dificil', 'funcoes'),
(1143, 'Qual o tipo de retorno da função: double calcula_area();', 'int', 'float', 'double', 'void', 3, 'dificil', 'funcoes'),
(1144, 'Se chamarmos: int x = soma(2,3); Qual é o tipo da variável x?', 'float', 'char', 'int', 'void', 3, 'dificil', 'funcoes'),
(1145, 'Podemos passar o resultado de uma função como parâmetro para outra?', 'não', 'sim', 'só se for int', 'só se for float', 2, 'dificil', 'funcoes'),
(1146, 'Qual das alternativas representa um protótipo de função?', 'int soma = (int a, int b);', 'soma(int a, int b);', 'int soma(int a, int b);', 'return soma(int a, int b);', 3, 'dificil', 'funcoes'),
(1147, 'Podemos ter funções com retorno void e parâmetros?', 'não', 'sim', 'só em C++', 'só se for main', 2, 'dificil', 'funcoes'),
(1148, 'Se uma função recebe float e passamos int, o que acontece?', 'erro', 'conversão implícita', 'não compila', 'retorna 0', 2, 'dificil', 'funcoes'),
(1149, 'Podemos usar return em funções void?', 'não', 'sim, mas sem valor (apenas return;)', 'só se for C++', 'gera erro', 2, 'dificil', 'funcoes'),
(1150, 'Se uma função void executa um printf, ela:', 'retorna string', 'retorna int', 'não retorna valor, apenas imprime', 'gera erro', 3, 'dificil', 'funcoes'),
(1151, 'Qual o efeito de passar uma variável como parâmetro para uma função?', 'copia o valor', 'passa por referência', 'não é passado', 'gera erro', 1, 'dificil', 'funcoes'),
(1152, 'Se passamos uma variável para a função e ela é alterada dentro da função, essa alteração:', 'sempre altera a variável original', 'nunca altera', 'depende se foi passado por valor ou referência', 'sempre retorna 0', 3, 'dificil', 'funcoes'),
(1153, 'Em C, por padrão, os parâmetros são passados:', 'por referência', 'por valor', 'por cópia de ponteiro', 'por tipo', 2, 'dificil', 'funcoes'),
(1154, 'O que imprime este código? int quadrado(int x) { return x * x; } printf(\"%d\", quadrado(3));', '3', '9', '6', 'erro', 2, 'dificil', 'funcoes'),
(1155, 'Podemos usar o resultado de uma função em uma expressão?', 'não', 'sim', 'só se for void', 'só se for em main', 2, 'dificil', 'funcoes'),
(1156, 'O que acontece se uma função int retornar float?', 'erro', 'valor é convertido para int', 'valor é ignorado', 'sempre 0', 2, 'dificil', 'funcoes'),
(1157, 'Qual a saída de: int soma(int a, int b) { return a + b; } printf(\"%d\", soma(2,4));', '2', '6', '4', 'erro', 2, 'dificil', 'funcoes'),
(1158, 'Qual a diferença entre função com retorno e sem retorno?', 'nenhuma', 'só no tipo', 'uma devolve valor, a outra não', 'uma pode usar for, a outra não', 3, 'dificil', 'funcoes'),
(1159, 'Qual função é inválida?', 'void imprime(void);', 'int soma(int a, int b);', 'float media(int a, int b);', 'int resultado(); return 5;', 4, 'dificil', 'funcoes'),
(1160, 'Podemos ter funções que recebem nenhum parâmetro e retornam valor?', 'não', 'sim', 'só em C++', 'só em main', 2, 'dificil', 'funcoes'),
(1161, 'A expressão return a * b + 5; retorna:', 'a * b', '5', 'resultado da expressão completa', 'nada', 3, 'dificil', 'funcoes'),
(1162, 'Qual é a saída? int f() { return 10; } printf(\"%d\", f());', '1', '0', '10', 'erro', 3, 'dificil', 'funcoes'),
(1163, 'Se uma função void executa um return com valor, o que acontece?', 'compila', 'ignora valor', 'gera erro', 'retorna 0', 3, 'dificil', 'funcoes'),
(1164, 'Qual é a finalidade das funções?', 'aumentar o código', 'duplicar código', 'modularizar e reutilizar código', 'tornar mais lento', 3, 'dificil', 'funcoes'),
(1165, 'A função char letra() retorna:', 'string', 'int', 'float', 'char', 4, 'dificil', 'funcoes'),
(1166, 'Qual é o uso correto de uma função dentro de um printf?', 'printf(f());', 'printf(\"%d\", f());', 'printf[f()];', 'printf{f()};', 2, 'dificil', 'funcoes'),
(1167, 'O que é um parâmetro formal?', 'parâmetro no return', 'parâmetro na chamada', 'parâmetro na definição da função', 'parâmetro global', 3, 'dificil', 'funcoes'),
(1168, 'O que é um argumento?', 'tipo de função', 'variável global', 'valor passado para a função na chamada', 'variável local', 3, 'dificil', 'funcoes'),
(1169, 'Qual função obrigatoriamente deve existir em um programa em C?', 'calcula', 'soma', 'imprime', 'main', 4, 'dificil', 'funcoes'),
(1170, 'Se declararmos void f(void), isso significa:', 'retorna 0', 'não aceita parâmetro', 'não retorna valor', 'retorna void', 3, 'dificil', 'funcoes'),
(1171, 'O que acontece se não houver chamada da função?', 'compila, mas não executa', 'erro', 'executa no main', 'sempre retorna 0', 1, 'dificil', 'funcoes'),
(1172, 'Se uma função é chamada várias vezes:', 'executa só uma vez', 'executa sempre no main', 'executa cada vez que for chamada', 'gera erro', 3, 'dificil', 'funcoes'),
(1173, 'É possível uma função chamar a si mesma?', 'não', 'sim (recursão)', 'só em C++', 'só se for main', 2, 'dificil', 'funcoes'),
(1174, 'Qual a saída de: int dobro(int x) { return x * 2; } printf(\"%d\", dobro(4));', '2', '8', '4', '0', 2, 'dificil', 'funcoes'),
(1175, 'Qual função retorna um inteiro?', 'void imprime()', 'char letra()', 'float media()', 'int calcula()', 4, 'dificil', 'funcoes'),
(1176, 'Podemos ter funções com o mesmo nome, mas parâmetros diferentes?', 'não', 'sim, em C++ (sobrecarga)', 'só se for main', 'sempre gera erro', 2, 'dificil', 'funcoes'),
(1177, 'Se a função espera int e recebe char, o que acontece?', 'erro', 'conversão implícita', 'retorna 0', 'não executa', 2, 'dificil', 'funcoes'),
(1178, 'Em C, como os parâmetros são passados?', 'por valor', 'por referência', 'por global', 'por cópia', 1, 'dificil', 'funcoes'),
(1179, 'Se uma função não tem return e não é void, o que acontece?', 'funciona normal', 'retorna 0', 'pode gerar erro ou comportamento indefinido', 'chama main', 3, 'dificil', 'funcoes'),
(1180, 'Podemos usar o resultado de uma função como parte de uma expressão?', 'não', 'sim', 'só se for int', 'só em C++', 2, 'dificil', 'funcoes'),
(1181, 'Qual símbolo inicia um comentário de linha única em C?', '/*', '*', '//', '#', 3, 'facil', 'estrutura'),
(1182, 'Um comentário de múltiplas linhas em C é iniciado por:', '//', '#', '/* ... */', '--', 3, 'facil', 'estrutura'),
(1183, 'Qual é uma boa prática ao nomear variáveis?', 'usar nomes confusos', 'usar letras aleatórias', 'usar nomes significativos', 'usar números', 3, 'facil', 'estrutura'),
(1184, 'A identação serve para:', 'criar loops', 'diminuir o código', 'melhorar a legibilidade', 'evitar comentários', 3, 'facil', 'estrutura'),
(1185, 'Qual prática devemos evitar?', 'comentar o código', 'indentação', 'código duplicado', 'modularização', 3, 'facil', 'estrutura'),
(1186, 'Comentários são:', 'obrigatórios', 'opcionais', 'geram erro', 'executam código', 2, 'facil', 'estrutura'),
(1187, 'Qual a prática correta ao escrever um programa?', 'escrever tudo na main', 'organizar em funções', 'não usar funções', 'não comentar', 2, 'facil', 'estrutura'),
(1188, 'Qual símbolo NÃO é usado para comentar em C?', '//', '/* */', '--', '*', 3, 'facil', 'estrutura'),
(1189, 'Para que serve a organização em funções?', 'aumentar código', 'deixar código mais lento', 'facilitar manutenção e reuso', 'gerar mais loops', 3, 'facil', 'estrutura'),
(1190, 'Comentários devem ser:', 'complicados', 'longos demais', 'claros e objetivos', 'cheios de símbolos', 3, 'facil', 'estrutura'),
(1191, 'Qual é uma boa prática em programação?', 'usar nomes genéricos', 'escrever código limpo e legível', 'não comentar', 'misturar idiomas', 2, 'facil', 'estrutura'),
(1192, 'Variáveis devem ter nomes:', 'aleatórios', 'iguais a comandos', 'que indiquem seu propósito', 'sempre com números', 3, 'facil', 'estrutura'),
(1193, 'Qual tipo de comentário explica o que uma função faz?', 'linha de código', 'variável', 'comentário de documentação', 'laço', 3, 'facil', 'estrutura'),
(1194, 'Uma boa prática é:', 'não usar funções', 'não comentar', 'não usar indentação', 'comentar partes importantes do código', 4, 'facil', 'estrutura'),
(1195, 'Qual o objetivo da modularização?', 'gerar erros', 'aumentar loops', 'dividir o programa em partes menores e reutilizáveis', 'reduzir variáveis', 3, 'facil', 'estrutura'),
(1196, 'Qual é uma prática incorreta?', 'indentação correta', 'variáveis bem nomeadas', 'funções bem definidas', 'código muito repetitivo', 4, 'facil', 'estrutura'),
(1197, 'Comentários devem ser usados para:', 'complicar o código', 'gerar loops', 'ajudar quem lê o código', 'executar funções', 3, 'facil', 'estrutura'),
(1198, 'Qual o impacto da identação?', 'muda a execução', 'gera loops', 'aumenta o código', 'melhora a legibilidade', 4, 'facil', 'estrutura'),
(1199, 'O que NÃO é uma boa prática?', 'usar nomes significativos', 'comentar código', 'organizar em funções', 'copiar e colar código sem entender', 4, 'facil', 'estrutura'),
(1200, 'Qual é a principal razão para usar funções?', 'diminuir performance', 'complicar código', 'modularizar e reutilizar código', 'evitar indentação', 3, 'facil', 'estrutura'),
(1201, 'Qual destes é um comentário válido em C?', '# comentário', '// comentário', '-- comentário', '_ comentário', 2, 'facil', 'estrutura'),
(1202, 'Qual prática facilita a leitura do código?', 'não usar funções', 'variáveis aleatórias', 'identação correta', 'nomes confusos', 3, 'facil', 'estrutura'),
(1203, 'Qual comentário é de múltiplas linhas?', '// comentário', '# comentário', '/* comentário */', '-- comentário', 3, 'facil', 'estrutura'),
(1204, 'Usar variáveis com nomes como x1, x2, x3 é uma prática:', 'recomendada', 'não recomendada', 'obrigatória', 'indiferente', 2, 'facil', 'estrutura'),
(1205, 'Qual prática NÃO é indicada?', 'comentar código', 'organizar funções', 'indentação correta', 'escrever código sem clareza', 4, 'facil', 'estrutura'),
(1206, 'Identação é importante porque:', 'compila o código', 'gera mais loops', 'torna o código mais legível', 'executa mais rápido', 3, 'facil', 'estrutura'),
(1207, 'O que é uma prática recomendada?', 'copiar código de outros sem entender', 'usar nomes genéricos', 'usar nomes descritivos para variáveis', 'evitar comentários', 3, 'facil', 'estrutura'),
(1208, 'Qual é o resultado de comentários bem usados?', 'aumenta tempo de execução', 'deixa código maior', 'facilita a manutenção', 'gera mais erros', 3, 'facil', 'estrutura'),
(1209, 'Qual tipo de comentário deve ser evitado?', 'comentário explicativo', 'comentário de documentação', 'comentário redundante e óbvio', 'comentário sobre função', 3, 'facil', 'estrutura'),
(1210, 'Um código bem indentado:', 'executa mais rápido', 'gera menos memória', 'é mais fácil de entender', 'consome mais CPU', 3, 'facil', 'estrutura'),
(1211, 'O que é uma prática importante ao escrever código?', 'usar poucas funções', 'comentar o que não for óbvio', 'não indentação', 'usar nomes curtos demais', 2, 'facil', 'estrutura'),
(1212, 'Qual símbolo inicia um comentário de linha em C?', '//', '--', '#', ';', 1, 'facil', 'estrutura'),
(1213, 'Qual é um exemplo de nome significativo para variável?', 'x', 'y', 'totalNotas', 'a', 3, 'facil', 'estrutura'),
(1214, 'Comentários ajudam:', 'o compilador', 'a execução', 'outros programadores e você mesmo', 'o processador', 3, 'facil', 'estrutura'),
(1215, 'Qual das opções NÃO é uma boa prática?', 'código modular', 'código comentado', 'indentação correta', 'variáveis com nomes como x1, y2', 4, 'facil', 'estrutura'),
(1216, 'Um bom nome de função deve:', 'ser curto e sem sentido', 'ser nome de letra só', 'indicar o que a função faz', 'ser igual ao nome da variável', 3, 'facil', 'estrutura'),
(1217, 'Qual dos seguintes NÃO melhora a legibilidade?', 'comentários claros', 'indentação', 'funções bem definidas', 'código sem espaçamento', 4, 'facil', 'estrutura'),
(1218, 'O que devemos evitar em comentários?', 'clareza', 'concisão', 'explicação do que não é óbvio', 'comentários desatualizados', 4, 'facil', 'estrutura'),
(1219, 'Usar nomes como contador, soma, media é:', 'má prática', 'boa prática', 'desnecessário', 'obrigatório', 2, 'facil', 'estrutura'),
(1220, 'O que NÃO é considerado uma boa prática?', 'deixar código sem comentários', 'usar indentação', 'nomear variáveis corretamente', 'organizar em funções', 1, 'facil', 'estrutura'),
(1221, 'Qual objetivo da modularização?', 'complicar o código', 'deixar código mais lento', 'tornar o código mais organizado e reutilizável', 'usar mais loops', 3, 'facil', 'estrutura'),
(1222, 'O que acontece com os comentários durante a compilação?', 'são executados', 'geram loops', 'são ignorados pelo compilador', 'geram alertas', 3, 'facil', 'estrutura'),
(1223, 'Comentários devem ser:', 'longos demais', 'enigmáticos', 'claros e diretos', 'omitidos', 3, 'facil', 'estrutura'),
(1224, 'Identação ajuda:', 'o compilador', 'a execução', 'o programador a entender o código', 'o sistema operacional', 3, 'facil', 'estrutura'),
(1225, 'Usar nomes como contador, somaTotal é:', 'obrigatório', 'desnecessário', 'boa prática', 'errado', 3, 'facil', 'estrutura'),
(1226, 'Comentários desatualizados:', 'são úteis', 'devem ser evitados', 'aceleram execução', 'são obrigatórios', 2, 'facil', 'estrutura'),
(1227, 'Código duplicado deve ser:', 'incentivado', 'evitado', 'copiado sempre', 'comentado', 2, 'facil', 'estrutura'),
(1228, 'Um código organizado facilita:', 'loops', 'performance', 'manutenção', 'tempo de execução', 3, 'facil', 'estrutura'),
(1229, 'Comentários são úteis para:', 'o compilador', 'o processador', 'outros desenvolvedores e você no futuro', 'gerar variáveis', 3, 'facil', 'estrutura'),
(1230, 'Um bom nome de função deve:', 'ser curto e sem sentido', 'ter letras aleatórias', 'indicar claramente seu propósito', 'ter números', 3, 'facil', 'estrutura'),
(1231, 'Organizar código em funções pequenas:', 'é boa prática', 'é má prática', 'torna o código mais lento', 'gera mais bugs', 1, 'facil', 'estrutura'),
(1232, 'Comentários em excesso:', 'sempre ajudam', 'podem poluir o código', 'devem ser usados sempre', 'são obrigatórios', 2, 'facil', 'estrutura'),
(1233, 'Qual NÃO é uma boa prática?', 'escrever funções pequenas', 'nomear variáveis corretamente', 'usar indentação', 'escrever tudo no main', 4, 'facil', 'estrutura');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(1234, 'Um bom código deve ser:', 'curto e difícil de entender', 'só para funcionar', 'claro, legível e bem estruturado', 'cheio de comentários redundantes', 3, 'facil', 'estrutura'),
(1235, 'Nomes de variáveis devem:', 'ser genéricos', 'ser aleatórios', 'indicar seu significado', 'ter números', 3, 'facil', 'estrutura'),
(1236, 'Comentários não devem:', 'explicar o código', 'indicar o motivo do código', 'explicar o óbvio', 'ajudar outros programadores', 3, 'facil', 'estrutura'),
(1237, 'Qual prática facilita a colaboração?', 'não comentar', 'código sem indentação', 'variáveis com nomes genéricos', 'código bem documentado e organizado', 4, 'facil', 'estrutura'),
(1238, 'Um código com boas práticas é:', 'difícil de entender', 'cheio de loops', 'mais fácil de manter e evoluir', 'cheio de comentários desnecessários', 3, 'facil', 'estrutura'),
(1239, 'Comentários são úteis principalmente para:', 'o processador', 'o compilador', 'quem lê o código', 'o sistema operacional', 3, 'facil', 'estrutura'),
(1240, 'Qual prática melhora a manutenção do código?', 'escrever sem identação', 'usar variáveis genéricas', 'escrever código limpo e organizado', 'não usar funções', 3, 'facil', 'estrutura'),
(1241, 'Identação facilita:', 'a execução', 'a leitura e entendimento', 'a compilação', 'o uso de variáveis', 2, 'facil', 'estrutura'),
(1242, 'Qual é um exemplo de comentário de linha em C?', '# comentário', '/* comentário */', '// comentário', '-- comentário', 3, 'facil', 'estrutura'),
(1243, 'O que NÃO é recomendado em nomes de variáveis?', 'usar nomes descritivos', 'seguir padrão da linguagem', 'evitar abreviações confusas', 'usar nomes aleatórios como a1, b2', 4, 'facil', 'estrutura'),
(1244, 'Uma boa prática em funções é:', 'criar funções muito longas', 'manter funções pequenas e com uma responsabilidade', 'misturar várias lógicas', 'evitar funções', 2, 'facil', 'estrutura'),
(1245, 'Comentários devem:', 'ajudar a entender o código', 'ser extensos demais', 'substituir código', 'confundir quem lê', 1, 'facil', 'estrutura'),
(1246, 'Para modularizar um código, devemos:', 'evitar funções', 'criar variáveis globais', 'dividir em funções bem definidas', 'repetir código', 3, 'facil', 'estrutura'),
(1247, 'Qual prática deve ser evitada?', 'código duplicado', 'funções bem definidas', 'comentários úteis', 'indentação correta', 1, 'facil', 'estrutura'),
(1248, 'Qual prática torna o código mais fácil de entender?', 'não usar comentários', 'nomes curtos demais', 'identação e nomes claros', 'variáveis genéricas', 3, 'facil', 'estrutura'),
(1249, 'Comentários devem ser usados para:', 'aumentar linhas', 'confundir leitores', 'explicar o raciocínio do código', 'gerar loops', 3, 'facil', 'estrutura'),
(1250, 'Variáveis com nomes como contador, mediaTotal são:', 'ruins', 'obrigatórias', 'bons exemplos de boas práticas', 'desnecessárias', 3, 'facil', 'estrutura'),
(1251, 'Um código bem estruturado facilita:', 'a execução', 'a compilação', 'a manutenção e evolução', 'a complexidade', 3, 'facil', 'estrutura'),
(1252, 'Comentários devem:', 'ser automáticos', 'ser longos', 'ser úteis e atualizados', 'ser omitidos', 3, 'facil', 'estrutura'),
(1253, 'Escrever código em um único bloco grande é:', 'recomendado', 'indiferente', 'má prática', 'obrigatório', 3, 'facil', 'estrutura'),
(1254, 'Variáveis devem ter nomes que:', 'indiquem seu propósito', 'sejam curtos e confusos', 'sejam iguais a comandos', 'sejam sempre abreviados', 1, 'facil', 'estrutura'),
(1255, 'Uma função deve ter:', 'muitas responsabilidades', 'um nome genérico', 'uma responsabilidade clara', 'sem comentários', 3, 'facil', 'estrutura'),
(1256, 'Comentários redundantes:', 'sempre ajudam', 'devem ser evitados', 'tornam o código melhor', 'são obrigatórios', 2, 'facil', 'estrutura'),
(1257, 'Código com boa indentação é:', 'mais lento', 'mais difícil', 'mais legível', 'mais complexo', 3, 'facil', 'estrutura'),
(1258, 'Qual prática NÃO é recomendada?', 'variáveis com nomes claros', 'código modularizado', 'código desorganizado e confuso', 'funções bem definidas', 3, 'facil', 'estrutura'),
(1259, 'Um comentário deve:', 'ser confuso', 'ser desnecessário', 'complementar a compreensão do código', 'ser omitido', 3, 'facil', 'estrutura'),
(1260, 'Qual é uma boa prática para código legível?', 'usar nomes genéricos', 'usar indentação consistente', 'não comentar', 'misturar idiomas no código', 2, 'facil', 'estrutura'),
(1261, 'Qual o objetivo dos comentários?', 'confundir quem lê', 'explicar o que já é óbvio', 'explicar o funcionamento e raciocínio do código', 'melhorar a performance', 3, 'facil', 'estrutura'),
(1262, 'Um código bem comentado:', 'gera erro', 'ajuda na manutenção', 'é mais lento', 'é mais difícil de entender', 2, 'facil', 'estrutura'),
(1263, 'Qual prática deve ser evitada?', 'modularização', 'funções pequenas', 'indentação correta', 'uso excessivo de variáveis globais', 4, 'facil', 'estrutura'),
(1264, 'Variáveis com nomes como temp, var1 devem ser:', 'sempre usadas', 'usadas em todo o código', 'evitadas em código final', 'obrigatórias', 3, 'facil', 'estrutura'),
(1265, 'Qual prática facilita a reutilização de código?', 'código em um único bloco', 'duplicar código', 'uso de funções', 'evitar comentários', 3, 'facil', 'estrutura'),
(1266, 'Comentários devem ser escritos:', 'após o código ser finalizado', 'apenas se o código for complexo', 'durante o desenvolvimento, conforme necessidade', 'apenas no final do arquivo', 3, 'facil', 'estrutura'),
(1267, 'Um código bem estruturado é:', 'difícil de entender', 'fácil de entender e manter', 'mais lento', 'mais pesado', 2, 'facil', 'estrutura'),
(1268, 'Qual é uma prática incorreta?', 'código modularizado', 'código indentado', 'nomes descritivos', 'código muito longo e repetitivo', 4, 'facil', 'estrutura'),
(1269, 'Comentários devem ser:', 'genéricos', 'sempre muito longos', 'claros e diretos', 'omissos', 3, 'facil', 'estrutura'),
(1270, 'Qual prática melhora a leitura do código?', 'não usar funções', 'variáveis como a, b, c', 'identação e espaçamento', 'comentários desnecessários', 3, 'facil', 'estrutura'),
(1271, 'Qual prática facilita a manutenção?', 'código sem funções', 'código bem documentado e modular', 'nomes genéricos', 'código todo no main', 2, 'facil', 'estrutura'),
(1272, 'Um código bem comentado:', 'executa mais rápido', 'é mais compreensível', 'ocupa mais memória', 'gera mais loops', 2, 'facil', 'estrutura'),
(1273, 'Qual NÃO é uma boa prática?', 'uso de funções', 'indentação correta', 'código desorganizado', 'comentários úteis', 3, 'facil', 'estrutura'),
(1274, 'Variáveis devem ter:', 'nomes aleatórios', 'nomes iguais a palavras reservadas', 'nomes curtos e confusos', 'nomes que indiquem seu propósito', 4, 'facil', 'estrutura'),
(1275, 'Qual prática ajuda no debug?', 'não comentar', 'código confuso', 'comentários bem colocados', 'variáveis genéricas', 3, 'facil', 'estrutura'),
(1276, 'Código modular é:', 'mais fácil de manter', 'mais difícil de entender', 'mais lento', 'mais confuso', 1, 'facil', 'estrutura'),
(1277, 'Comentários não devem:', 'explicar lógica complexa', 'ser úteis', 'ser redundantes', 'ser claros', 3, 'facil', 'estrutura'),
(1278, 'Um código bem estruturado:', 'gera mais bugs', 'facilita testes', 'é mais lento', 'usa mais memória', 2, 'facil', 'estrutura'),
(1279, 'Qual é uma boa prática?', 'escrever tudo no main', 'não usar comentários', 'não modularizar', 'usar boas práticas de codificação', 4, 'facil', 'estrutura'),
(1280, 'Qual prática facilita a compreensão do código?', 'nomes genéricos', 'código sem funções', 'comentários úteis', 'código confuso', 3, 'facil', 'estrutura'),
(1281, 'Qual é uma prática incorreta?', 'código mal indentado', 'nomes claros', 'modularização', 'comentários atualizados', 1, 'facil', 'estrutura'),
(1282, 'Um bom comentário:', 'deve ser redundante', 'deve explicar o óbvio', 'deve complementar a lógica do código', 'deve ser confuso', 3, 'facil', 'estrutura'),
(1283, 'Qual prática torna o código mais reutilizável?', 'não usar funções', 'código em um bloco só', 'uso de funções bem definidas', 'duplicar código', 3, 'facil', 'estrutura'),
(1284, 'Variáveis como a1, temp2 devem ser:', 'padrão', 'evitadas', 'obrigatórias', 'recomendadas', 2, 'facil', 'estrutura'),
(1285, 'Qual prática facilita o debug?', 'código desorganizado', 'nomes genéricos', 'comentários bem feitos', 'código sem espaçamento', 3, 'facil', 'estrutura'),
(1286, 'Código bem comentado:', 'gera erro', 'facilita manutenção futura', 'aumenta tempo de execução', 'consome mais memória', 2, 'facil', 'estrutura'),
(1287, 'Modularizar o código significa:', 'escrever tudo no main', 'não usar funções', 'dividir em funções ou módulos', 'não comentar', 3, 'facil', 'estrutura'),
(1288, 'Código sem indentação:', 'é mais rápido', 'é difícil de entender', 'é mais curto', 'é recomendado', 2, 'facil', 'estrutura'),
(1289, 'Variáveis devem ter nomes:', 'claros e descritivos', 'curtos demais', 'genéricos', 'iguais a palavras reservadas', 1, 'facil', 'estrutura'),
(1290, 'Qual prática ajuda na manutenção em equipe?', 'não modularizar', 'não comentar', 'código bem documentado', 'escrever tudo em um arquivo só', 3, 'facil', 'estrutura'),
(1291, 'Comentários devem ser:', 'confusos', 'redundantes', 'claros e úteis', 'sempre longos', 3, 'facil', 'estrutura'),
(1292, 'Código bem modularizado:', 'é mais difícil de entender', 'é mais lento', 'facilita manutenção e testes', 'ocupa mais memória', 3, 'facil', 'estrutura'),
(1293, 'Qual NÃO é uma boa prática?', 'escrever funções curtas', 'modularizar o código', 'indentação correta', 'usar nomes genéricos para variáveis', 4, 'facil', 'estrutura'),
(1294, 'Variáveis com nomes como contador, total são:', 'ruins', 'bons exemplos', 'obrigatórios', 'genéricos demais', 2, 'facil', 'estrutura'),
(1295, 'Qual prática melhora a colaboração em equipe?', 'código confuso', 'não comentar', 'código em um único bloco', 'comentários úteis e organização', 4, 'facil', 'estrutura'),
(1296, 'Código bem indentado:', 'facilita a leitura', 'é mais lento', 'gera mais bugs', 'ocupa mais espaço em disco', 1, 'facil', 'estrutura'),
(1297, 'Qual é um exemplo de má prática?', 'comentários úteis', 'indentação correta', 'funções pequenas', 'código duplicado', 4, 'facil', 'estrutura'),
(1298, 'Um código bem documentado:', 'gera mais loops', 'é difícil de entender', 'facilita o entendimento por outros desenvolvedores', 'ocupa mais memória', 3, 'facil', 'estrutura'),
(1299, 'Qual prática devemos SEMPRE evitar?', 'comentários úteis', 'nomes claros', 'modularização', 'código desorganizado e sem indentação', 4, 'facil', 'estrutura'),
(1300, 'O uso excessivo de variáveis globais pode causar:', 'código mais rápido', 'código mais limpo', 'dificuldade de manutenção e erros imprevisíveis', 'melhor legibilidade', 3, 'dificil', 'estrutura'),
(1301, 'Qual é uma característica de um código bem estruturado?', 'repete funções', 'ignora boas práticas', 'segue padrões e convenções da equipe', 'não usa comentários', 3, 'dificil', 'estrutura'),
(1302, 'O que é uma boa prática em relação a comentários?', 'comentar toda linha de código', 'usar sempre comentários automáticos', 'explicar o \"porquê\", não só o \"o que\"', 'escrever longos blocos de comentários', 3, 'dificil', 'estrutura'),
(1303, 'Variáveis globais devem ser usadas:', 'sempre', 'para evitar parâmetros', 'com muito cuidado e quando realmente necessário', 'para melhorar performance', 3, 'dificil', 'estrutura'),
(1304, 'Funções devem ter:', 'o máximo de responsabilidades', 'uma responsabilidade bem definida', 'nomes genéricos', 'poucos parâmetros sempre', 2, 'dificil', 'estrutura'),
(1305, 'Qual é o problema de funções muito longas?', 'são mais rápidas', 'gastam menos memória', 'são difíceis de entender, testar e manter', 'melhoram a legibilidade', 3, 'dificil', 'estrutura'),
(1306, 'Ao nomear uma função, é importante:', 'usar abreviações', 'usar números', 'usar nomes que indiquem claramente o que a função faz', 'copiar nome de outras funções', 3, 'dificil', 'estrutura'),
(1307, 'Qual a vantagem de seguir um padrão de codificação?', 'não há vantagem', 'reduz tempo de execução', 'facilita trabalho em equipe e manutenção', 'melhora performance', 3, 'dificil', 'estrutura'),
(1308, 'Qual prática NÃO deve ser seguida em equipes grandes?', 'documentar funções', 'usar padrão de codificação', 'escrever código legível', 'usar estilos pessoais sem seguir o padrão', 4, 'dificil', 'estrutura'),
(1309, 'Comentários devem ser:', 'automáticos sempre', 'repetitivos', 'atuais e condizentes com o código', 'apenas genéricos', 3, 'dificil', 'estrutura'),
(1310, 'Um código que viola o princípio de responsabilidade única:', 'não compila', 'é mais rápido', 'é mais difícil de entender e manter', 'melhora performance', 3, 'dificil', 'estrutura'),
(1311, 'Um código modular:', 'facilita testes unitários', 'ocupa mais memória', 'reduz performance', 'exige mais comentários', 1, 'dificil', 'estrutura'),
(1312, 'Qual a consequência de não seguir padrão de indentação?', 'gera mais loops', 'aumenta consumo de CPU', 'dificulta leitura e revisão do código', 'melhora performance', 3, 'dificil', 'estrutura'),
(1313, 'Comentários obsoletos devem ser:', 'ignorados', 'mantidos', 'atualizados ou removidos', 'destacados em maiúsculas', 3, 'dificil', 'estrutura'),
(1314, 'Um código com duplicação:', 'melhora manutenção', 'consome menos memória', 'é mais difícil de manter e propenso a erros', 'facilita reuso', 3, 'dificil', 'estrutura'),
(1315, 'Qual prática melhora a leitura em projetos grandes?', 'não usar comentários', 'não modularizar', 'variáveis com nomes genéricos', 'usar padrões e boas práticas de codificação', 4, 'dificil', 'estrutura'),
(1316, 'Para que servem convenções de codificação?', 'melhorar performance', 'reduzir uso de memória', 'uniformizar o estilo e facilitar colaboração', 'dificultar cópia de código', 3, 'dificil', 'estrutura'),
(1317, 'Qual a vantagem de um código bem documentado?', 'reduz bugs', 'facilita onboarding de novos desenvolvedores', 'reduz tempo de compilação', 'consome menos RAM', 2, 'dificil', 'estrutura'),
(1318, 'Variáveis de escopo global devem:', 'sempre ser preferidas', 'substituir parâmetros', 'ser evitadas quando possível', 'ser usadas em todo projeto', 3, 'dificil', 'estrutura'),
(1319, 'Um código mal documentado:', 'roda mais rápido', 'usa menos memória', 'é difícil de manter a longo prazo', 'facilita testes', 3, 'dificil', 'estrutura'),
(1320, 'Em um projeto grande, seguir padrão de código ajuda:', 'a compilar mais rápido', 'a escrever menos código', 'a manter consistência entre diferentes partes do projeto', 'a aumentar performance', 3, 'dificil', 'estrutura'),
(1321, 'Funções muito genéricas sem propósito claro:', 'melhoram performance', 'reduzem uso de memória', 'confundem quem lê o código', 'facilitam manutenção', 3, 'dificil', 'estrutura'),
(1322, 'Qual o principal objetivo da separação de responsabilidades?', 'reduzir consumo de RAM', 'aumentar performance', 'facilitar manutenção e evolução do código', 'diminuir número de arquivos', 3, 'dificil', 'estrutura'),
(1323, 'Variáveis com escopo local:', 'são mais lentas', 'facilitam manutenção e reduzem riscos de conflito', 'aumentam uso de memória', 'não devem ser usadas', 2, 'dificil', 'estrutura'),
(1324, 'Nomes como calcSalario, obterMedia:', 'são ruins', 'seguem boas práticas', 'devem ser abreviados', 'devem ser genéricos', 2, 'dificil', 'estrutura'),
(1325, 'Comentários devem focar em:', 'sintaxe', 'indentação', 'explicar decisões e raciocínio do código', 'performance', 3, 'dificil', 'estrutura'),
(1326, 'Variáveis com escopo local:', 'tornam o código mais difícil', 'ajudam a modularizar', 'tornam o código mais lento', 'não devem ser usadas', 2, 'dificil', 'estrutura'),
(1327, 'Qual prática facilita reutilização de código?', 'copiar e colar funções', 'variáveis globais', 'modularização adequada', 'código em um arquivo só', 3, 'dificil', 'estrutura'),
(1328, 'Em equipes grandes, comentários ajudam:', 'só quem escreveu', 'a performance', 'o compilador', 'outros desenvolvedores a entender o código', 4, 'dificil', 'estrutura'),
(1329, 'Nomes de variáveis e funções devem ser:', 'curtos e genéricos', 'iguais a palavras reservadas', 'significativos e descritivos', 'sempre em maiúsculas', 3, 'dificil', 'estrutura'),
(1330, 'Código bem indentado:', 'reduz performance', 'é mais legível', 'aumenta tempo de execução', 'ocupa mais memória', 2, 'dificil', 'estrutura'),
(1331, 'Funções muito grandes indicam:', 'código mais otimizado', 'falta de modularização', 'melhor performance', 'necessidade de mais comentários', 2, 'dificil', 'estrutura'),
(1332, 'Variáveis globais são perigosas porque:', 'consumem mais RAM', 'são lentas', 'podem causar efeitos colaterais inesperados', 'são difíceis de declarar', 3, 'dificil', 'estrutura'),
(1333, 'Um código bem modularizado:', 'compila mais rápido', 'facilita reuso e testes', 'gera mais loops', 'ocupa menos RAM', 2, 'dificil', 'estrutura'),
(1334, 'Comentários úteis devem:', 'ser repetitivos', 'explicar o que a sintaxe já mostra', 'explicar o raciocínio por trás do código', 'ser automáticos', 3, 'dificil', 'estrutura'),
(1335, 'Qual prática deve ser evitada?', 'modularização', 'indentação', 'código duplicado', 'uso de funções', 3, 'dificil', 'estrutura'),
(1336, 'Em um código bem estruturado, as funções:', 'têm nomes genéricos', 'fazem uma coisa bem definida', 'são muito longas', 'substituem variáveis', 2, 'dificil', 'estrutura'),
(1337, 'Boas práticas ajudam principalmente em:', 'performance', 'uso de RAM', 'manutenção e colaboração', 'loops aninhados', 3, 'dificil', 'estrutura'),
(1338, 'Qual é a maior vantagem de código bem comentado?', 'aumenta performance', 'reduz uso de CPU', 'facilita entendimento e manutenção', 'gera menos arquivos', 3, 'dificil', 'estrutura');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(1339, 'Qual o valor da expressão composta: (5 - 8) * (2 + 1)?', 'A) -4', 'B) -3', 'C) -9', 'D) -6', 3, 'dificil', 'Operadores'),
(1340, 'Dado: x = 5; y = x + 3 ** 2. Qual o valor final de y?', 'A) 14', 'B) 13', 'C) 8', 'D) 10', 1, 'dificil', 'Operadores'),
(1341, 'Dado: x = 2 ** 2; y = x + 4. Qual o valor final de y?', 'A) 8', 'B) 6', 'C) 10', 'D) 12', 1, 'dificil', 'Operadores'),
(1342, 'Resultado de: (5 + 3) * 2 > 10 && ((7 % 2 == 1) || (4 < 2))?', 'A) false', 'B) true', 'C) 1', 'D) 0', 2, 'dificil', 'Operadores'),
(1343, 'Resultado de: !(5 > 2) || (3 + 4 == 7 && 10 / 2 == 5)?', 'A) true', 'B) false', 'C) 1', 'D) 0', 1, 'dificil', 'Operadores'),
(1344, 'Resultado após: str1 = \'Hello, \'; str2 = \'world!\'; str3 = str1 + str2[::-1]', 'A) Hello, !dlrow', 'B) Hello, world!', 'C) Hello,', 'D) Hello + world!', 1, 'dificil', 'Operadores'),
(1345, 'Resultado de: (5 ** 2) % 6', 'A) 1', 'B) 5', 'C) 6', 'D) 0', 2, 'dificil', 'Operadores'),
(1346, 'Resultado de: 10 / 2 * 5 + 3 - 1', 'A) 27', 'B) 25', 'C) 26', 'D) 24', 3, 'dificil', 'Operadores'),
(1347, 'Valor de: (4 < 6) && !(10 < 2 || 5 > 3)', 'A) true', 'B) false', 'C) 0', 'D) 1', 2, 'dificil', 'Operadores'),
(1348, 'Resultado da expressão aninhada: (7 % 3) ** 2', 'A) 1', 'B) 4', 'C) 2', 'D) 0', 2, 'dificil', 'Operadores'),
(1349, 'Avalie: (6 * (3 - 1)) + 2', 'A) 18', 'B) 14', 'C) 12', 'D) 10', 2, 'dificil', 'Operadores'),
(1350, 'Resultado lógico de: not(7 >= 10) and (4 < 9)', 'A) true', 'B) false', 'C) 1', 'D) 0', 1, 'dificil', 'Operadores'),
(1351, 'Resultado após: str1 = \'Boa\'; str2 = \'noite\'; resultado = f\'{str1} {str2.upper()}\'', 'A) Boa NOITE', 'B) Boa noite', 'C) BOAnoite', 'D) Boa noite!', 1, 'dificil', 'Operadores'),
(1352, 'Valor final de x após: x = 4 * (2 + 3) ** 0', 'A) 20', 'B) 4', 'C) 10', 'D) 12', 2, 'dificil', 'Operadores'),
(1353, 'Resultado de: ((12 / 3) + 1) * 2', 'A) 10', 'B) 6', 'C) 8', 'D) 12', 1, 'dificil', 'Operadores'),
(1354, 'Resultado de: (2 > 5) or ((3 < 4) and not False)', 'A) true', 'B) false', 'C) 1', 'D) 0', 1, 'dificil', 'Operadores'),
(1355, 'Qual alternativa respeita a precedência: 5 + 3 * 2 ** 2', 'A) 64', 'B) 29', 'C) 17', 'D) 11', 3, 'dificil', 'Operadores'),
(1356, 'Resultado de: -5 + (2 * (3 + 1))', 'A) 1', 'B) -1', 'C) 3', 'D) 5', 1, 'dificil', 'Operadores'),
(1357, 'Resultado de: 3 ** (2 + 1)', 'A) 27', 'B) 9', 'C) 6', 'D) 3', 1, 'dificil', 'Operadores'),
(1358, 'Retorno de: (8 != 8) == False', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1359, 'Resultado de: (10 % 4) * 2', 'A) 4', 'B) 2', 'C) 0', 'D) 6', 1, 'dificil', 'Operadores');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(1360, 'Resultado de: 2 + 3 * 4 ** 2', 'A) 50', 'B) 38', 'C) 48', 'D) 60', 2, 'dificil', 'Operadores'),
(1361, 'Valor lógico de: not((10 == 10) and (5 > 2))', 'A) false', 'B) true', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1362, 'Valor de y em: x = 3; y = x * (2 + 1) ** 2', 'A) 9', 'B) 27', 'C) 18', 'D) 12', 2, 'dificil', 'Operadores'),
(1363, 'Resultado de: (2 * (3 + 4) - 5) ** 2', 'A) 100', 'B) 81', 'C) 121', 'D) 64', 1, 'dificil', 'Operadores'),
(1364, 'Valor lógico de: (3 > 1) and ((2 == 2) or (5 != 5))', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1365, 'Resultado de: 4 ** 2 / (1 + 1)', 'A) 8.0', 'B) 16.0', 'C) 4.0', 'D) 10.0', 1, 'dificil', 'Operadores'),
(1366, 'Valor de: (9 - 3 * 2) ** 2', 'A) 36', 'B) 16', 'C) 64', 'D) 25', 1, 'dificil', 'Operadores'),
(1367, 'Valor lógico de: not(7 < 2) and not(False)', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1368, 'Resultado de: ((2 + 3) * (4 - 1)) ** 2', 'A) 225', 'B) 100', 'C) 196', 'D) 81', 1, 'dificil', 'Operadores'),
(1369, 'Resultado de concatenação: str1 = \'Oi\'; str2 = \'Bem\'; str3 = str1[::-1] + str2', 'A) iOBem', 'B) iBem', 'C) OiBem', 'D) emOi', 1, 'dificil', 'Operadores'),
(1370, 'Valor de z: x = 2; y = 3; z = (x + y) ** 2', 'A) 25', 'B) 16', 'C) 10', 'D) 20', 1, 'dificil', 'Operadores'),
(1371, 'Resultado lógico de: (10 <= 5) or not(6 > 3)', 'A) false', 'B) true', 'C) 1', 'D) 0', 1, 'dificil', 'Operadores'),
(1372, 'Resultado de: (3 ** 2) ** 1', 'A) 9', 'B) 6', 'C) 3', 'D) 8', 1, 'dificil', 'Operadores'),
(1373, 'Resultado de: ((6 + 2) / 2) * 3 + 1', 'A) 13.0', 'B) 14.0', 'C) 12.0', 'D) 10.0', 1, 'dificil', 'Operadores'),
(1374, 'Valor lógico de: (10 == (5 + 5)) and not(False)', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1375, 'Total após: total = ((4 + 2) * 3) ** 0 + 5', 'A) 6', 'B) 18', 'C) 14', 'D) 5', 1, 'dificil', 'Operadores'),
(1376, 'Resultado de: 8 / 2 * ((2 + 2) ** 2)', 'A) 64', 'B) 16', 'C) 32', 'D) 48', 3, 'dificil', 'Operadores'),
(1377, 'Valor de: ((3 + 2) ** 2) / 5', 'A) 5.0', 'B) 6.25', 'C) 8.5', 'D) 7.2', 2, 'dificil', 'Operadores'),
(1378, 'Resultado lógico de: (5 != 5) and (2 < 3) or True', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1379, 'Ordem correta da expressão: -3 ** 2 + 4', 'A) 1', 'B) 9', 'C) -5', 'D) -2', 1, 'dificil', 'Operadores');
INSERT INTO `questions` (`id`, `question`, `answer1`, `answer2`, `answer3`, `answer4`, `correct_answer`, `dificuldade`, `topico`) VALUES
(1380, 'Resultado lógico de: (10 > 5) and not((2 + 2) != 4)', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1381, 'Resultado de: (5 * 2) + (8 / 2) ** 2', 'A) 26', 'B) 20', 'C) 24', 'D) 16', 1, 'dificil', 'Operadores'),
(1382, 'Resultado de: ((3 + 5) % 4) ** 2', 'A) 1', 'B) 4', 'C) 9', 'D) 16', 2, 'dificil', 'Operadores'),
(1383, 'Valor lógico de: not((3 <= 4) and not(2 == 2))', 'A) true', 'B) false', 'C) 1', 'D) 0', 1, 'dificil', 'Operadores'),
(1384, 'Resultado de: 5 ** 2 // (3 + 2)', 'A) 5', 'B) 4', 'C) 2', 'D) 1', 1, 'dificil', 'Operadores'),
(1385, 'Valor de: ((6 + 2) * 2) % 5', 'A) 4', 'B) 2', 'C) 3', 'D) 1', 1, 'dificil', 'Operadores'),
(1386, 'Resultado lógico de: ((3 < 5) or (6 > 7)) and not(False)', 'A) true', 'B) false', 'C) 0', 'D) 1', 1, 'dificil', 'Operadores'),
(1387, 'Resultado de: (7 - 3) * ((2 + 1) ** 2)', 'A) 36', 'B) 45', 'C) 48', 'D) 64', 1, 'dificil', 'Operadores'),
(1388, 'Resultado final após: a = 2; b = 4; c = a + (b * 2) ** 0', 'A) 3', 'B) 6', 'C) 5', 'D) 4', 1, 'dificil', 'Operadores'),
(1389, 'Valor lógico de: not((5 < 2) or (3 >= 3))', 'A) true', 'B) false', 'C) 0', 'D) 1', 2, 'dificil', 'Operadores');



-- --------------------------------------------------------

--
-- Estrutura para tabela `usuarios`
--

CREATE TABLE `usuarios` (
  `id` int(11) NOT NULL,
  `nome` varchar(100) NOT NULL,
  `email` varchar(150) NOT NULL,
  `senha` varchar(255) NOT NULL,
  `foto` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `usuarios`
--

INSERT INTO `usuarios` (`id`, `nome`, `email`, `senha`, `foto`) VALUES
(8, 'igorr', 'igorr@gmail.com', '$2b$10$4ePx9pn.2q9JaRAhI0zwy.i6hNXKPyUXYVk5knw43vQ9tQKt9Mbna', '1749057201187.jpg'),
(9, 'caio', 'c@gmail.com', '$2b$10$vfq3mgr7OupXDK6JhWG9QOW/ZPS0C1KY7UoUwmUlZ9NPTfddw6YSq', NULL);

-- --------------------------------------------------------

--
-- Estrutura para tabela `usuario_emblemas`
--

CREATE TABLE `usuario_emblemas` (
  `id` int(11) NOT NULL,
  `id_usuario` int(11) NOT NULL,
  `id_emblema` int(11) NOT NULL,
  `data_conquista` datetime DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Despejando dados para a tabela `usuario_emblemas`
--

INSERT INTO `usuario_emblemas` (`id`, `id_usuario`, `id_emblema`, `data_conquista`) VALUES
(2, 8, 1, '2025-06-04 16:35:37'),
(3, 9, 1, '2025-06-17 01:32:10');

--
-- Índices para tabelas despejadas
--

--
-- Índices de tabela `emblemas`
--
ALTER TABLE `emblemas`
  ADD PRIMARY KEY (`id`);

--
-- Índices de tabela `game_questions`
--
ALTER TABLE `game_questions`
  ADD PRIMARY KEY (`id`);

--
-- Índices de tabela `questions`
--
ALTER TABLE `questions`
  ADD PRIMARY KEY (`id`);

--
-- Índices de tabela `usuarios`
--
ALTER TABLE `usuarios`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `email_UNIQUE` (`email`);

--
-- Índices de tabela `usuario_emblemas`
--
ALTER TABLE `usuario_emblemas`
  ADD PRIMARY KEY (`id`),
  ADD KEY `id_usuario` (`id_usuario`),
  ADD KEY `id_emblema` (`id_emblema`);

--
-- AUTO_INCREMENT para tabelas despejadas
--

--
-- AUTO_INCREMENT de tabela `emblemas`
--
ALTER TABLE `emblemas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT de tabela `game_questions`
--
ALTER TABLE `game_questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;

--
-- AUTO_INCREMENT de tabela `questions`
--
ALTER TABLE `questions`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=1389;

--
-- AUTO_INCREMENT de tabela `usuarios`
--
ALTER TABLE `usuarios`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT de tabela `usuario_emblemas`
--
ALTER TABLE `usuario_emblemas`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=8;

--
-- Restrições para tabelas despejadas
--

--
-- Restrições para tabelas `usuario_emblemas`
--
ALTER TABLE `usuario_emblemas`
  ADD CONSTRAINT `usuario_emblemas_ibfk_1` FOREIGN KEY (`id_usuario`) REFERENCES `usuarios` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `usuario_emblemas_ibfk_2` FOREIGN KEY (`id_emblema`) REFERENCES `emblemas` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
